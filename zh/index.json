[{"body":"","link":"https://www.airplanecraft.com/zh/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://www.airplanecraft.com/zh/","section":"","tags":null,"title":"Claridade"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/index/","section":"tags","tags":null,"title":"Index"},{"body":"","link":"https://www.airplanecraft.com/zh/post/","section":"post","tags":["index"],"title":"Posts"},{"body":"","link":"https://www.airplanecraft.com/zh/categories/quant/","section":"categories","tags":null,"title":"Quant"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84/","section":"tags","tags":null,"title":"量化投资"},{"body":"三因子模型（Fama-French）与CAPM模型的比较 以下是三因子模型（Fama-French三因子模型）与CAPM（资本资产定价模型）的对比分析，涵盖理论基础、因子构成、应用场景及优缺点：\n一、核心理论对比 维度 CAPM模型 三因子模型 理论基础 单因子模型，仅考虑市场风险溢价（市场因子）。 多因子模型，扩展CAPM，引入市值因子（SMB）、账面市值比因子（HML）。 核心公式 $$ E(R_i) = R_f + \\beta_i (E(R_m) - R_f) $$ $$ E(R_i) = R_f + \\beta_{m}(R_m - R_f) + \\beta_{SMB}SMB + \\beta_{HML}HML $$ 因子数量 1个（市场因子） 3个（市场因子 + 市值因子 + 账面市值比因子） 假设前提 市场完全有效、投资者理性同质、无摩擦交易。 放松CAPM假设，承认市场异象（如小盘股溢价、价值股溢价）。 二、因子解释能力 1. CAPM的局限性 无法解释市场异象： 小盘股效应：小市值股票长期收益高于CAPM预测。 价值股效应：低市净率（P/B）股票表现优于高P/B股票。 实证缺陷：CAPM对股票横截面收益的解释力不足（R²通常 \u0026lt; 70%）。 2. 三因子模型的改进 新增因子： SMB（Small Minus Big）：小市值股票收益减大市值股票收益，捕捉规模效应。 HML（High Minus Low）：高账面市值比股票（价值股）收益减低账面市值比股票（成长股）收益。 解释力提升：三因子模型对股票收益的解释力显著提高（R²可达90%+），尤其在解释长期收益差异时更优。 三、实证表现对比 场景 CAPM 三因子模型 美股市场 解释力较弱，尤其对小盘股、价值股失效。 显著改善对小盘股、价值股收益的解释。 新兴市场 适用性更低（市场有效性差）。 仍能部分解释异象，但因子溢价可能不稳定。 行业分析 仅反映行业与市场的相关性。 可分解行业收益来源（如科技股受成长因子驱动）。 四、应用场景差异 场景 CAPM适用性 三因子模型适用性 资产定价 快速估算股权成本（WACC），适合粗略估值。 更精确的资产定价，适用于基金业绩归因、多因子选股。 组合管理 单因子风险暴露管理（如β对冲）。 多因子风险控制（市值、价值风格暴露管理）。 学术研究 理论教学与简单实证分析。 市场异象研究、因子投资理论验证。 五、优缺点总结 模型 优点 缺点 CAPM 简单易用，参数少，计算成本低。 忽略市场异象，解释力不足，假设过于理想化。 三因子模型 解释力强，更贴近现实市场行为。 数据需求高（需市值、账面市值比数据），因子定义可能存在争议（如HML的稳定性）。 六、案例分析 案例：某小盘价值股的超额收益归因 CAPM分析： 该股票β=1.2，市场收益10%，无风险利率3% → 预期收益=3% +1.2×(10%-3%)=11.4%。 实际收益18% → 超额收益6.6%（α=6.6%），但无法解释来源。 三因子模型分析： 因子暴露：β_m=1.2，β_SMB=0.8（小盘股暴露），β_HML=1.0（价值股暴露）。 预期收益=3% +1.2×7% +0.8×4% +1.0×5%=3%+8.4%+3.2%+5%=19.6%。 实际收益18% → 超额收益-1.6%（α≈0），说明收益主要来自因子暴露，而非主动管理能力。 七、后续发展 五因子模型：Fama-French进一步加入盈利因子（RMW）和投资因子（CMA），增强对收益的解释力。 因子投资实践：三因子模型催生了Smart Beta ETF（如小盘价值ETF），成为被动投资的重要工具。 总结 CAPM：适合快速估算市场风险溢价，但需谨慎用于复杂市场环境。 三因子模型：更全面揭示收益来源，是因子投资和组合管理的基石，但需关注因子溢价的变化（如近年成长股跑赢价值股）。 选择建议： 学术研究/精细化投资 → 三因子模型。 初级估值/教学场景 → CAPM。 ","link":"https://www.airplanecraft.com/zh/post/fama-french-vs-capm-model/","section":"post","tags":["量化投资","因子"],"title":"三因子模型和CA模型的区别"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/%E5%9B%A0%E5%AD%90/","section":"tags","tags":null,"title":"因子"},{"body":"如何评价一款基金的收益率？ 评价一款基金的收益率需从多维度综合分析，既要关注绝对收益，也要衡量风险调整后的表现，并结合市场环境、策略特点及投资目标。以下是系统化的评价框架：\n一、绝对收益分析 1. 收益率计算 累计收益率：基金成立以来的总回报率（需扣除费用）。 年化收益率：将不同周期收益折算为年化值，便于跨期比较。 [ \\text{年化收益率} = \\left(1 + \\text{总收益率}\\right)^{\\frac{365}{\\text{持有天数}}} - 1 ] 2. 收益来源分解 市场收益（Beta收益）：通过回归分析计算基金对市场基准（如沪深300）的敏感性（β值）。 [ \\text{Beta收益} = \\beta \\times \\text{基准收益率} ] 超额收益（Alpha收益）：剔除市场影响后的主动管理能力。 [ \\alpha = \\text{基金实际收益} - \\left(\\text{无风险利率} + \\beta \\times (\\text{基准收益} - \\text{无风险利率})\\right) ] 二、风险调整后收益 1. 夏普比率（Sharpe Ratio） 公式：衡量单位总风险（波动性）带来的超额收益。 [ \\text{夏普比率} = \\frac{\\text{基金收益} - \\text{无风险利率}}{\\text{收益波动率（标准差）}} ] 标准：夏普比率 \u0026gt; 1 为优秀，\u0026gt; 2 为顶级（如对冲基金）。 2. 索提诺比率（Sortino Ratio） 公式：仅考虑下行风险（负波动率），更适合评价稳健型基金。 [ \\text{索提诺比率} = \\frac{\\text{基金收益} - \\text{无风险利率}}{\\text{下行标准差}} ] 3. 最大回撤（Max Drawdown） 定义：基金历史最大亏损幅度（峰值到谷值的跌幅）。 意义：反映极端风险承受能力，最大回撤 \u0026gt; 30% 需谨慎。 三、相对收益分析 1. 基准对比 胜率：基金跑赢基准的月份/季度占比（如胜率 \u0026gt; 60% 为优）。 滚动收益差：分阶段（如滚动1年）对比基金与基准的累计收益差异。 2. 同类排名 四分位法：在同类基金中的排名（前25%为优秀）。 风格箱分析：对比同风格（如成长型、价值型）基金表现。 四、风险与稳定性 1. 波动率（标准差） 年化波动率 \u0026lt; 15% 为低风险，\u0026gt; 30% 为高风险（如行业主题基金）。 2. Beta值 β \u0026gt; 1：波动大于市场（适合牛市）；β \u0026lt; 1：防御性强（适合熊市）。 3. 收益分布分析 偏度（Skewness）：收益分布是否左偏（常出现小跌大跌）或右偏（常出现小涨大涨）。 峰度（Kurtosis）：衡量极端收益概率，峰度 \u0026gt; 3 预示“黑天鹅”风险。 五、策略与运营评价 1. 投资逻辑验证 策略一致性：是否坚持宣称的投资风格（如价值投资、量化选股）。 持仓透明度：季报披露的持仓与策略是否匹配（如芯片基金是否重仓半导体股）。 2. 费用影响 总费率（TER）：管理费+托管费+其他费用，年费率 \u0026gt; 2% 需警惕侵蚀收益。 换手率：高频交易导致佣金和冲击成本上升（换手率 \u0026gt; 300% 可能低效）。 3. 规模效应 规模与收益关系：规模过大可能导致策略失效（如小盘股基金超过50亿需警惕）。 六、案例分析：某科技主题基金评价 数据假设 基金年化收益：25%（同期沪深300收益12%，无风险利率3%）。 年化波动率：28%，最大回撤：-35%，夏普比率：0.79，β=1.3。 评价结论 绝对收益亮眼但风险高：25%收益显著跑赢市场，但波动率与回撤较大。 Alpha能力存疑：计算得α=25% - [3% +1.3×(12%-3%)] = 25% -14.7% = 10.3%，若统计显著（t检验），表明有主动管理能力。 风险调整后收益一般：夏普比率0.79（\u0026lt;1），单位风险回报偏低。 行业集中风险：重仓科技股导致β=1.3，需评估是否与投资者风险偏好匹配。 七、综合评分表 指标 权重 评分（1-5） 评价依据 年化收益 20% 4.5 显著跑赢基准 夏普比率 15% 3.0 低于1，风险调整收益一般 最大回撤 15% 2.0 -35%回撤，风险过高 Alpha显著性 20% 4.0 超额收益显著但需长期验证 费用与换手率 10% 3.5 费率1.5%，换手率200% 策略一致性 10% 4.0 持仓符合科技主题 规模适应性 10% 4.0 当前规模20亿，未明显失效 综合得分 100% 3.6 中等偏上，适合高风险偏好者 八、实用工具推荐 数据获取：Wind、Choice（付费）、Tushare（免费）。 分析平台：晨星网（风险指标）、韭圈儿APP（基金对比）。 自建模型：Python的pyfolio库（收益归因分析）、Excel（夏普比率计算模板）。 总结 基金的收益率评价需兼顾收益、风险、策略一致性及成本，避免单一指标误导。高收益基金可能是“承担高风险”或“踩中风口”的结果，需通过长期观察（至少1个牛熊周期）和归因分析验证其可持续性。对散户而言，选择与自己风险承受能力匹配、费用合理且策略透明的基金更为关键。\n","link":"https://www.airplanecraft.com/zh/post/how-to-evaluate-fund-returns/","section":"post","tags":["量化投资"],"title":"如何评估一款基金基金的收益率"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/ai/","section":"tags","tags":null,"title":"AI"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/tradindview/","section":"tags","tags":null,"title":"Tradindview"},{"body":"技术门槛的降低 编程工具普及：Python等易学语言成为主流，开源库（如Pandas、Numpy、TA-Lib）简化了数据处理和策略开发。\n低成本基础设施：云服务器（如阿里云、腾讯云）价格下降，个人也能负担高频交易所需的算力。\n开源平台支持：Backtrader、vn.py等框架提供免费回测工具，无需自建系统。\n数据爬虫技术的普及包括开源程序\n数据门槛的降低 免费开源数据（适合入门）\n1.1 Tushare Pro：基础数据免费（需注册，部分高频数据需积分），覆盖A股、指数、财务数据。\n1.2 AKShare：完全免费，支持股票、期货、宏观经济、舆情等多维度数据（基于Python）。\n1.3 Yahoo Finance：全球市场历史行情数据（通过yfinance库获取）。\n1.4 Binance API\n1.5 Futu API\n低成本付费数据（适合进阶）\n2.1 Wind 万得金融终端（个人版）：年费约数千元，提供A股、期货、债券的深度数据。\n2.2 同花顺iFinD ：基础套餐约3000元/年，含财务数据、资金流向。\n2.3 JoinQuant（聚宽）API：月度会员可获取高质量股票、期货数据（约200元/月）。\n2.4 Trading Economics：全球宏观数据API（约50美元/月起）。\n2.5 东方财富Choice：舆情热度、产业链数据（按需付费）。\n2.6 Kaggle数据集：开源社区中的股票预测、消费行为等结构化数据。\n量化平台的崛起 Tradingview 的 崛起和成熟，进一步降低了量化的门槛，TradingView 是全球领先的金融分析平台，主打多资产图表分析与社交化交易。其核心功能包括：\n1.1 多市场覆盖：支持股票、外汇、加密货币、期货等全球市场实时行情。\n1.2 高级图表工具：内置百余种技术指标（如MACD、布林带）、自定义绘图及多时间框架分析。\n1.3 策略开发：通过Pine Script编写自动化交易策略，支持回测并一键对接券商执行。\n1.4 社区互动：用户可分享观点、策略模板，跟随高手交易信号。\n1.5 跨平台接入：提供网页、桌面及移动端，兼容MetaTrader、Interactive Brokers等经纪商\n1.6 在线编程pine script，用户不再需要下载数据以及程序运行在自己的服务器上了\nAI工具的崛起 1.1 vibe coding,辅助编程， 1.2 辅助因子和策略的开发 1.3 动态风控 ","link":"https://www.airplanecraft.com/zh/post/quant-introduction/","section":"post","tags":["量化投资","AI","tradindview"],"title":"为什么越来越多的散户开始做量化"},{"body":"","link":"https://www.airplanecraft.com/zh/categories/airplanecraft/","section":"categories","tags":null,"title":"Airplanecraft"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/radiocontroller/","section":"tags","tags":null,"title":"Radiocontroller"},{"body":"本文使用的硬件列表 Radiomaster Zorro 遥控器 BetaFPv air 圈机 步骤 默认是用Zorro的内置的elrs高频模块 Zorro遥控器上有双摇杆（4通道），还有A-h的拨杆和s1 s2旋钮，一共14个通道（即便不适用混用的话，最少也支持14个通道） AIR 支持16通道 遥控器跟air无人机对频，需要连续接点断电三次 打开遥控器ELRS -\u0026gt;bind air的接收机不再闪烁说明已经对频成功 测试遥控器上1-12通道，在air的飞控上都可以看到 但是测试13-14通道在air飞控上没有任何反应 遥控器和飞控的通道展示 问题所在 默认的ELRS是250mHZ，默认的支持的通道数是12个 解决方案 ELRS的频率改为100M或者333M，支持通道选择16 重新测试 波动遥控器上的13 14 15 16 通道，飞控上都会有反应 总结 飞控对ELRS支持一半至少是16通道，elrs的遥控器硬件上目前支持至少16通道，但是最终elrs能支持多少个通道取决于传输的频率，默认250M的只能支持12通道，如果需要更多的通道支持，那么要设置不同的频率\n!\n","link":"https://www.airplanecraft.com/zh/post/elrschannelnumberissue/","section":"post","tags":["radiocontroller"],"title":"Radiomaster的zorro遥控器在飞控上只能看到12个通道"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/dl/","section":"tags","tags":null,"title":"DL"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/gai/","section":"tags","tags":null,"title":"GAI"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/ml/","section":"tags","tags":null,"title":"ML"},{"body":"","link":"https://www.airplanecraft.com/zh/categories/technology/","section":"categories","tags":null,"title":"Technology"},{"body":"什么是AI 人工智能（AI）是指计算机系统能够执行人类通常需要使用智力才能完成的任务的能力。这些任务可以包括语音识别、图像识别、自然语言处理、决策制定等等。人工智能的目标是让计算机拥有类似人类的智能水平，能够像人一样学习、推理、理解和适应环境。\n什么是ML 机器学习（ML）是一种人工智能的分支，其主要关注如何让计算机根据数据自动学习并改进算法，而不需要人工干预。换句话说，机器学习是一种数据驱动的方法，通过分析和学习数据中的模式和规律，让计算机能够自主地进行预测和决策。机器学习算法通常可以分为监督学习、无监督学习、半监督学习和强化学习等几种类型。\n什么是DL 深度学习（DL）是机器学习的一种特殊形式，其主要依赖于深层神经网络（DNN）来实现数据的学习和处理。深度学习的主要特点是可以从大量的未标记数据中进行学习，并生成高度抽象的特征表示。深度学习已经被广泛应用于图像和语音识别、自然语言处理、推荐系统等领域，并在这些领域中取得了惊人的成果。\nAI,ML和DL的应用领域 人工智能、机器学习和深度学习已经在各个领域得到了广泛的应用，这里列举几个典型的应用领域。\n自然语言处理（NLP）：自然语言处理是人工智能领域的一个重要应用方向，其主要目标是让计算机能够理解、分析和生成自然语言。在这个领域中，机器学习和深度学习算法被广泛应用于文本分类、情感分析、机器翻译、问答系统等任务。\n计算机视觉（CV）：计算机视觉是指让计算机能够理解和分析图像和视频，并从中提取有用的信息。在这个领域中，深度学习算法已经成为了主流，广泛应用于图像分类、目标检测、物体跟踪、人脸识别等任务。\n语音识别（ASR）：语音识别是指让计算机能够理解和转换人类语音的能力。在这个领域中，深度学习算法已经成为了主流，广泛应用于语音识别、语音合成等任务。\n推荐系统：推荐系统是指根据用户的历史行为、兴趣和偏好，向用户推荐个性化的商品、服务或信息的系统。在这个领域中，机器学习和深度学习算法被广泛应用于用户行为分析、特征提取、推荐模型建立等任务。\n自动驾驶：自动驾驶技术是指让汽车、飞机、无人机等交通工具能够自主地行驶和操作的技术。在这个领域中，深度学习算法被广泛应用于图像处理、目标检测、障碍物识别等任务。\nAI、ML和DL的技术原理 人工智能、机器学习和深度学习的实现都依赖于一些基础技术和算法，下面介绍其中一些常见的技术原理。\n神经网络：神经网络是指一种模拟人类神经系统的计算模型，其基本单元是神经元。深度学习中的神经网络通常包括输入层、隐藏层和输出层，其中隐藏层可以有多层。不同的神经网络结构和算法可以应用于不同的任务。\n卷积神经网络（CNN）：卷积神经网络是一种特殊的神经网络结构，其主要针对图像和视频等二维数据的处理。卷积神经网络中的卷积层和池化层可以有效提取图像中的特征，并通过全连接层进行分类和识别。\n循环神经网络（RNN）：循环神经网络是一种特殊的神经网络结构，其主要针对序列数据的处理。循环神经网络可以通过循环连接来处理序列数据中的时序信息，广泛应用于语音识别、机器翻译等任务。\n深度学习框架 深度学习框架是指一些基于编程语言的工具箱，可以方便地构建和训练深度学习模型。常见的深度学习框架包括TensorFlow、PyTorch、Keras等。\nAI、ML和DL的区别 尽管人工智能、机器学习和深度学习的概念和应用有所重叠，但它们之间还是存在一些明显的区别。\n技术原理不同：人工智能是一个比较宽泛的概念，包括了许多技术和算法；机器学习是一种数据驱动的方法，主要关注如何让计算机自动学习和改进算法；深度学习是机器学习的一种特殊形式，依赖于深层神经网络来实现数据的学习和处理。\n应用场景不同：人工智能、机器学习和深度学习都有广泛的应用场景，但其应用范围和任务却有所不同。人工智能的应用范围相对广泛，可以应用于语音识别、图像识别、自然语言处理等多个领域；机器学习主要应用于数据挖掘、预测分析、模式识别等领域；深度学习则主要应用于计算机视觉、自然语言处理、推荐系统等领域。\n什么是生成式AI 生成式人工智能（Generative Artificial Intelligence，简称生成式 AI）是一种基于机器学习和人工智能技术的范畴，其目标是让计算机系统能够自主地生成各种类型的数据，如文本、图像、音频等，而不仅仅是对已有数据的模仿或分类。生成式 AI 的核心能力在于创造新的内容，而不仅仅是对已知模式的重复应用。其中，生成式人工智能模型是生成式 AI 的重要组成部分，而 chatGPT 就是其中的一种代表性模型。\n生成式 AI 的原理基于深度学习，特别是神经网络技术，它可以通过分析大量的训练数据来学习数据的分布和模式，然后利用这些学习到的模式来生成新的数据。生成式 AI 不仅可以生成高质量的文本，还可以用于图像生成、音乐创作、视频生成等各种领域。\n生成式 AI 模型的核心思想是使用生成对抗网络（GANs）、变分自编码器（VAEs）等架构，通过多层次的神经网络模块来模拟数据的分布。这些模型可以被训练成生成与训练数据相似但又独特的新数据，从而实现创造性的内容生成。生成式 AI 在自然语言处理领域中的代表模型是循环神经网络（RNNs）、长短时记忆网络（LSTMs）、转换器模型（如 GPT）等。\n生成式ai应用 生成式 AI 的应用广泛，包括但不限于以下领域：\n自动写作与内容生成： 生成式 AI 可以自动生成文章、新闻、故事等文本内容，帮助内容创作者提高效率。\n艺术创作与设计： 在绘画、音乐、设计领域，生成式 AI 可以创造出独特的艺术品和创意作品。\n虚拟现实与游戏开发： 生成式 AI 可以生成逼真的虚拟世界、地图、角色等，用于游戏设计和虚拟现实体验。\n科学研究与创新： 在药物研发、分子设计、科学模拟等领域，生成式 AI 可以加速创新和发现。\n语音合成与音乐创作： 生成式 AI 可以创作音乐、合成语音，并模仿各种声音风格。\n教育与培训： 生成式 AI 可以为教育领域提供个性化的学习材料和辅助教学。\n医疗诊断与图像生成： 在医学图像分析、病理判读等领域，生成式 AI 可以辅助医疗专业人员进行诊断。\n生成式AI和传统AI的区别 传统人工智能和生成式人工智能的主要区别在于它们的能力和应用。传统的人工智能系统主要用于分析数据和做出预测，而生成式人工智能则更进一步，创建与其训练数据相似的新数据。\n换句话说，传统人工智能擅长模式识别，而生成式人工智能则擅长模式创建。传统人工智能可以分析数据并告诉你它看到了什么，但生成人工智能可以使用相同的数据来创造全新的东西。\n参考 https://mp.weixin.qq.com/s?__biz=MzI2OTc0NjkyMw==\u0026mid=2247492733\u0026idx=2\u0026sn=58462bee43c5bdb0f90ac1c3a71edfb8\u0026chksm=ead933f9ddaebaef0f912800621b157b4fa6554b826abf2ff87bd4b0c3a56b90039bdbaa307f\u0026scene=27\n","link":"https://www.airplanecraft.com/zh/post/generative-ai/","section":"post","tags":["ML","DL","GAI","AI"],"title":"什么是生成式ai"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/kubenetes/","section":"tags","tags":null,"title":"Kubenetes"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/paas/","section":"tags","tags":null,"title":"PAAS"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/service-mesh/","section":"tags","tags":null,"title":"Service Mesh"},{"body":"什么是service mesh Service Mesh又译作“服务网格”，作为服务间通信的基础设施层。Willian Morgan（Linkerd的CEO）如下定义Service Mesh。\nService Mesh 是一个基础设施层，用于处理服务间通信。云原生应用有着复杂的服务拓扑，Service Mesh 保证请求可以在这些拓扑中可靠地穿梭。在实际应用当中，Service Mesh 通常是由一系列轻量级的网络代理组成的，它们与应用程序部署在一起，但应用程序不需要知道它们的存在。\nService Mesh 实际上就是处于 TCP/IP 之上的一个抽象层，它假设底层的 L3/L4 网络能够点对点地传输字节（当然，它也假设网络环境是不可靠的，所以 Service Mesh 必须具备处理网络故障的能力）。\n架构图 通过以上的架构图，很清晰的看到，最重要的两个部分就是control plane 和sidecar\nControl Plane：控制平面是服务网格的集中管理和配置层。它负责控制和协调sidecar代理的行为。它提供了一个控制平面API，允许管理员配置流量管理、安全性和可观测性的策略、规则和设置。\nSidecar（旁车）：它基于Envoy代理。它是在同一Kubernetes POD中运行的另一个容器，负责处理所有的横切关注点。它基于旁车容器设计模式。•应用程序流量：微服务通过使用sidecar容器连接到其他微服务。应用程序流量基本上是Envoy sidecar代理容器之间的通信\nData Plane：数据平面指的是部署在每个服务实例旁边的一组sidecar代理组成的网络，用于与系统中的其他服务进行通信。它充当服务与网络的中间人。Sidecar代理处理入站和出站流量，拦截通信并提供其他功能。\nControllers：控制器是负责管理和控制网格行为的组件。它通常是一个软件组件，用于监视服务的状态和健康情况、配置流量路由和负载均衡规则、实施安全策略，并处理网格内服务之间通信的其他方面。\n服务发现（Service Discovery）：服务发现是服务网格架构中的一个重要组件。它使得服务能够动态地定位和连接到彼此，而无需硬编码的地址。\n证书授权机构（Certificate Authority）：它提供和管理根证书和中间证书，并执行证书签名操作。\n应用程序微服务（Application Microservices）：这些是组成应用程序的各个服务或微服务。它们负责处理特定的功能或任务。\nAPI端点（API Endpoints）：API端点是网格中的服务之间进行通信的入口点\n方案 目前社区Service Mesh的开源解决方案有：Buoyant 公司推出的 Linkerd 和 Google、IBM 等厂商牵头的 Istio。Linkerd 更加成熟稳定些，Istio 功能更加丰富、设计上更为强大，社区相对也更加强大一些。\nistio介绍 Istio是由Google、IBM和Lyft开源的微服务管理、保护和监控框架。Istio为希腊语，意思是”起航“。Istio是一个开源的服务网格平台，提供了一组工具和功能，用于管理和保护基于微服务的应用程序。它旨在解决复杂分布式系统中与服务之间通信、可观察性、安全性和流量管理相关的常见挑战。在其核心，Istio在应用程序中的每个微服务旁边部署一个称为Envoy的sidecar代理。这个sidecar代理拦截和管理服务的所有入站和出站流量，使得Istio可以控制和监控服务之间的通信。\n优点：\nIstio拥有庞大的在线服务网格社区，并且在互联网上备受赞誉和讨论。其GitHub的贡献者远远超过Linkerd，数量上占据优势。•此外，它支持Kubernetes和VM模式。\n缺点：\nIstio并非免费提供，使用它需要相当大的时间投入，包括阅读文档、设置、确保正常功能和持续维护。\n在生产环境中实施和集成Istio可能需要几周甚至几个月的时间，这取决于基础架构的复杂性。 使用Istio需要相当大的资源开销。•与Linkerd不同，它缺乏内置的管理仪表板。 此外，Istio要求使用其自己的入口网关。 Istio控制平面仅在Kubernetes容器中受支持，没有可用于Istio数据平面的VM模式。\n","link":"https://www.airplanecraft.com/zh/post/service-mesh/","section":"post","tags":["service mesh","PAAS","kubenetes"],"title":"什么是service mesh"},{"body":"什么是openshift OpenShift是红帽的云开发平台即服务（PaaS）。自由和开放源码的云计算平台使开发人员能够创建、测试和运行他们的应用程序，并且可以把它们部署到云中。OpenShift广泛支持多种编程语言和框架，如Java，Ruby和PHP等。另外它还提供了多种集成开发工具如Eclipse integration，JBoss Developer Studio和 Jenkins等。OpenShift 基于一个开源生态系统为移动应用，数据库服务等，提供支持。 OpenShift Online服务构建在Red Hat Enterprise Linux上。Red Hat Enterprise Linux提供集成应用程序，运行库和一个配置可伸缩的多用户单实例的操作系统，以满足企业级应用的各种需求。\n架构图 核心的概念 https://zhuanlan.zhihu.com/p/635160126?utm_id=0\n容器（Container） 镜像（Image） 用户（User） 项目（Project） 容器沙箱（Pod） 部署（Deployment） 服务（Service） 路由（Router） 持久化存储（Persistent Storage） 模板（Template） 构建（Build）和镜像流（ImageStream）\n为什么要使用openshift OpenShift的持续集成和持续部署（CI/CD）功能可以帮助开发者快速地将代码更改合并到主分支，并通过自动化的方式将其部署到生产环境，这不仅可以提高开发效率，还可以减少人为错误，提高软件的质量。\nOpenShift的多租户支持功能使得不同的团队或者公司可以在同一个平台上共享资源，而不需要担心数据安全问题，每个租户都可以拥有自己的独立的应用程序、服务和数据库，这样就可以满足不同团队的需求。\nOpenShift的应用市场功能提供了一个方便的平台，让开发者可以找到并使用各种预先构建的应用程序和服务，而不需要自己从头开始编写，这样不仅可以节省时间，还可以提高开发效率。\nOpenShift的自动扩展功能可以根据应用程序的负载情况自动调整资源的分配，以确保应用程序的性能和可用性，这样可以避免因为资源不足而导致的应用程序崩溃，也可以在需求增加时快速地扩展应用程序的能力。\nOpenShift的优势在于其简单易用、功能强大和灵活可扩展的特性，它可以帮助开发者快速地部署和管理应用程序，提高开发效率，降低运维成本。\n","link":"https://www.airplanecraft.com/zh/post/why-openshift/","section":"post","tags":["service mesh","PAAS","kubenetes"],"title":"企业为什么选择使用openshift"},{"body":"Introduction I will use this site to record my air plane craft life including:share teaching docs/videos,materials ,airplane models,electronic things.\n","link":"https://www.airplanecraft.com/zh/post/starting_recording_my_airplanecraft_life/","section":"post","tags":["airplanecraft"],"title":"airplancraft"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/airplanecraft/","section":"tags","tags":null,"title":"Airplanecraft"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/linux/","section":"tags","tags":null,"title":"Linux"},{"body":"Centos临时目录的系统管理 Linux产生大量的临时文件和目录，例如/tmp、/run 。RHEL7或者CentOS7中，systemd提供了一个结构化的可配置方法来管理临时文件和目录，即systemd-tmpfiles，可以创建、删除和管理临时文件的服务。旧版本系统使用watchtmp+cron来共同实现管理临时文件。\nsystemd启动后，其中一个启动的服务单元是systemd-tmpfiles-setup，该服务的命令为:systemd-tmpfiles --creat/--clean *conf , *conf是可选的，不写默认是使用所有配置文件\n配置文件，优先级从上到下。 /etc/tmpfiles.d/*conf ，管理员可修改的配置文件 /run/tmpfiles.d/*conf ，daemon应用程序自己管理的配置文件，不建议更改 /usr/lib/tmpfiles.d/*conf，rpm软件安装时，自动更新的配置文件，不能更改 定期清理timer systemd定时器单元会按固定间隔调用systemd-tmpfiles --clean 。 systemctl status systemd-tmpfiles-clean.timer 查看timer状态。 systemctl cat systemd-tmpfiles-clean.timer 查看timer具体内容，也可以进入/usr/lib/systemd/system目录后使用more systemd-tmpfiles-clean.timer 来查看。 从timer具体内容可以知道系统启动15分钟后和每天会运行一次systemd-tmpfiles --clean.那么timer定时运行的是哪些服务呢？ 是在systemd-tmpfiles-clean.service里面定义的： systemctl cat systemd-tmpfiles-clean.service可以查看。 ","link":"https://www.airplanecraft.com/zh/post/linux-tmpfiles-clean/","section":"post","tags":["linux","tmpfiles"],"title":"linux 临时文件的管理"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/tmpfiles/","section":"tags","tags":null,"title":"Tmpfiles"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/aws/","section":"tags","tags":null,"title":"Aws"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/cdk/","section":"tags","tags":null,"title":"Cdk"},{"body":" ","link":"https://www.airplanecraft.com/zh/post/aws-best-practise-financial/","section":"post","tags":["aws","cdk"],"title":"把最近一些东西aws东西画出来"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/centos/","section":"tags","tags":null,"title":"Centos"},{"body":"Centos 8 維護已經停止了 年前安裝了centos8.2 yum 的repo還是用的默認的，一切都正常,昨天在新的服務器上發現yum的repo已經無法使用了，我當時就意識到應該維護停止了，馬上去網上查一下，果然如此，如果想繼續使用請替換掉原來的mirror，使用centos-vault，https://mirrors.aliyun.com/centos-vault/ 或者 https://vault.centos.org/8.2.2004/ Centos 7 的維護還是會繼續到2024年 CentOS yes Community Enterprise Operating System（ Community enterprise operating system ） An acronym for , yes 100％ Reconstructed RHEL（ Red Hat Enterprise Linux）. Even though RHEL It costs money , but CentOS It's free. , Community supported businesses Linux Distribution version . Good at Linux And don't want to pay RHEL Support fee developers and companies always choose CentOS To save money and get enterprise software . however , Now the free ride is over ！ Red cap announced , As RHEL 8 A reconstructed version of ,CentOS Linux 8 Will be in 2021 In the end . CentOS 7 No impact！CentoS 7 Will continue in RHEL 7 In the life cycle (2024 end of the year ) Continue to get support . So right. CentOS 7 The user has no effect at the moment . We're going to focus on rebuilding RHEL Of CentOS Linux Transferred to the CentOS Stream.CentOS Stream Will serve as a Red Hat Enterprise Linux Upstream （ Development ） Branch . in other words , in the future ,Fedora It's still the first upstream , But in RHEL After the release of the new version ,CentOS Stream It's going to be rolling on top of it , And feed the mature update back to RHEL among . 是時候考慮繼續使用centos還是切換到其他的linux發行版本 1. Rocky Linux 可以説是centos的兄弟 The same day Red Hat announced its plans to replace stable CentOS 8 with rolling release CentOS Stream, the original developer of CentOS announced a new project to provide RHEL fork to CentOS users. This new project is called Rocky Linux 2. AlmaLinux OS AlmaLinux (initially known as Project Lenix) is a CentOS alternative backed by the team behind CloudLinux OS 3. Oracle Linux 4. Debian Linux 5. Ubuntu ","link":"https://www.airplanecraft.com/zh/post/centos-8-maintenance-stopped/","section":"post","tags":["centos","linux"],"title":"Centos 8維護已經停止了"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/jwk/","section":"tags","tags":null,"title":"Jwk"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/jws/","section":"tags","tags":null,"title":"Jws"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/jwt/","section":"tags","tags":null,"title":"Jwt"},{"body":"什么是 JWT 一个JWT，应该是如下形式的：\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.\nTJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\nJWT 解决什么问题？ JWT的主要目的是在服务端和客户端之间以安全的方式来转移声明。主要的应用场景如下所示：\n认证 Authentication； 授权 Authorization // 注意这两个单词的区别； 联合识别； 客户端会话（无状态的会话）； 客户端机密。\nJWT 的一些名词解释 JWS：Signed JWT签名过的jwt JWE：Encrypted JWT部分payload经过加密的jwt；目前加密payload的操作不是很普及； JWK：JWT的密钥，也就是我们常说的 scret； JWKset：JWT key set在非对称加密中，需要的是密钥对而非单独的密钥，在后文中会阐释； JWA：当前JWT所用到的密码学算法； nonsecure JWT：当头部的签名算法被设定为none的时候，该JWT是不安全的；因为签名的部分空缺，所有人都可以修改。\nJWT的组成 一个通常你看到的jwt，由以下三部分组成，它们分别是：\nheader：主要声明了JWT的签名算法； payload：主要承载了各种声明并传递明文数据； signture：拥有该部分的JWT被称为JWS，也就是签了名的JWS；没有该部分的JWT被称为nonsecure JWT 也就是不安全的JWT，此时header中声明的签名算法为none。 三个部分用·分割。形如 xxxxx.yyyyy.zzzzz的样式。\nJWT header {\n\u0026quot;typ\u0026quot;: \u0026quot;JWT\u0026quot;,\n\u0026quot;alg\u0026quot;: \u0026quot;none\u0026quot;,\n\u0026quot;jti\u0026quot;: \u0026quot;4f1g23a12aa\u0026quot;\n}\njwt header 的组成\n头通常由两部分组成：令牌的类型，即JWT，以及正在使用的散列算法，例如HMAC SHA256或RSA。\n当然，还有两个可选的部分，一个是jti，也就是JWT ID，代表了正在使用JWT的编号，这个编号在对应服务端应当唯一。当然，jti也可以放在payload中。\n另一个是cty，也就是content type。这个比较少见，当payload为任意数据的时候，这个头无需设置，但是当内容也带有jwt的时候。也就是嵌套JWT的时候，这个值必须设定为jwt。这种情况比较少见。\njwt header 的加密算法\n加密的方式如下：\nbase64UrlEncode(header)\neyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIiwianRpIjoiNGYxZzIzYTEyYWEifQ\nJWT payload {\n\u0026quot;iss\u0026quot;: \u0026quot;http://shaobaobaoer.cn\u0026quot;,\n\u0026quot;aud\u0026quot;: \u0026quot;http://shaobaobaoer.cn/webtest/jwt_auth/\u0026quot;,\n\u0026quot;jti\u0026quot;: \u0026quot;4f1g23a12aa\u0026quot;,\n\u0026quot;iat\u0026quot;: 1534070547,\n\u0026quot;nbf\u0026quot;: 1534070607,\n\u0026quot;exp\u0026quot;: 1534074147,\n\u0026quot;uid\u0026quot;: 1,\n\u0026quot;data\u0026quot;: {\n\u0026quot;uname\u0026quot;: \u0026quot;shaobao\u0026quot;,\n\u0026quot;uEmail\u0026quot;: \u0026quot;shaobaobaoer@126.com\u0026quot;,\n\u0026quot;uID\u0026quot;: \u0026quot;0xA0\u0026quot;,\n\u0026quot;uGroup\u0026quot;: \u0026quot;guest\u0026quot;\n}\n}\njwt payload的组成payload通常由三个部分组成，分别是 Registered Claims ; Public Claims ; Private Claims ;每个声明，都有各自的字段。\nRegistered Claims\niss 【issuer】发布者的url地址 sub 【subject】该JWT所面向的用户，用于处理特定应用，不是常用的字段 aud 【audience】接受者的url地址 exp 【expiration】 该jwt销毁的时间；unix时间戳 nbf 【not before】 该jwt的使用时间不能早于该时间；unix时间戳 iat 【issued at】 该jwt的发布时间；unix 时间戳 jti 【JWT ID】 该jwt的唯一ID编号 Public Claims 这些可以由使用JWT的那些标准化组织根据需要定义，应当参考文档IANA JSON Web Token Registry。\nPrivate Claims 这些是为在同意使用它们的各方之间共享信息而创建的自定义声明，既不是注册声明也不是公开声明。上面的payload中，没有public claims只有private claims。\njwt payload 的加密算法\n加密的方式如下：\nbase64UrlEncode(payload)\neyJpc3MiOiJodHRwOi8vc2hhb2Jhb2Jhb2VyLmNuIiwiYXVkIjoiaHR0cDovL3NoYW9iYW9iYW9lci5jbi93ZWJ0ZXN0L2p3dF9hdXRoLyIsImp0aSI6IjRmMWcyM2ExMmFhIiwiaWF0IjoxNTM0MDcwNTQ3LCJuYmYiOjE1MzQwNzA2MDcsImV4cCI6MTUzNDA3NDE0NywidWlkIjoxLCJkYXRhIjp7InVuYW1lIjoic2hhb2JhbyIsInVFbWFpbCI6InNoYW9iYW9iYW9lckAxMjYuY29tIiwidUlEIjoiMHhBMCIsInVHcm91cCI6Imd1ZXN0In19\n暴露的信息\n所以，在JWT中，不应该在载荷里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID，邮箱等。这个值实际上不是什么敏感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第三方通过Base64解码就能很快地知道你的密码了。\n当然，这也是有解决方案的，那就是加密payload。在之后会说到\nJWS 的概念 JWS 的结构\nJWS ，也就是JWT Signature，其结构就是在之前nonsecure JWT的基础上，在头部声明签名算法，并在最后添加上签名。创建签名，是保证jwt不能被他人随意篡改。\n为了完成签名，除了用到header信息和payload信息外，还需要算法的密钥，也就是secret。当利用非对称加密方法的时候，这里的secret为私钥。\n为了方便后文的展开，我们把JWT的密钥或者密钥对，统一称为JSON Web Key，也就是JWK。\njwt signature 的签名算法\n复制 RSASSA || ECDSA || HMACSHA256(\nbase64UrlEncode(header) + \u0026quot;.\u0026quot; +\nbase64UrlEncode(payload),\nsecret)\nGQPGEpixjPZSZ7CmqXB-KIGNzNl4Y86d3XOaRsfiXmQ\n上面这个是用 HMAC SHA256生成的 到目前为止，jwt的签名算法有三种。\n对称加密HMAC【哈希消息验证码】：HS256/HS384/HS512 非对称加密RSASSA【RSA签名算法】（RS256/RS384/RS512） ECDSA【椭圆曲线数据签名算法】（ES256/ES384/ES512） 最后将签名与之前的两段内容用.连接，就可以得到经过签名的JWT，也就是JWS。\n复制 eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImp0aSI6IjRmMWcyM2ExMmFhIn0.eyJpc3MiOiJodHRwOi8vc2hhb2Jhb2Jhb2VyLmNuIiwiYXVkIjoiaHR0cDovL3NoYW9iYW9iYW9lci5jbi93ZWJ0ZXN0L2p3dF9hdXRoLyIsImp0aSI6IjRmMWcyM2ExMmFhIiwiaWF0IjoxNTM0MDcwNTQ3LCJuYmYiOjE1MzQwNzA2MDcsImV4cCI6MTUzNDA3NDE0NywidWlkIjoxLCJkYXRhIjp7InVuYW1lIjoic2hhb2JhbyIsInVFbWFpbCI6InNoYW9iYW9iYW9lckAxMjYuY29tIiwidUlEIjoiMHhBMCIsInVHcm91cCI6Imd1ZXN0In19.GQPGEpixjPZSZ7CmqXB-KIGNzNl4Y86d3XOaRsfiXmQ 1. 当验证签名的时候，利用公钥或者密钥来解密Sign，和 base64UrlEncode(header) + \u0026quot;.\u0026quot; + base64UrlEncode(payload) 的内容完全一样的时候，表示验证通过。\nJWS 的额外头部声明\n如果对于CA有些概念的话，这些内容会比较好理解一些。为了确保服务器的密钥对可靠有效，同时也方便第三方CA机构来签署JWT而非本机服务器签署JWT，对于JWS的头部，可以有额外的声明，以下声明是可选的，具体取决于JWS的使用方式。如下所示：\njku: 发送JWK的地址；最好用HTTPS来传输 jwk: 就是之前说的JWK kid: jwk的ID编号 x5u: 指向一组X509公共证书的URL x5c: X509证书链 x5t：X509证书的SHA-1指纹 x5t#S256: X509证书的SHA-256指纹 typ: 在原本未加密的JWT的基础上增加了 JOSE 和 JOSE+ JSON。JOSE序列化后文会说及。适用于JOSE标头的对象与此JWT混合的情况。 crit: 字符串数组，包含声明的名称，用作实现定义的扩展，必须由 this-\u0026gt;JWT的解析器处理。不常见。\nA JWT typically looks like this: ","link":"https://www.airplanecraft.com/zh/post/jwt-jwe-jwk-jws/","section":"post","tags":["jwt","token","jwk","jws"],"title":"JWT、JWE、JWS 、JWK 到底是什么"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/token/","section":"tags","tags":null,"title":"Token"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/kafka/","section":"tags","tags":null,"title":"Kafka"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/polygon/","section":"tags","tags":null,"title":"Polygon"},{"body":"本来使用工具或者服务 Pologon 美股数据供应商 Kafka Nettty Centos8.2 架构图 架构说明 Polygon是美股的数据供应商,提供美股tick级别的数据服务 美股开盘数据非常的大，平时可以达到6M/秒的传输速度，也就是说可以达到每秒6万条数据的传输速度 数据的传输是基于internet的传输，所以要保障数据在互联网上的快速传输必须基于长连接来实现，因此polygon提供了websocket服务 我们的app收到polygon websocket推送过来的数据要进行简单的解析和格式转换，然后发送到本地的kafka cluster中间件用来分发数据，给其他的应用来做大数据处理包括flink等大数据中间件 出现的问题 Polygon数据传输出现了频繁的中断1：Slow consumer slow consumer:https://polygon.io/docs/stocks/ws_getting-started 查看了一下polygon的技術文檔: if a client is consuming messages too slowly for too long, Polygon.io's server-side buffer may get too large. If that happens, Polygon.io will terminate the WebSocket connection. You can check your account dashboard to see if a connection was terminated as a slow consumer. If this happens to you consistently, consider subscribing to fewer symbols or channels. 就是你的輸出消費的太慢了，導致polygon server的buffer已經滿了，消費不掉 找出問題 肯定我們消費者太慢出現的問題 屏蔽掉任何發送kafka，直接打印日志就不會出現這個問題，定位到kafka client 發送速度慢的問題 發送慢的原因可能是1：文件句柄數夠不夠?2:cpu和内存的使用率是否太高？3:java jvm的gc是否很慢？4：kafka連接池的數量是否足夠5：kafka客戶端發送是否正確配置批量？ 具體去找問題 1查看進程的當前的連接數 2ls /proc/`jps |awk \u0026#39;{print $1}\u0026#39;`/fd/ |wc -l 由於我們使用prometheus監控系統，發現cpu利用率低於20%，内存低於30%，同時使用jconsole鏈接查看jvm也沒有發現問題 查看jconsole發現大量的kafka客戶端鏈接池出現block等待的情況，從這裏可以發現應該發送kafka的速度太慢導致的 具體解決 1 2spring.kafka.producer.buffer-memory=33554432 3spring.kafka.producer.batch-size=51200 4spring.kafka.producer.properties.linger.ms=200 加大batch-size到50K，linger.ms到200ms ，測試兩天晚上數據，一切正常\n","link":"https://www.airplanecraft.com/zh/post/polygon-websoket-data-transfer-issue/","section":"post","tags":["kafka","polygon","websocket","producer"],"title":"Polygon在websoket的连接串数据的经常中断"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/producer/","section":"tags","tags":null,"title":"Producer"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/websocket/","section":"tags","tags":null,"title":"Websocket"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/block/","section":"tags","tags":null,"title":"Block"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/jvm/","section":"tags","tags":null,"title":"JVM"},{"body":"本来使用工具或者服务 Jconsole Jstack prometheus 架构图 架构说明 This is an internal application (Not cloud) architect,we have big network traffic and lots of application ,we deploy in our own server\nwe have a RabbitMQ server (which our data provider will send HKEX data to this server)\nwe have an Application will consume the messages from MQ\nOur application will process the data and sending to Kafka and Elastic search\nOur Flink (Data process Framework) will process the data (Calculate) TO generate quantitative data to anthoer Kafka topic\nWe have a transaction appliction to consume the KAfka Topic data to trade equities or\tderivatives\nIssue 我们看到我们交易程序没有下任何单，我们认为我们程序出现了信号，但是交易程序并没有下单记录，也就是说信号没有出现，我们flink并没有计算出信号 Diagnose 由于我已经在各个服务安装了nodeexporter，把数据集中发送到prometheus上,所以我们用prometheus来监控各个主机内存网络硬盘cpu等状态,没有发现任何问题 rabbitmq每秒接受到45M的数据，经过计算后传输出去的数据大概是40M/s。\n我排查了数据供应商发送的rabbitmq的消息，新创建了一个测试queue，绑定了trade和quote的数据，检查timestamp发现并没有出现数据延迟\n排查我们的kafka的MQ，发现我们加工完数据后，生在kafka里面后延迟了几十秒，多的长达几十分钟！！！\n所以必须是我们 application处理数据的时候出了问题，检查app server ,系统负载，disc io ，内存，cpu，文件句柄数，都在正常范围内\n检查JVM，用jstack dump出堆栈数据，发现一堆线程处于waiting状态，32核cpu总体利用率很低，跟踪类，发现kafka很多org.springframework.kafka.kafkalistenerendpointcontainer blocked 这肯定写入kafka出现了问题，然后各种优化调试都不起作用！\n绝望的时候检查了网络，突然发现从application ping到kafka需要100ms！从其他服务器ping到application都需要100ms，也就是延迟由于网络的原因导致线程池暴涨！\n经过检查发现application这台服务器所在交换机出现了故障，换了交换机之后，一切恢复正常，单次kafka的发送1ms以下\nSummary 在应用中缺乏网络可靠性的检测工具 如果不是使用云平台的话，很多硬件的监控完全需要团队自己搭建，这样的成本会提高很多，如果在云平台的话，他们的硬件的availability都是很高的，这样的问题不会发生 ","link":"https://www.airplanecraft.com/zh/post/application-network-issue-caused-thread-block/","section":"post","tags":["JVM","block"],"title":"交换机故障导致线程阻塞"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/privatelink/","section":"tags","tags":null,"title":"Privatelink"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/vpc/","section":"tags","tags":null,"title":"Vpc"},{"body":"本来使用工具或者服务 Alicloud vpc SLB PrivateLink endpoit zone and service ECS 架构图 架构说明 对于两个网络（VPC-A，VPC-B）的ECS提供的服务，要是A访问B，可以提供以下方案\nB通过EIP或者IP或者绑定SLB，通过SLB的IP把B的服务暴露在公网上 A网络和B网络互联 通过privatelink来单向向让A网络的访问B网络的服务 分析上面优缺点\n安全性不好，把服务暴露在公网 A和B网络直接互联创建路由成本太高，第二就是可能会造成网络冲突 通过privatelink私有网络连接成本低廉，单向的内网服务，不改变各自的网络配置 Privatelink 如何创建privatelink服务\nprivatelind endpoint service：需要关联一个SLB，此slb必须支持privatelink的SLB，slb后面就是ECS或者其他的rds等都可以\nprivatelink endpoint 创建的是时候需要跟endpoint service 连接 一旦创建并且链接成功，那么privatelink就可以生效了\nprivatelink endpoint 有一个DNS地址，我们可以通过地址直接访问，此地址是aliyun内网地址\n","link":"https://www.airplanecraft.com/zh/post/alicloud_privatelink/","section":"post","tags":["vpc","privatelink"],"title":"阿里云架构-使用privatelink让不同的vpc的服务可以访问"},{"body":"本文简介 我們跟數據供應商之間數據傳輸一直存在很多的問題，我們的網絡經過測速后非常的快，供應商也反復說他們的網速也非常快，那麽問題來了?既然大家都快，是不是在某個路由環節之間出現了問題呢? iperf 簡介 iperf是一种命令行工具，用于通过测量服务器之間可以处理的最大网络吞吐量来诊断网络速度问题。 iperf信息 iperf版本： iperf 3.1.3 官网地址： https://iperf.fr 安裝和運行 server\n1 2rpm -ivh https://iperf.fr/download/fedora/iperf3-3.1.3-1.fc24.x86_64.rpm 3iperf3 -s client\n1rpm -ivh https://iperf.fr/download/fedora/iperf3-3.1.3-1.fc24.x86_64.rpm 2iperf3 -c serverip -p 5201 運行結果 1[root@PC-231 ~]# iperf3 -c 172.16.10.101 -p 5201 2Connecting to host 172.16.10.101, port 5201 3[ 4] local 192.168.25.231 port 59398 connected to 172.16.10.101 port 5201 4[ ID] Interval Transfer Bandwidth Retr Cwnd 5[ 4] 0.00-1.00 sec 110 MBytes 926 Mbits/sec 80 175 KBytes 6[ 4] 1.00-2.00 sec 110 MBytes 920 Mbits/sec 65 223 KBytes 7[ 4] 2.00-3.00 sec 110 MBytes 920 Mbits/sec 65 240 KBytes 8[ 4] 3.00-4.00 sec 110 MBytes 919 Mbits/sec 80 211 KBytes 9[ 4] 4.00-5.00 sec 110 MBytes 920 Mbits/sec 65 225 KBytes 10[ 4] 5.00-6.00 sec 109 MBytes 918 Mbits/sec 78 206 KBytes 11[ 4] 6.00-7.00 sec 109 MBytes 917 Mbits/sec 68 236 KBytes 12[ 4] 7.00-8.00 sec 109 MBytes 918 Mbits/sec 84 206 KBytes 13[ 4] 8.00-9.00 sec 110 MBytes 920 Mbits/sec 65 242 KBytes 14[ 4] 9.00-10.00 sec 109 MBytes 916 Mbits/sec 88 211 KBytes 15- - - - - - - - - - - - - - - - - - - - - - - - - 16[ ID] Interval Transfer Bandwidth Retr 17[ 4] 0.00-10.00 sec 1.07 GBytes 919 Mbits/sec 738 sender 18[ 4] 0.00-10.00 sec 1.07 GBytes 919 Mbits/sec receive 結論 數據供應商宣稱我們的帶寬不夠，實際從他們哪裏測試到我們這裏，每秒穩定在大概70M/s的傳輸速度，所以我們的帶寬是足夠的，問題是他們自己的程序出現了問題，對IO模型的處理遠遠不夠造成了阻塞 ","link":"https://www.airplanecraft.com/zh/post/point-to-point-network-transfer-speed-test/","section":"post","tags":["linux"],"title":"網絡服務器點對點的網速測試"},{"body":"What is the AWS CDK? The AWS Cloud Development Kit (CDK) ,a framework for defining cloud infrastructure in code and provisioning it through AWS CloudFormation.\nCDK stack How does CDK work Build with high-level constructs that automatically provide sensible, secure defaults for your AWS resources, defining more infrastructure with less code. Use programming idioms like parameters, conditionals, loops, composition, and inheritance to model your system design from building blocks provided by AWS and others. Put your infrastructure, application code, and configuration all in one place, ensuring that at every milestone you have a complete, cloud-deployable system. Employ software engineering practices such as code reviews, unit tests, and source control to make your infrastructure more robust. Connect your AWS resources together (even across stacks) and grant permissions using simple, intent-oriented APIs. Import existing AWS CloudFormation templates to give your resources a CDK API. Use the power of AWS CloudFormation to perform infrastructure deployments predictably and repeatedly, with rollback on error. Easily share infrastructure design patterns among teams within your organization or even with the public. What does CDK benefit The AWS CDK supports TypeScript, JavaScript, Python, Java, C#/.Net, and (in developer preview) Go. Developers can use one of these supported programming languages to define reusable cloud components known as Constructs. You compose these together into Stacks and Apps. CDK提供了多种开发语言的支持\nCDK提供了大量的Best Practice的sample,并且都是可以运行和部署的\nCDK对开发者非常的友好，他是通过编程的方式去管理资源，而terrform和cloudformation是通过声明的方式json或者yaml格式,声明式缺点就是不够灵活\nCDK 可以写更少的code,cloudformation和terraform非常繁琐的配置\nOne Best practise form AWS https://github.com/aws-samples/amazon-msk-java-app-cdk 实例解析 这个示例的架构图 具体代码结构\n用CDK创建VPC,Kafka,kafka topic ,lambda producer,Fragate consumer(spring boot docker),DynamoDB 本示例采用CDK的typescript，所以要安装npm,建议使用java8以上，我使用的ec2 yum 安装的openjdk17 要提前安装docker和maven,我的docker Docker version 20.10.7,maven：apache-maven-3.8.4，因为用到fargate所以会创建docker容器以及用maven 编译java 代码，打工docker 容易给fargate使用 要提前初始化aws configure 配置以及cdk 初始化配置 本示例很容易运行成功，代码也非常简单，kafka的producer用typescript写的lambda服务,consumer是spring boot，所以devops代码都是typescript，代码非常的简洁，如果使用terraform的写这些devops至少需要3-4倍的代码 具体部署安装不做赘述，readme文档已经包含\n","link":"https://www.airplanecraft.com/zh/post/aws-cdk/","section":"post","tags":["aws","cdk"],"title":"aws cdk introduction"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/cloud/","section":"tags","tags":null,"title":"Cloud"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/datacenter/","section":"tags","tags":null,"title":"Datacenter"},{"body":"本文简介 本来主要介绍云和本地的数据中心的对比，主要用阿里云来对比，作为aws和alicloud的认证工程师，我对云上的和自有数据中心架构系统做个详细的对比，本文，仅仅用alicloud 本系统简介 本系统主要是做美股和港股的数据处理，美股数据来源是polygon（基于websocket数据推送和restful查询api）,港股的数据来源是港交所（UDP广播）\n本系统功能：接收美股和港股的数据，并作本地的消息存储，用消息中间件来存储交易所数据，然用以一部分数据用来做大数据实时计算，一部数据用来做持久化的存储\n本系统的架构图 本系統本地使用硬件 軟件 狀態 服務器 數量 存儲 數量 Kafka cluster centos8.2 5 ssd 4 raid5 Elatic search cluster centos8.2 3 ssd 4 raid5 Flink cluster centos8.2 3 ssd 4 raid5 Polygon subscriber single centos8.2 1 ssd 4 raid5 APP single centos8.2 1 ssd 4 raid5 本地數據中心存在的主要問題 硬件的問題 1. 硬盤如果寫滿，可擴展性非常的差，或者説磁盤出現損壞，需要更新磁盤都會有數據丟失的風險，并且服務會中斷 2. 網絡設備沒有redundency 3. 如果内存不夠用都需要定制内存，然後安裝，需要消耗大量的人力物力 軟件的問題 1. centos的系統的優化，包括swap,硬盤的分區，文件句柄數等等 2. kafka flink elasticsearch 等軟件的優化需要非常專業的知識 3. 如果要遷移kafka 或者es裏面的數據只能停止服務，然後進行數據的遷移 如果選擇阿里雲或者aws（這裏拿阿里雲來説） 1. 定制vpc網絡，阿里雲網絡外網基於bgp的，vpc本身就保障HA，redundency. 2. ECS的磁盤是scalable的，多大都是可以彈性擴展 3. network bandwith 可以 custome，多大的可以 4. ecs 的 cpu+mem 可以隨時升級 5. 不需要搭建kafka es 和flink 軟件cluster平臺，阿里雲有相關的服務，都是優化過的paas，性能非常的高，還可以按需隨時升級 6 .數據不用擔心丟失和遷移困難 總結 1. 作爲云架構師，很不幸的是我目前既要寫大量的code，還要管理綫下30多台服務器，花費了大量的時間去處理很多問題 2. 下一步要遷移服務到aws或者阿里雲上面 ","link":"https://www.airplanecraft.com/zh/post/local-datacenter-vs-cloud/","section":"post","tags":["Datacenter","cloud"],"title":"本地数据中心和云的对比"},{"body":"关于我 我是云端 , B站、知乎、github深度用户,aws云實踐者. 个人认证 AWS Certified Devops Engineer Professional 2022 AWS系统架构师助理认证(aws solution architect association) 2019 AWS系统架构师专业认证(aws solution architect professional) 2019 红帽Linux认证工程师(redhat certified engineer) 2013 阿里云云计算工程师ACP认证(Alibaba Cloud Certified Professional ) 2021-12-25 Kubernetes CKA 正在學習 最近工作 FPS project Architect Python Scripting Devops ","link":"https://www.airplanecraft.com/zh/about/","section":"","tags":null,"title":"关于我"},{"body":"本文使用工具或者服务 Java 8 https://archive.apache.org/dist/kafka/3.0.0/kafka_2.13-3.0.0.tgz https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz Centos8.2 Zookeeper 簡介 ZooKeeper是一个分布式协调服务，它的主要作用是为分布式系统提供一致性服务，提供的功能包括：配置维护、命名服务、分布式同步、组服务等。Kafka的运行依赖ZooKeeper。 Broker注册 Topic注册 生产者负载均衡 消费者负载均衡 消费者注册 Kafka 簡介 Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者在网站中的所有动作流数据。 Kafka 是一种高吞吐量的分布式发布订阅消息系统，有如下特性： 通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。 高吞吐量 即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。 支持通过Kafka服务器和消费机集群来分区消息。 zookeeper 與kafka之間的關係 ZooKeeper用于分布式系统的协调，Kafka使用ZooKeeper也是基于相同的原因。ZooKeeper主要用来协调Kafka的各个broker，不仅可以实现broker的负载均衡，而且当增加了broker或者某个broker故障了，ZooKeeper将会通知生产者和消费者，这样可以保证整个系统正常运转。 安裝zooker和kafka 之前首先要做系統的優化和配置 文件句柄數的調整 oracle Jre8 安裝 磁盤的分區和挂載點必須滿足kafka大數量的存儲xfs分區 關閉selinux 防火墻暫時關閉(後面看可以統一規劃端口) 創建非root的kafka管理用戶並添加sudoer權限 注意事項 kafka是一個分佈式的消息系統，我們會臨時存儲消息，如果存儲消息的時間長，那麽需要大空間，所以分區的時候已經要注意，就是安裝kafka的時候存儲一定要挂載到大的硬盤空間上 Zookeeper 配置 1# The number of milliseconds of each tick 2tickTime=2000 3# The number of ticks that the initial 4# synchronization phase can take 5initLimit=10 6# The number of ticks that can pass between 7# sending a request and getting an acknowledgement 8syncLimit=5 9# the directory where the snapshot is stored. 10# do not use /tmp for storage, /tmp here is just 11# example sakes. 12dataDir=/opt/conf 13# /opt/conf/myid #myid文件，里面的内容为数字，用于标识主机，如果这个文件没有的话，zookeeper无法启动 14# the port at which the clients will connect 15clientPort=2181 16# the maximum number of client connections. 17# increase this if you need to handle more clients 18#maxClientCnxns=60 19# 20# Be sure to read the maintenance section of the 21# administrator guide before turning on autopurge. 22# 23# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance 24# 25# The number of snapshots to retain in dataDir 26#autopurge.snapRetainCount=3 27# Purge task interval in hours 28# Set to \u0026#34;0\u0026#34; to disable auto purge feature 29#autopurge.purgeInterval=1 30 31## Metrics Providers 32# 33# https://prometheus.io Metrics Exporter 34#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider 35#metricsProvider.httpPort=7000 36#metricsProvider.exportJvmInfo=true 37server.1=192.168.25.231:12888:13888 38server.2=192.168.25.232:12888:13888 39server.3=192.168.25.233:12888:13888 40server.4=192.168.25.234:12888:13888 41server.5=192.168.25.235:12888:13888 42 43#配置参数说明： 44tickTime:客户端与服务器或者服务器与服务器之间每个tickTime时间就会发送一次心跳。通过心跳不仅能够用来监听机器的工作状态，还可以通过心跳来控制Flower跟Leader的通信时间，默认2秒 45initLimit：集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）。 46syncLimit：集群中flower服务器（F）跟leader（L）服务器之间的请求和答应最多能容忍的心跳数。 47dataDir：该属性对应的目录是用来存放myid信息跟一些版本，日志，跟服务器唯一的ID信息等。 48clientPort：客户端连接的接口，客户端连接zookeeper服务器的端口，zookeeper会监听这个端口，接收客户端的请求访问！这个端口默认是2181。 49service.N=YYY:A:B 50N：代表服务器编号（也就是myid里面的值） 51YYY：服务器地址 52A：表示 Flower 跟 Leader的通信端口，简称服务端内部通信的端口（默认2888),我们使用12888 53B：表示 是选举端口（默认是3888),我们使用 Kafka的配置 1 2# Licensed to the Apache Software Foundation (ASF) under one or more 3# contributor license agreements. See the NOTICE file distributed with 4# this work for additional information regarding copyright ownership. 5# The ASF licenses this file to You under the Apache License, Version 2.0 6# (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with 7# the License. You may obtain a copy of the License at 8# 9# http://www.apache.org/licenses/LICENSE-2.0 10# 11# Unless required by applicable law or agreed to in writing, software 12# distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, 13# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 14# See the License for the specific language governing permissions and 15# limitations under the License. 16 17# see kafka.server.KafkaConfig for additional details and defaults 18 19############################# Server Basics ############################# 20 21# The id of the broker. This must be set to a unique integer for each broker. 22broker.id=1 23 24############################# Socket Server Settings ############################# 25 26# The address the socket server listens on. It will get the value returned from 27# java.net.InetAddress.getCanonicalHostName() if not configured. 28# FORMAT: 29# listeners = listener_name://host_name:port 30# EXAMPLE: 31# listeners = PLAINTEXT://your.host.name:9092 32listeners=PLAINTEXT://192.168.25.231:9092 33 34# Hostname and port the broker will advertise to producers and consumers. If not set, 35# it uses the value for \u0026#34;listeners\u0026#34; if configured. Otherwise, it will use the value 36# returned from java.net.InetAddress.getCanonicalHostName(). 37#advertised.listeners=PLAINTEXT://your.host.name:9092 38 39# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details 40#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL 41 42# The number of threads that the server uses for receiving requests from the network and sending responses to the network 43num.network.threads=3 44 45# The number of threads that the server uses for processing requests, which may include disk I/O 46num.io.threads=8 47 48# The send buffer (SO_SNDBUF) used by the socket server 49socket.send.buffer.bytes=102400 50 51# The receive buffer (SO_RCVBUF) used by the socket server 52socket.receive.buffer.bytes=102400 53 54# The maximum size of a request that the socket server will accept (protection against OOM) 55socket.request.max.bytes=104857600 56 57 58############################# Log Basics ############################# 59 60# A comma separated list of directories under which to store log files 61log.dirs=/kafka-data/kafka-logs 62 63# The default number of log partitions per topic. More partitions allow greater 64# parallelism for consumption, but this will also result in more files across 65# the brokers. 66num.partitions=1 67 68# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown. 69# This value is recommended to be increased for installations with data dirs located in RAID array. 70num.recovery.threads.per.data.dir=1 71 72############################# Internal Topic Settings ############################# 73# The replication factor for the group metadata internal topics \u0026#34;__consumer_offsets\u0026#34; and \u0026#34;__transaction_state\u0026#34; 74# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3. 75offsets.topic.replication.factor=1 76transaction.state.log.replication.factor=1 77transaction.state.log.min.isr=1 78 79############################# Log Flush Policy ############################# 80 81# Messages are immediately written to the filesystem but by default we only fsync() to sync 82# the OS cache lazily. The following configurations control the flush of data to disk. 83# There are a few important trade-offs here: 84# 1. Durability: Unflushed data may be lost if you are not using replication. 85# 2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush. 86# 3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks. 87# The settings below allow one to configure the flush policy to flush data after a period of time or 88# every N messages (or both). This can be done globally and overridden on a per-topic basis. 89 90# The number of messages to accept before forcing a flush of data to disk 91#log.flush.interval.messages=10000 92 93# The maximum amount of time a message can sit in a log before we force a flush 94#log.flush.interval.ms=1000 95 96############################# Log Retention Policy ############################# 97 98# The following configurations control the disposal of log segments. The policy can 99# be set to delete segments after a period of time, or after a given size has accumulated. 100# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens 101# from the end of the log. 102 103# The minimum age of a log file to be eligible for deletion due to age 104log.retention.hours=168 105 106# A size-based retention policy for logs. Segments are pruned from the log unless the remaining 107# segments drop below log.retention.bytes. Functions independently of log.retention.hours. 108#log.retention.bytes=1073741824 109 110# The maximum size of a log segment file. When this size is reached a new log segment will be created. 111log.segment.bytes=1073741824 112 113# The interval at which log segments are checked to see if they can be deleted according 114# to the retention policies 115log.retention.check.interval.ms=300000 116 117############################# Zookeeper ############################# 118 119# Zookeeper connection string (see zookeeper docs for details). 120# This is a comma separated host:port pairs, each corresponding to a zk 121# server. e.g. \u0026#34;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002\u0026#34;. 122# You can also append an optional chroot string to the urls to specify the 123# root directory for all kafka znodes. 124zookeeper.connect=192.168.25.231:2181,192.168.25.232:2181,192.168.25.233:2181,192.168.25.234:2181,192.168.25.235:2181 125 126# Timeout in ms for connecting to zookeeper 127zookeeper.connection.timeout.ms=18000 128 129 130 131############################# Group Coordinator Settings ############################# 132 133# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance. 134# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms. 135# The default value for this is 3 seconds. 136# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing. 137# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup. 138group.initial.rebalance.delay.ms=0 安装kafka的ui 监控 1docker run -p 8080:8080 \\ 2\t-e KAFKA_CLUSTERS_0_NAME=local \\ 3\t-e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=192.168.25.231:9092,192.168.25.232:9092,192.168.25.231:9092,192.168.25.233:9092,192.168.25.234:9092,192.168.25.235:9092 \\ 4\t-d provectuslabs/kafka-ui:latest 访问http://ip:8080/ 就可以看到kafka管理页面 ","link":"https://www.airplanecraft.com/zh/post/kafka-cluster-setup/","section":"post","tags":["kafka","zookeeper"],"title":"kafka cluster的搭建"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/zookeeper/","section":"tags","tags":null,"title":"Zookeeper"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/ansible/","section":"tags","tags":null,"title":"Ansible"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/terraform/","section":"tags","tags":null,"title":"Terraform"},{"body":"使用terraform创建ecs用ansible完成ecs的provision 本文目标就是是用terraform创建ecs包括security group,disk,vpc,vswtich,然后用ansible来初始化和配置创建好的ecs 本文只是创建了一个单机ecs，后续的文章会有load balance出现 terrorm 创建ecs 什么是terraform\nterraform是云工具，也就是针对云平台的 terraform是在云平台上管理资源的，就是一个云资源编排工具 terraform目标是\u0026quot;Write, Plan, and create Infrastructure as Code\u0026quot;, 基础架构即代码。具体的说就是可以用代码来管理维护 IT 资源，把之前需要手动操作的一部分任务通过程序来自动化的完成，这样的做的结果非常明显：高效、不易出错。 Terraform 核心功能\n基础架构即代码(Infrastructure as Code) 执行计划(Execution Plans) 资源图(Resource Graph) 自动化变更(Change Automation) terraform安装\n下载https://www.terraform.io/downloads.html 设置环境变量（省略） 创建terraform 配置文件\nmain.tf 1 provider \u0026#34;alicloud\u0026#34; { 2 access_key = \u0026#34;xxx\u0026#34; 3 secret_key = \u0026#34;xxx\u0026#34; 4 region = \u0026#34;ap-southeast-1\u0026#34; 5 #version = \u0026#34;~\u0026gt; 1.5.0\u0026#34; 6 } 7 data \u0026#34;alicloud_instance_types\u0026#34; \u0026#34;instance_type\u0026#34; { 8 instance_type_family = \u0026#34;ecs.n1\u0026#34; 9 cpu_core_count = \u0026#34;1\u0026#34; 10 memory_size = \u0026#34;2\u0026#34; 11 } 12 13 resource \u0026#34;alicloud_security_group\u0026#34; \u0026#34;group\u0026#34; { 14 name = var.short_name 15 description = \u0026#34;New security group\u0026#34; 16 vpc_id = alicloud_vpc.vpc.id 17 } 18 19 resource \u0026#34;alicloud_key_pair\u0026#34; \u0026#34;alicloud_key_pair\u0026#34; { 20 key_name = \u0026#34;terraform_test\u0026#34; 21 public_key = \u0026#34;${file(var.ssh_key_public)}\u0026#34; 22 } 23 resource \u0026#34;alicloud_security_group_rule\u0026#34; \u0026#34;allow_http_80\u0026#34; { 24 type = \u0026#34;ingress\u0026#34; 25 ip_protocol = \u0026#34;tcp\u0026#34; 26 nic_type = var.nic_type 27 policy = \u0026#34;accept\u0026#34; 28 port_range = \u0026#34;80/80\u0026#34; 29 priority = 1 30 security_group_id = alicloud_security_group.group.id 31 cidr_ip = \u0026#34;0.0.0.0/0\u0026#34; 32 } 33 34 resource \u0026#34;alicloud_security_group_rule\u0026#34; \u0026#34;allow_https_443\u0026#34; { 35 type = \u0026#34;ingress\u0026#34; 36 ip_protocol = \u0026#34;tcp\u0026#34; 37 nic_type = var.nic_type 38 policy = \u0026#34;accept\u0026#34; 39 port_range = \u0026#34;443/443\u0026#34; 40 priority = 1 41 security_group_id = alicloud_security_group.group.id 42 cidr_ip = \u0026#34;0.0.0.0/0\u0026#34; 43 } 44 resource \u0026#34;alicloud_security_group_rule\u0026#34; \u0026#34;allow_ssh_22\u0026#34; { 45 type = \u0026#34;ingress\u0026#34; 46 ip_protocol = \u0026#34;tcp\u0026#34; 47 nic_type = var.nic_type 48 policy = \u0026#34;accept\u0026#34; 49 port_range = \u0026#34;22/22\u0026#34; 50 priority = 1 51 security_group_id = alicloud_security_group.group.id 52 cidr_ip = \u0026#34;0.0.0.0/0\u0026#34; 53 } 54 55 56 resource \u0026#34;alicloud_disk\u0026#34; \u0026#34;disk\u0026#34; { 57 availability_zone = alicloud_instance.instance[0].availability_zone 58 category = var.disk_category 59 size = var.disk_size 60 count = var.number 61 } 62 63 resource \u0026#34;alicloud_vpc\u0026#34; \u0026#34;vpc\u0026#34; { 64 cidr_block = \u0026#34;172.16.0.0/12\u0026#34; 65 } 66 67 data \u0026#34;alicloud_zones\u0026#34; \u0026#34;zones_ds\u0026#34; { 68 available_instance_type = data.alicloud_instance_types.instance_type.instance_types[0].id 69 } 70 71 resource \u0026#34;alicloud_vswitch\u0026#34; \u0026#34;vswitch\u0026#34; { 72 vpc_id = alicloud_vpc.vpc.id 73 cidr_block = \u0026#34;172.16.0.0/24\u0026#34; 74 availability_zone = data.alicloud_zones.zones_ds.zones[0].id 75 } 76 resource \u0026#34;alicloud_instance\u0026#34; \u0026#34;instance\u0026#34; { 77 instance_name = \u0026#34;${var.short_name}-${var.role}-${format(var.count_format, count.index + 1)}\u0026#34; 78 host_name = \u0026#34;${var.short_name}-${var.role}-${format(var.count_format, count.index + 1)}\u0026#34; 79 image_id = var.image_id 80 instance_type = data.alicloud_instance_types.instance_type.instance_types[0].id 81 count = var.number 82 security_groups = alicloud_security_group.group.*.id 83 vswitch_id = alicloud_vswitch.vswitch.id 84 85 internet_charge_type = var.internet_charge_type 86 internet_max_bandwidth_out = var.internet_max_bandwidth_out 87 88 password = var.ecs_password 89 90 instance_charge_type = \u0026#34;PostPaid\u0026#34; 91 system_disk_category = \u0026#34;cloud_efficiency\u0026#34; 92 security_enhancement_strategy = \u0026#34;Deactive\u0026#34; 93 key_name = alicloud_key_pair.alicloud_key_pair.key_name 94 data_disks { 95 name = \u0026#34;disk1\u0026#34; 96 size = \u0026#34;20\u0026#34; 97 category = \u0026#34;cloud_efficiency\u0026#34; 98 description = \u0026#34;disk1\u0026#34; 99 } 100 tags = { 101 role = var.role 102 dc = var.datacenter 103 } 104 105 resource \u0026#34;alicloud_disk_attachment\u0026#34; \u0026#34;instance-attachment\u0026#34; { 106 count = var.number 107 disk_id = alicloud_disk.disk.*.id[count.index] 108 instance_id = alicloud_instance.instance.*.id[count.index] 109 } outputs.tf 1 output \u0026#34;hostname_list\u0026#34; { 2 value = join(\u0026#34;,\u0026#34;, alicloud_instance.instance.*.instance_name) 3 } 4 5 output \u0026#34;ecs_ids\u0026#34; { 6 value = join(\u0026#34;,\u0026#34;, alicloud_instance.instance.*.id) 7 } 8 9 output \u0026#34;ecs_public_ip\u0026#34; { 10 value = join(\u0026#34;,\u0026#34;, alicloud_instance.instance.*.public_ip) 11 } 12 13 output \u0026#34;tags\u0026#34; { 14 value = jsonencode(alicloud_instance.instance.*.tags) 15 } variables.tf 1 variable \u0026#34;number\u0026#34; { 2 default = \u0026#34;1\u0026#34; 3 } 4 5 variable \u0026#34;count_format\u0026#34; { 6 default = \u0026#34;%02d\u0026#34; 7 } 8 9 variable \u0026#34;image_id\u0026#34; { 10 default = \u0026#34;ubuntu_18_04_64_20G_alibase_20190624.vhd\u0026#34; 11 } 12 13 variable \u0026#34;role\u0026#34; { 14 default = \u0026#34;work\u0026#34; 15 } 16 17 variable \u0026#34;datacenter\u0026#34; { 18 default = \u0026#34;beijing\u0026#34; 19 } 20 21 variable \u0026#34;short_name\u0026#34; { 22 default = \u0026#34;hi\u0026#34; 23 } 24 25 variable \u0026#34;ecs_type\u0026#34; { 26 default = \u0026#34;ecs.n4.small\u0026#34; 27 } 28 29 variable \u0026#34;ecs_password\u0026#34; { 30 default = \u0026#34;Test12345\u0026#34; 31 } 32 33 variable \u0026#34;internet_charge_type\u0026#34; { 34 default = \u0026#34;PayByTraffic\u0026#34; 35 } 36 37 variable \u0026#34;internet_max_bandwidth_out\u0026#34; { 38 default = 5 39 } 40 41 variable \u0026#34;disk_category\u0026#34; { 42 default = \u0026#34;cloud_efficiency\u0026#34; 43 } 44 45 variable \u0026#34;disk_size\u0026#34; { 46 default = \u0026#34;40\u0026#34; 47 } 48 49 variable \u0026#34;nic_type\u0026#34; { 50 default = \u0026#34;intranet\u0026#34; 51 } 52 variable \u0026#34;ssh_key_public\u0026#34; { 53 default = \u0026#34;~/.ssh/id_rsa.pub\u0026#34; 54 description = \u0026#34;Path to the SSH public key for accessing cloud instances. Used for creating AWS keypair.\u0026#34; 55 } 56 57 variable \u0026#34;ssh_key_private\u0026#34; { 58 default = \u0026#34;~/.ssh/id_rsa\u0026#34; 59 description = \u0026#34;Path to the SSH public key for accessing cloud instances. Used for creating AWS keypair.\u0026#34; 60 } versions.tf 1 terraform { 2 required_version = \u0026#34;\u0026gt;= 0.12\u0026#34; 3 } 用ansible部署docker容器 ansible介绍\nAnsible是一个开源配置管理工具，可以使用它来自动化任务，部署应用程序实现IT基础架构。Ansible可以用来自动化日常任务，比如，服务器的初始化配置、安全基线配置、更新和打补丁系统，安装软件包等。Ansible架构相对比较简单，仅需通过SSH连接客户机执行任务即可 ansible安装\n1 yum install ansible -y 更新配置\n1 vi /etc/ansible/ansible.cfg 2 3 host_key_checking = False 创建ansible playbook 模板代码\n1 --- 2 - hosts: docker 3 remote_user: root 4 become: yes 5 become_method: sudo 6 vars: 7 container_name: \u0026#34;nginx\u0026#34; 8 container_image: \u0026#34;nginx:latest\u0026#34; 9 registry_url: \u0026#34;docker.io/library\u0026#34; 10 working_dir: \u0026#34;/data/nginx\u0026#34; 11 12 tasks: 13 - name: remove container 14 docker_container: 15 name: \u0026#34;{{ container_name }}\u0026#34; 16 state: absent 17 timeout: 600 18 - name: create working_dir directory 19 file: 20 path: \u0026#34;{{ item }}\u0026#34; 21 state: directory 22 with_items: 23 - \u0026#34;{{ working_dir }}\u0026#34; 24 25 - name: create container 26 docker_container: 27 name: \u0026#34;{{ container_name }}\u0026#34; 28 image: \u0026#34;{{registry_url}}/{{ container_image }}\u0026#34; 29 privileged: yes 30 timeout: 600 31 restart_policy: always 32 ports: 33 - \u0026#34;80:80\u0026#34; 在terraform的ecs的instance 中使用provisoner 来支持ansible\n1 provisioner \u0026#34;remote-exec\u0026#34; { 2 # Install Python for Ansible 3 inline = [\u0026#34;apt update;apt install python -y;rm -rf /usr/bin/python;apt install python3-pip -y;rm -rf /usr/local/bin/pip;ln -s /usr/bin/pip3 /usr/local/bin/pip;pip install docker;apt install docker.io -y;\u0026#34;] 4 connection { 5 host = \u0026#34;${self.public_ip}\u0026#34; 6 type = \u0026#34;ssh\u0026#34; 7 user = \u0026#34;root\u0026#34; 8 private_key = \u0026#34;${file(var.ssh_key_private)}\u0026#34; 9 } 10 } 11 provisioner \u0026#34;local-exec\u0026#34; { 12 command = \u0026#34;echo \u0026#39;[docker]\u0026#39; \u0026gt; ./myinventory;echo \u0026#39;${self.public_ip}\u0026#39; \u0026gt;\u0026gt; ./myinventory\u0026#34; 13 } 14 provisioner \u0026#34;local-exec\u0026#34; { 15 command = \u0026#34;ansible-playbook -u root -i myinventory --private-key ${var.ssh_key_private} -T 300 provision.yml\u0026#34; 16 } 执行 terraform 1 terraform int 2 terraform plan 3 terraform apply ","link":"https://www.airplanecraft.com/zh/post/alicloud-terraform-create-ecs-ansible-provision/","section":"post","tags":["ansible","terraform"],"title":"使用terraform创建阿里ecs用ansible完成主机配置"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/docker/","section":"tags","tags":null,"title":"Docker"},{"body":"Install ansible on server Ansible是一个开源配置管理工具，可以使用它来自动化任务，部署应用程序实现IT基础架构。Ansible可以用来自动化日常任务，比如，服务器的初始化配置、安全基线配置、更新和打补丁系统，安装软件包等 Ansible包括控制节点（Control node）也叫主机，受控节点（Managed nodes）也叫客户机,只在控制节点安装就好了 ansible 优点 只需要在主机上安装ansible软件，客户机不需要安装 通讯协议SSH协议和SFTP 可并行执行程序，默认情况下，forks值为5，可以按需，在配置文件中增大该值 ansible(centos)安装和配置 yum install ansible\n为了使Ansible与客户端通信，需要使用用户帐户配置管理机和客户机。为了方便快捷安全，一般会配置证书方式连接客户机\n1ssh-keygen 2ssh-copy-id ansible@node ip 使用ad-hoc 在客户执行命令，相当于命令行 /etc/ansible/hosts,最好谨慎使用hosts配置，安全问题需要解决\n1[docker] 2 3 192.168.25.173 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=\u0026#34;xxx\u0026#34; 执行以下ping,命令里面的docker对应的上面文件的docker\n1ansible docker -m ping 使用ad-hoc命令管理软件包,安装\n1ansible docker -m yum -a \u0026#34;name=docker state=present\u0026#34; -b 使用ad-hoc命令管理软件包,设置默认启动\n1ansible docker -b -m service -a \u0026#34;name=docker enabled=yes\u0026#34; 使用ad-hoc命令管理软件包,启动\n1ansible docker -b -m service -a \u0026#34;name=httpd state=started\u0026#34; 使用ansible-playbook 部署docker test-ansile.yml 文件内容\n1 --- 2 - hosts: docker 3 remote_user: docker 4 become: yes 5 become_method: sudo 6 vars: 7 container_name: \u0026#34;robotic\u0026#34; 8 container_image: \u0026#34;test-prod:{{container_version}}\u0026#34; 9 registry_url: \u0026#34;ecr.test.amazonaws.com\u0026#34; 10 working_dir: \u0026#34;/data/docker_test\u0026#34; 11 12 tasks: 13 - name: remove container 14 docker_container: 15 name: \u0026#34;{{ container_name }}\u0026#34; 16 state: absent 17 18 - name: install aws cli 19 shell: | 20 yum install awscli -y 21 - name: rm config 22 shell: | 23 rm -rf /root/.aws;mkdir /root/.aws 24 - name: create config for aws user 25 shell: | 26 echo \u0026#34;[profile ecr]\u0026#34; \u0026gt;\u0026gt;/root/.aws/config 27 echo \u0026#34;region = ap-southeast-1\u0026#34; \u0026gt;\u0026gt;/root/.aws/config 28 - name: create credential 29 shell: | 30 echo \u0026#34;[ecr]\u0026#34; \u0026gt;\u0026gt;/root/.aws/credentials 31 echo \u0026#34;aws_access_key_id = xxx\u0026#34; \u0026gt;\u0026gt;/root/.aws/credentials 32 echo \u0026#34;aws_secret_access_key = xxx\u0026#34; \u0026gt;\u0026gt;/root/.aws/credentials 33 - name: docker login 34 shell: | 35 loginstr=`aws ecr get-login --no-include-email --profile ecr` 36 bash $loginstr 37 - name: create working_dir directory 38 file: 39 path: \u0026#34;{{ item }}\u0026#34; 40 state: directory 41 with_items: 42 - \u0026#34;{{ working_dir }}\u0026#34; 43 44 - name: create container 45 docker_container: 46 name: \u0026#34;{{ container_name }}\u0026#34; 47 image: \u0026#34;{{registry_url}}/{{ container_image }}\u0026#34; 48 privileged: yes 49 restart_policy: always 50 ports: 51 - \u0026#34;80:80\u0026#34; 执行ansible文件\n1ansible-playbook -i /etc/ansible/hosts test-ansible.yml --extra-vars \u0026#34;container_version=${BUILD_NUMBER}\u0026#34; ","link":"https://www.airplanecraft.com/zh/post/ansible-deploy-docker-container/","section":"post","tags":["ansible","docker"],"title":"使用ansible在多台客户机安装docker"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/cert/","section":"tags","tags":null,"title":"Cert"},{"body":"https vs http https比http安全原因是传输的过程中使用了加密，因为https在服务器端使用证书 证书的认证需要认证机构，随便一个https的证书阿里巴巴云最便宜的一年要2000多，aws更是贵到天上，所以对于个人程序员来来说最好有免费的证书 cerbot就是你的选择 cerbot简介 cerbot就是Electronic Frontier Foundation (EFF)这个机构给大家发的福利，简单的一句话来说就是给你提供3个月的免费证书，证书到期后继续免费续约，个人网站是用最方便，每三个月更新一次就可以了 cerbot 使用 cerbot 安装脚本 1yum -y install yum-utils 2 3yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional 4 5sudo yum install certbot python2-certbot-nginx 6 7sudo certbot --nginx(sudo certbot certonly --nginx) 8 9 10echo \u0026#34;0 0,12 * * * root python -c \u0026#39;import random; import time; time.sleep(random.random() * 3600)\u0026#39; \u0026amp;\u0026amp; certbot renew -q\u0026#34; | sudo tee -a /etc/crontab \u0026gt; /dev/null (auto renewal) cerbot 证书验证 To confirm that your site is set up properly, visit https://yourwebsite.com/ in your browser and look for the lock icon in the URL bar. If you want to check that you have the top-of-the-line installation, you can head to https://www.ssllabs.com/ssltest/ ","link":"https://www.airplanecraft.com/zh/post/linux-cerbot/","section":"post","tags":["linux","cert"],"title":"给nginx安装免费的证书"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/vagrant/","section":"tags","tags":null,"title":"Vagrant"},{"body":"vagrant 简介 VirtualBox 是一款开源虚拟机软件,vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它使用Oracle的开源VirtualBox虚拟化系统，使用Chef创建自动化虚拟环境。 BBC Vagrant 是基于VirtualBox创建的虚拟机，并通过Vagrant进行打包而得到的VM环境。在虚拟机中部署好开发环境并建立虚拟机和实体机的文件共享，在开发时，可以通过实体机进行文件修改，并经过虚拟机中的环境执行，从而实现不同操作系统的工作环境的轻松部署。\n安装 vagrant和virtualbox 下载并安装VirtualBox（ https://www.virtualbox.org/wiki/Downloads ）。\nVirtualBox 4.3.12下载地址(windows请用此链接)：http://dlc-cdn.sun.com/virtualbox/4.3.12/index.html\n下载并安装Vagrant（ http://www.vagrantup.com/downloads.html ）。\n安装和定制box 下载windows 10 box文件。 https://app.vagrantup.com/mrlesmithjr/boxes/windows10/versions/1574780096/providers/virtualbox.box 到c:\\vagrant\\download\n执行命令\n1 2vagrant box add win10 c:\\vagrant\\download\\virtualbox.box 3 4cd c:\\vagrant 5 6vagrant init win10 7 8vagrant up 2\u0026gt; vagrant.log 查看模板文件c:\\vagrant\\Vagrantfile 1 2 $script = \u0026lt;\u0026lt;-\u0026#39;SCRIPT\u0026#39; 3 echo \u0026#34;starting wechat\u0026#34; 4 ipconfig \u0026gt; c:\\ip.log 5 C:\\Users\\wechat\\WeChat.exe \u0026gt; c:\\wechat.log 6 netstat \u0026gt; c:\\netstat.log 7 echo \u0026#34;started wechat\u0026#34; 8 SCRIPT 9 Vagrant.configure(\u0026#34;2\u0026#34;) do |config| 10 11 config.vm.provider :virtualbox do |vb| 12 vb.gui = true 13 vb.memory = 8*1024 14 end 15 config.vm.hostname = \u0026#39;wechat\u0026#39; 16 config.vm.boot_timeout = 99999999 17 config.vm.box = \u0026#34;mrl/windows10\u0026#34; 18 config.vm.communicator = \u0026#34;winrm\u0026#34; 19 #config.vm.provision :shell, path: \u0026#34;install-wechat.cmd\u0026#34;, privileged: true 20 config.vm.provision \u0026#34;file\u0026#34;, source: \u0026#34;./wechat\u0026#34;, destination: \u0026#34;C:\\\\Users\\\\wechat\u0026#34; 21 config.vm.provision \u0026#34;shell\u0026#34;, path: \u0026#34;wechat.cmd\u0026#34; 22 23 end 24 上面的wechat不可能启动起来，只可以启动后台程序，因为winrm无法启动xwindow，所以客户端没有可能启动起来，如果需要启动起来，就需要使用rdp来连接启动\n下面一些相关的命令\n1vagrant winrm status 2vagrant winrm default --command dir 3vagrant box list 4vagrant upload xxx.file ","link":"https://www.airplanecraft.com/zh/post/vagrant-windows-template/","section":"post","tags":["vagrant","vm"],"title":"vagrant使用介绍"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/vm/","section":"tags","tags":null,"title":"Vm"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/hugo/","section":"tags","tags":null,"title":"Hugo"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/themes/","section":"tags","tags":null,"title":"Themes"},{"body":"\n1.3. 手把手使用hugo搭建网站高级篇 1.3.1. 創建页面的目錄 hugo提供了目錄的支持table of content\n創建目錄首先你的文章必須有標題 在layouts/_default/single.html 添加代碼 {{.TableOfContents}} 1 {{ define \u0026#34;main\u0026#34; -}} 2 \u0026lt;div class=\u0026#34;post\u0026#34;\u0026gt; 3 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 4 \u0026lt;time datetime={{ .Date.Format \u0026#34;2006-01-02T15:04:05Z0700\u0026#34; }} class=\u0026#34;post-date\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; 5 {{.TableOfContents}} 6 7 {{ .Content }} 8 \u0026lt;/div\u0026gt; 9 10 {{ if .Site.DisqusShortname -}} 11 \u0026lt;h2\u0026gt;Comments\u0026lt;/h2\u0026gt; 12 {{ template \u0026#34;_internal/disqus.html\u0026#34; . }} 13 {{- end }} 14 {{ partial \u0026#34;related.html\u0026#34; . }} 15 {{- end }} 1.3.2. 创建搜索 伪站内搜索 使用google cse 网站注册然后把生成的代码放入到layout/partial/search.html 1\u0026lt;script async src=\u0026#34;https://cse.google.com/cse.js?cx=xxx:xxx\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 2\u0026lt;div class=\u0026#34;gcse-search\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 把search.html 加入到baseof {{ partial \u0026quot;search.html\u0026quot; . }} . 搜索的结果必须是google收录的网页 站内搜索hugo-lunr hugo自从0.20.0版本已经可以支持output format了,config.toml 1 [outputs] 2 section = [ \u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] layouts/post/list.json 1[ 2{{ range $index, $value := where .Site.Pages \u0026#34;Type\u0026#34; \u0026#34;posts\u0026#34; }} 3{{ if $index }}, {{ end }} 4{ 5 \u0026#34;url\u0026#34;: \u0026#34;{{ .RelPermalink }}\u0026#34;, 6 \u0026#34;title\u0026#34;: \u0026#34;{{ .Title }}\u0026#34;, 7 \u0026#34;content\u0026#34;: {{ .Content | plainify | jsonify }} 8} 9{{ end }} 10] 上面两步配置完成后,执行hugo命令将会在posts目录下生成index.json\n制作搜索页面\n1 2 \u0026lt;script src=\u0026#34;https://unpkg.com/lunr/lunr.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 3 \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; 4 5 // define globale variables 6 var idx, searchInput, searchResults = null 7 var documents = [] 8 9 function renderSearchResults(results){ 10 11 if (results.length \u0026gt; 0) { 12 13 // show max 10 results 14 if (results.length \u0026gt; 9){ 15 results = results.slice(0,10) 16 } 17 18 // reset search results 19 searchResults.innerHTML = \u0026#39;\u0026#39; 20 21 // append results 22 results.forEach(result =\u0026gt; { 23 24 // create result item 25 var article = document.createElement(\u0026#39;article\u0026#39;) 26 article.innerHTML = ` 27 \u0026lt;a href=\u0026#34;${result.ref}\u0026#34;\u0026gt;\u0026lt;h3 class=\u0026#34;title\u0026#34;\u0026gt;${documents[result.ref].title}\u0026lt;/h3\u0026gt;\u0026lt;/a\u0026gt; 28 \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;${result.ref}\u0026#34;\u0026gt;${documents[result.ref].title}\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; 29 \u0026lt;br\u0026gt; 30 ` 31 searchResults.appendChild(article) 32 }) 33 34 // if results are empty 35 } else { 36 searchResults.innerHTML = \u0026#39;\u0026lt;p\u0026gt;No results found.\u0026lt;/p\u0026gt;\u0026#39; 37 } 38 } 39 40 function registerSearchHandler() { 41 42 // register on input event 43 searchInput.oninput = function(event) { 44 45 // remove search results if the user empties the search input field 46 if (searchInput.value == \u0026#39;\u0026#39;) { 47 48 searchResults.innerHTML = \u0026#39;\u0026#39; 49 } else { 50 51 // get input value 52 var query = event.target.value 53 54 // run fuzzy search 55 var results = idx.search(query + \u0026#39;*\u0026#39;) 56 57 // render results 58 renderSearchResults(results) 59 } 60 } 61 62 // set focus on search input and remove loading placeholder 63 searchInput.focus() 64 searchInput.placeholder = \u0026#39;\u0026#39; 65 } 66 67 window.onload = function() { 68 69 // get dom elements 70 searchInput = document.getElementById(\u0026#39;search-input\u0026#39;) 71 searchResults = document.getElementById(\u0026#39;search-results\u0026#39;) 72 73 // request and index documents 74 fetch(\u0026#39;/posts/index.json\u0026#39;, { 75 method: \u0026#39;get\u0026#39; 76 }).then( 77 res =\u0026gt; res.json() 78 ).then( 79 res =\u0026gt; { 80 81 // index document 82 idx = lunr(function() { 83 this.ref(\u0026#39;url\u0026#39;) 84 this.field(\u0026#39;title\u0026#39;) 85 this.field(\u0026#39;content\u0026#39;) 86 87 res.forEach(function(doc) { 88 this.add(doc) 89 documents[doc.url] = { 90 \u0026#39;title\u0026#39;: doc.title, 91 \u0026#39;content\u0026#39;: doc.content, 92 } 93 }, this) 94 }) 95 96 // data is loaded, next register handler 97 registerSearchHandler() 98 } 99 ).catch( 100 err =\u0026gt; { 101 searchResults.innerHTML = `\u0026lt;p\u0026gt;${err}\u0026lt;/p\u0026gt;` 102 } 103 ) 104 } 105 \u0026lt;/script\u0026gt; 106 107 \u0026lt;input id=\u0026#34;search-input\u0026#34; type=\u0026#34;text\u0026#34; placeholder=\u0026#34;Loading...\u0026#34; name=\u0026#34;search\u0026#34;\u0026gt; 108 109 \u0026lt;section id=\u0026#34;search-results\u0026#34; class=\u0026#34;search\u0026#34;\u0026gt;\u0026lt;/section\u0026gt; 然后打开页面输入搜索框就可以搜多到内容 1.3.3. 创建多语言支持 hugo支持多語言和多語言的生成\n配置默認語言和menu ：config.toml 1 baseURL = \u0026#34;http://example.org/\u0026#34; 2 title = \u0026#34;\u0026#34; 3 theme = \u0026#34;hyde\u0026#34; 4 defaultContentLanguage = \u0026#34;en\u0026#34; 5 6 [params] 7 description = \u0026#34;\u0026#34; 8 homeMetaContent = \u0026#34;clouda3 personal blog\u0026#34; 9 footer = \u0026#34;clouda3的个人网站\u0026#34; 10 date = \u0026#34;2019-04-10 14:05:50\u0026#34; 11 codePenUser = \u0026#34;someUser\u0026#34; 12 [languages] 13 [language.en] 14 languageName = \u0026#34;English\u0026#34; 15 title = \u0026#34;English\u0026#34; 16 17 [[languages.en.menu.main]] 18 identifier = \u0026#34;home\u0026#34; 19 title = \u0026#34;my home\u0026#34; 20 name = \u0026#34;Home\u0026#34; 21 url = \u0026#34;/\u0026#34; 22 weight = 1 23 24 [[languages.en.menu.main]] 25 26 identifier = \u0026#34;blog\u0026#34; 27 title = \u0026#34;my blog\u0026#34; 28 name = \u0026#34;Blog\u0026#34; 29 url = \u0026#34;/posts/\u0026#34; 30 weight = 2 31 32 [language.cn] 33 languageName = \u0026#34;cn\u0026#34; 34 title = \u0026#34;中文\u0026#34; 35 36 [[languages.cn.menu.main]] 37 identifier = \u0026#34;home\u0026#34; 38 title = \u0026#34;主頁\u0026#34; 39 name = \u0026#34;Home\u0026#34; 40 url = \u0026#34;/cn\u0026#34; 41 weight = 7 42 43 [[languages.cn.menu.main]] 44 identifier = \u0026#34;blog\u0026#34; 45 title = \u0026#34;博客\u0026#34; 46 name = \u0026#34;博客\u0026#34; 47 url = \u0026#34;/cn/posts/\u0026#34; 48 weight = 8 創建頁面post/first.cn.md first.en.md\n創建可以切換中英文的按鈕,layouts/partials/lang.html\n1 \u0026lt;nav class=\u0026#34;LangNav\u0026#34;\u0026gt; 2 3 {{ range $.Site.Home.AllTranslations }} 4 \u0026lt;a href=\u0026#34;{{ .Page.Permalink }}\u0026#34;\u0026gt;{{ .Language.Lang }}\u0026lt;/a\u0026gt; 5 {{ end }} 6 7 \u0026lt;/nav\u0026gt; 修改layouts/partials/sidebar.html 1 {{ partial \u0026#34;lang.html\u0026#34; . }} 生成靜態html 目錄結構,cn是在一個目錄en是more的上一層目錄 ``` public ---cn ---post ---post ``` 6. 模板文字的多语言问题，创建i18n/en.toml cn.toml,在 ``` cn.toml [home_title] other = \u0026quot;主頁\u0026quot; ``` ``` layouts/partial/related.html {{ $related := .Site.RegularPages.RelatedIndices . \u0026quot;tags\u0026quot; | first 6 }} {{ with $related }} \u0026lt;div class=\u0026quot;related-content\u0026quot;\u0026gt; \u0026lt;h2\u0026gt;Related content\u0026lt;/h2\u0026gt; \u0026lt;ul class=\u0026quot;article-gallery\u0026quot;\u0026gt; {{ range . }} \u0026lt;span\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;time class=\u0026quot;pull-right post-list\u0026quot; datetime=\u0026quot;{{ .Date.Format \u0026quot;2006-01-02T15:04:05Z0700\u0026quot; }}\u0026quot;\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/time\u0026gt;\u0026lt;/span\u0026gt; {{ end }} \u0026lt;/ul\u0026gt; {{ else }} \u0026lt;ul\u0026gt;{{ i18n \u0026quot;nothing_related\u0026quot;}}\u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; {{ end }} ``` 1.3.4. 语法高亮 highlight 1 199 // ... code 1.3.5. 显示相关内容 默认的相关内容是keywords相关\n创建layouts/partial/related.html 1 {{ $related := .Site.RegularPages.Related . | first 6 }} 2 {{ with $related }} 3 \u0026lt;div class=\u0026#34;related-content\u0026#34;\u0026gt; 4 \u0026lt;h2\u0026gt;Related content\u0026lt;/h2\u0026gt; 5 \u0026lt;ul class=\u0026#34;article-gallery\u0026#34;\u0026gt; 6 {{ range . }} 7 \u0026lt;span\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;time class=\u0026#34;pull-right post-list\u0026#34; datetime=\u0026#34;{{ .Date.Format \u0026#34;2006-01-02T15:04:05Z0700\u0026#34; }}\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt;\u0026lt;/span\u0026gt; 8 {{ end }} 9 \u0026lt;/ul\u0026gt; 10 {{ else }} 11 \u0026lt;ul\u0026gt;. Nothing related\u0026lt;/ul\u0026gt; 12 \u0026lt;/div\u0026gt; 13 {{ end }} single.html 1 {{ define \u0026#34;main\u0026#34; -}} 2 \u0026lt;div class=\u0026#34;post\u0026#34;\u0026gt; 3 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 4 \u0026lt;time datetime={{ .Date.Format \u0026#34;2006-01-02T15:04:05Z0700\u0026#34; }} class=\u0026#34;post-date\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; 5 {{ .Content }} 6 \u0026lt;/div\u0026gt; 7 8 {{ if .Site.DisqusShortname -}} 9 \u0026lt;h2\u0026gt;Comments\u0026lt;/h2\u0026gt; 10 {{ template \u0026#34;_internal/disqus.html\u0026#34; . }} 11 {{- end }} 12 {{ partial \u0026#34;related.html\u0026#34; . }} 13 {{- end }} 新的post里面一定要包含keywords,默认对应keywords 1 --- 2 title: \u0026#34;Second\u0026#34; 3 date: 2019-11-01T16:14:58+08:00 4 draft: false 5 keywords: [\u0026#34;peter\u0026#34;] 6 --- 如果你的关键字name不是keywords比如是tags，那么需要调整related.html 1 {{ $related := .Site.RegularPages.RelatedIndices . \u0026#34;tags\u0026#34; | first 6 }} 2 {{ with $related }} 3 \u0026lt;div class=\u0026#34;related-content\u0026#34;\u0026gt; 4 \u0026lt;h2\u0026gt;Related content\u0026lt;/h2\u0026gt; 5 \u0026lt;ul class=\u0026#34;article-gallery\u0026#34;\u0026gt; 6 {{ range . }} 7 \u0026lt;span\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;time class=\u0026#34;pull-right post-list\u0026#34; datetime=\u0026#34;{{ .Date.Format \u0026#34;2006-01-02T15:04:05Z0700\u0026#34; }}\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt;\u0026lt;/span\u0026gt; 8 {{ end }} 9 \u0026lt;/ul\u0026gt; 10 {{ else }} 11 \u0026lt;ul\u0026gt;. Nothing related\u0026lt;/ul\u0026gt; 12 \u0026lt;/div\u0026gt; 13 {{ end }} 1.3.6. 显示当前页面所有的tag 创建layouts/partial/tags.html 1 {{ range .Params.tags }} 2 \u0026lt;a href=\u0026#34;/tags/{{ . }}\u0026#34;\u0026gt; 3 #{{ . }} 4 \u0026lt;/a\u0026gt; 5 {{ end }} 把tags.html加入single.html 1 {{ define \u0026#34;main\u0026#34; -}} 2 3 \u0026lt;div class=\u0026#34;post\u0026#34;\u0026gt; 4 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 5 6 \u0026lt;time datetime={{ .Date.Format \u0026#34;2006-01-02T15:04:05Z0700\u0026#34; }} class=\u0026#34;post-date\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; 7 {{ partial \u0026#34;tags.html\u0026#34; . }} 8 {{ .Content }} 9 \u0026lt;/div\u0026gt; 10 11 {{ if .Site.DisqusShortname -}} 12 \u0026lt;h2\u0026gt;Comments\u0026lt;/h2\u0026gt; 13 {{ template \u0026#34;_internal/disqus.html\u0026#34; . }} 14 {{- end }} 15 {{ partial \u0026#34;related.html\u0026#34; . }} 16 17 {{- end }} 1.3.7. 社交联系方式 网站大多会留下社交联系方式，比如fb，twitter,大部分网站是一排图标，这些图标都是svg格式的 sidebar.html\n1\t{{- with .Site.Params.social }} 2v id=\u0026#34;home-social\u0026#34;\u0026gt; 3partialCached \u0026#34;social-icons.html\u0026#34; . }} 4iv\u0026gt; 5end }} social-icons.html\n1 {{ range . -}} 2 \u0026lt;a href=\u0026#34;{{ .url }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34; title=\u0026#34;{{ .name | humanize }}\u0026#34;\u0026gt;{{ partial \u0026#34;svg.html\u0026#34; . }}\u0026lt;/a\u0026gt; 3 {{- end -}} config.toml\n1 [[params.social]] 2 name = \u0026#34;twitter\u0026#34; 3 url = \u0026#34;https://twitter.com/xxx\u0026#34; 4 5[[params.social]] 6 name = \u0026#34;instagram\u0026#34; 7 url = \u0026#34;https://instagram.com/xxx\u0026#34; 8 9[[params.social]] 10 name = \u0026#34;github\u0026#34; 11 url = \u0026#34;https://github.com/xxx\u0026#34; 12 13[[params.social]] 14 name = \u0026#34;email\u0026#34; 15 url = \u0026#34;https://marcusnunes.me/xxx\u0026#34; 16 17[[params.social]] 18 name = \u0026#34;linkedin\u0026#34; 19 url = \u0026#34;http://www.linkedin.com/in/xxx\u0026#34; 20[[params.social]] 21 name = \u0026#34;weibo\u0026#34; 22 url = \u0026#34;http://www.weibo.com/xxx\u0026#34; svg.html\n1 {{- if (eq .name \u0026#34;codepen\u0026#34;) -}} 2 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-codepen\u0026#34;\u0026gt;\u0026lt;polygon points=\u0026#34;12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2\u0026#34;\u0026gt;\u0026lt;/polygon\u0026gt;\u0026lt;line x1=\u0026#34;12\u0026#34; y1=\u0026#34;22\u0026#34; x2=\u0026#34;12\u0026#34; y2=\u0026#34;15.5\u0026#34;\u0026gt;\u0026lt;/line\u0026gt;\u0026lt;polyline points=\u0026#34;22 8.5 12 15.5 2 8.5\u0026#34;\u0026gt;\u0026lt;/polyline\u0026gt;\u0026lt;polyline points=\u0026#34;2 15.5 12 8.5 22 15.5\u0026#34;\u0026gt;\u0026lt;/polyline\u0026gt;\u0026lt;line x1=\u0026#34;12\u0026#34; y1=\u0026#34;2\u0026#34; x2=\u0026#34;12\u0026#34; y2=\u0026#34;8.5\u0026#34;\u0026gt;\u0026lt;/line\u0026gt;\u0026lt;/svg\u0026gt; 3 {{- else if (eq .name \u0026#34;facebook\u0026#34;) -}} 4 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-facebook\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt; 5 {{- else if (eq .name \u0026#34;github\u0026#34;) -}} 6 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-github\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt; 7 {{- else if (eq .name \u0026#34;gitlab\u0026#34;) -}} 8 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-gitlab\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt; 9 {{- else if (eq .name \u0026#34;instagram\u0026#34;) -}} 10 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-instagram\u0026#34;\u0026gt;\u0026lt;rect x=\u0026#34;2\u0026#34; y=\u0026#34;2\u0026#34; width=\u0026#34;20\u0026#34; height=\u0026#34;20\u0026#34; rx=\u0026#34;5\u0026#34; ry=\u0026#34;5\u0026#34;\u0026gt;\u0026lt;/rect\u0026gt;\u0026lt;path d=\u0026#34;M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;line x1=\u0026#34;17.5\u0026#34; y1=\u0026#34;6.5\u0026#34; x2=\u0026#34;17.5\u0026#34; y2=\u0026#34;6.5\u0026#34;\u0026gt;\u0026lt;/line\u0026gt;\u0026lt;/svg\u0026gt; 11 {{- else if (eq .name \u0026#34;linkedin\u0026#34;) -}} 12 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-linkedin\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;rect x=\u0026#34;2\u0026#34; y=\u0026#34;9\u0026#34; width=\u0026#34;4\u0026#34; height=\u0026#34;12\u0026#34;\u0026gt;\u0026lt;/rect\u0026gt;\u0026lt;circle cx=\u0026#34;4\u0026#34; cy=\u0026#34;4\u0026#34; r=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;/circle\u0026gt;\u0026lt;/svg\u0026gt; 13 {{- else if (eq .name \u0026#34;slack\u0026#34;) -}} 14 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-slack\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M22.08 9C19.81 1.41 16.54-.35 9 1.92S-.35 7.46 1.92 15 7.46 24.35 15 22.08 24.35 16.54 22.08 9z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;line x1=\u0026#34;12.57\u0026#34; y1=\u0026#34;5.99\u0026#34; x2=\u0026#34;16.15\u0026#34; y2=\u0026#34;16.39\u0026#34;\u0026gt;\u0026lt;/line\u0026gt;\u0026lt;line x1=\u0026#34;7.85\u0026#34; y1=\u0026#34;7.61\u0026#34; x2=\u0026#34;11.43\u0026#34; y2=\u0026#34;18.01\u0026#34;\u0026gt;\u0026lt;/line\u0026gt;\u0026lt;line x1=\u0026#34;16.39\u0026#34; y1=\u0026#34;7.85\u0026#34; x2=\u0026#34;5.99\u0026#34; y2=\u0026#34;11.43\u0026#34;\u0026gt;\u0026lt;/line\u0026gt;\u0026lt;line x1=\u0026#34;18.01\u0026#34; y1=\u0026#34;12.57\u0026#34; x2=\u0026#34;7.61\u0026#34; y2=\u0026#34;16.15\u0026#34;\u0026gt;\u0026lt;/line\u0026gt;\u0026lt;/svg\u0026gt; 15 {{- else if (eq .name \u0026#34;telegram\u0026#34;) -}} 16 \u0026lt;svg width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; stroke-width=\u0026#34;2\u0026#34; aria-hidden=\u0026#34;true\u0026#34; class=\u0026#34;feather\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;m 22.05,1.577 c -0.393,-0.016 -0.784,0.08 -1.117,0.235 -0.484,0.186 -4.92,1.902 -9.41,3.64 C 9.263,6.325 7.005,7.198 5.267,7.867 3.53,8.537 2.222,9.035 2.153,9.059 c -0.46,0.16 -1.082,0.362 -1.61,0.984 -0.79581202,1.058365 0.21077405,1.964825 1.004,2.499 1.76,0.564 3.58,1.102 5.087,1.608 0.556,1.96 1.09,3.927 1.618,5.89 0.174,0.394 0.553,0.54 0.944,0.544 l -0.002,0.02 c 0,0 0.307,0.03 0.606,-0.042 0.3,-0.07 0.677,-0.244 1.02,-0.565 0.377,-0.354 1.4,-1.36 1.98,-1.928 l 4.37,3.226 0.035,0.02 c 0,0 0.484,0.34 1.192,0.388 0.354,0.024 0.82,-0.044 1.22,-0.337 0.403,-0.294 0.67,-0.767 0.795,-1.307 0.374,-1.63 2.853,-13.427 3.276,-15.38 L 23.676,4.725 C 23.972,3.625 23.863,2.617 23.18,2.02 22.838,1.723 22.444,1.593 22.05,1.576 Z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt; 17 {{- else if (eq .name \u0026#34;twitter\u0026#34;) -}} 18 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-twitter\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt; 19 {{- else if (eq .name \u0026#34;youtube\u0026#34;) -}} 20 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-youtube\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;polygon points=\u0026#34;9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02\u0026#34;\u0026gt;\u0026lt;/polygon\u0026gt;\u0026lt;/svg\u0026gt; 21 {{- else if (eq .name \u0026#34;email\u0026#34;) -}} 22 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-mail\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;polyline points=\u0026#34;22,6 12,13 2,6\u0026#34;\u0026gt;\u0026lt;/polyline\u0026gt;\u0026lt;/svg\u0026gt; 23 {{- else -}} 24 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;24\u0026#34; height=\u0026#34;24\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-link\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;path d=\u0026#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;/svg\u0026gt; 25 {{- end -}} 1.3.8. 社交分享 社交分享就是把这篇文章分享到社交网站上去,实际上很多网站表现出来的形式是一排社交网站的浮动按钮，这个浮动按钮不用自己做，有很多的第三方软件提供，比如国外addthis，国内又bshare\n以addthis为例,注册addthis,选择社交网站比如wechat，fb，twitter，Qzone，申请完毕后得到一行代码\n1 2 \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5dc9230b5e0b9007\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 把这行代码添加到模板layouts/_default/single.html 1 {{ define \u0026#34;main\u0026#34; -}} 2 \u0026lt;div class=\u0026#34;post\u0026#34;\u0026gt; 3 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 4 \u0026lt;time datetime={{ .Date.Format \u0026#34;2006-01-02T15:04:05Z0700\u0026#34; }} class=\u0026#34;post-date\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; 5 {{ .Content }} 6 \u0026lt;/div\u0026gt; 7 8 \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-xxxxxxxx\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 1.3.9. 社交评论 社交评论就是利用个人的社交账号对目前所发的文章进行评论，这里也有很多第三方的公司提供组件，比如官方默认的Disqus 要先在Disqus注册然后 install on site -\u0026gt; 要绑定好自己的域名 得到一段代码加入到自己的layouts/partials/disqus.html 1 \u0026lt;div id=\u0026#34;disqus_thread\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 2 \u0026lt;script\u0026gt; 3 4 /** 5 * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. 6 * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ 7 /* 8 var disqus_config = function () { 9 this.page.url = PAGE_URL; // Replace PAGE_URL with your page\u0026#39;s canonical URL variable 10 this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page\u0026#39;s unique identifier variable 11 }; 12 */ 13 (function() { // DON\u0026#39;T EDIT BELOW THIS LINE 14 var d = document, s = d.createElement(\u0026#39;script\u0026#39;); 15 s.src = \u0026#39;https://www-gohugo-me.disqus.com/embed.js\u0026#39;; 16 s.setAttribute(\u0026#39;data-timestamp\u0026#39;, +new Date()); 17 (d.head || d.body).appendChild(s); 18 })(); 19 \u0026lt;/script\u0026gt; 20 \u0026lt;noscript\u0026gt;Please enable JavaScript to view the \u0026lt;a href=\u0026#34;https://disqus.com/?ref_noscript\u0026#34;\u0026gt;comments powered by Disqus.\u0026lt;/a\u0026gt;\u0026lt;/noscript\u0026gt; 21 将layouts/partials/disqus.html加入到layouts/_defaults/single.html 1 {{ define \u0026#34;main\u0026#34; -}} 2 \u0026lt;div class=\u0026#34;post\u0026#34;\u0026gt; 3 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 4 \u0026lt;time datetime={{ .Date.Format \u0026#34;2006-01-02T15:04:05Z0700\u0026#34; }} class=\u0026#34;post-date\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; 5 {{ .Content }} 6 \u0026lt;/div\u0026gt; 7 8 \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5dc9230b5e0b9007\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 9 {{ partial \u0026#34;related.html\u0026#34; . }} 10 {{ if .Site.DisqusShortname -}} 11 12 \u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; 13 \u0026lt;h2\u0026gt;##Comments\u0026lt;/h2\u0026gt; 14 15 {{ partial \u0026#34;disqus.html\u0026#34; . }} 16 {{- end }} 17 {{- end }} 18 5. config.toml 配置 disqusShortname = \u0026quot;disqus_xxxxx\u0026quot; 1.3.10. gitalk 评论 Gitalk 是一个基于 Github Issue 和 Preact 开发的评论插件,巧妙的利用github issue的功能开发出来的插件，需要用户有github账户\n首先要用github账户创建一个仓库(repository) 在repository的setting里面开通issues功能 在github在用户的setting里面，developer settings 创建Oauth apps 创建app得到 需要填写homepage url 和authorization callback URL * 1 Client ID 2 194e36d3bbcd14e7def9 3 Client Secret 4 2c99c40d21596f4dc7b9f31a76467ec19c72e653 注册完毕后将下列代码加入layouts/partials/gitalk.html 1 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://unpkg.com/gitalk/dist/gitalk.css\u0026#34;\u0026gt; 2 \u0026lt;script src=\u0026#34;https://unpkg.com/gitalk@latest/dist/gitalk.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 3 4 \u0026lt;div id=\u0026#34;gitalk-container\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 5 \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; 6 var gitalk = new Gitalk({ 7 // gitalk的主要参数 8 clientID: `xxxx`, //上面获取到的值 9 clientSecret: `xxxxx`,//上面获取到的值 10 repo: `clouda3`, //您刚才建立仓库的名字 11 owner: \u0026#39;clouda3\u0026#39;, //你的GitHub用户名字 12 admin: [\u0026#39;clouda3\u0026#39;], //你的GitHub用户的名字 13 id: \u0026#39;indow.location.pathname\u0026#39;, //id不能重复，如果重复就会把其他页面的评论引进来 14 }); 15 gitalk.render(\u0026#39;gitalk-container\u0026#39;); 16 \u0026lt;/script\u0026gt; 把gitalk.html 加入single.html 1\t{{ partial \u0026#34;gitalk\u0026#34; . }} ","link":"https://www.airplanecraft.com/zh/post/hugo-advanced-level-lesson/","section":"post","tags":["hugo","themes"],"title":"手把手使用Hugo搭建网站-高级篇"},{"body":"\n1.2. 手把手使用hugo搭建网站进阶篇 1.2.1. 自定义菜单 配置定义菜单栏 layouts/partials/sidebar.html 1 \u0026lt;aside class=\u0026#34;sidebar\u0026#34;\u0026gt; 2 \u0026lt;div class=\u0026#34;container sidebar-sticky\u0026#34;\u0026gt; 3 \u0026lt;div class=\u0026#34;sidebar-about\u0026#34;\u0026gt; 4 \u0026lt;a href=\u0026#34;{{ .Site.BaseURL }}\u0026#34;\u0026gt;\u0026lt;h1\u0026gt;{{ .Site.Title }}\u0026lt;/h1\u0026gt;\u0026lt;/a\u0026gt; 5 \u0026lt;p class=\u0026#34;lead\u0026#34;\u0026gt; 6 {{ with .Site.Params.description }} {{.}} {{ else }}{{end}} 7 \u0026lt;/p\u0026gt; 8 \u0026lt;/div\u0026gt; 9 10 \u0026lt;nav\u0026gt; 11 12 \u0026lt;ul class=\u0026#34;sidebar-nav\u0026#34;\u0026gt; 13 {{ $currentPage := . }} 14 {{ range .Site.Menus.main -}} 15 \u0026lt;li\u0026gt; \u0026lt;a class=\u0026#34;sidebar-nav-item{{if or ($currentPage.IsMenuCurrent \u0026#34;main\u0026#34; .) ($currentPage.HasMenuCurrent \u0026#34;main\u0026#34; .) }} active{{end}}\u0026#34; href=\u0026#34;{{ .URL }}\u0026#34; title=\u0026#34;{{ .Title }}\u0026#34;\u0026gt;{{ .Name }}\u0026lt;/a\u0026gt; 16 \u0026lt;/li\u0026gt; 17 {{- end }} 18 19 \u0026lt;/ul\u0026gt; 20 \u0026lt;ul class=\u0026#34;sidebar-nav\u0026#34;\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;/ul\u0026gt; 21 \u0026lt;/nav\u0026gt; 22 23 \u0026lt;p\u0026gt;{{ with .Site.Params.copyright }}{{.}}{{ else }}\u0026amp;copy; xxx 公司 {{ now.Format \u0026#34;2006\u0026#34;}}. All rights reserved. {{end}} \u0026lt;/p\u0026gt; 24 \u0026lt;/div\u0026gt; 25 \u0026lt;/aside\u0026gt; site/config.toml 1 baseURL = \u0026#34;http://clouda3.github.io/\u0026#34; 2 languageCode = \u0026#34;en-us\u0026#34; 3 title = \u0026#34;Clouda3\u0026#34; 4 theme = \u0026#34;hyde\u0026#34; 5 enableRobotsTXT=\u0026#34;true\u0026#34; 6 [permalinks] 7 post = \u0026#34;/:filename/\u0026#34; 8 9 [imaging] 10 quality = 99 11 12 [params] 13 description = \u0026#34;\u0026#34; 14 homeMetaContent = \u0026#34;clouda3 personal blog\u0026#34; 15 footer = \u0026#34;clouda3的个人网站\u0026#34; 16 date = \u0026#34;2019-04-10 14:05:50\u0026#34; 17 codePenUser = \u0026#34;someUser\u0026#34; 18 katex = true 19 20 21 [menu] 22 [[menu.main]] 23 identifier = \u0026#34;home\u0026#34; 24 name = \u0026#34;home\u0026#34; 25 url = \u0026#34;/\u0026#34; 26 weight = 1 27 [[menu.main]] 28 identifier = \u0026#34;blog\u0026#34; 29 name = \u0026#34;Blog\u0026#34; 30 url = \u0026#34;/posts/\u0026#34; 31 weight = 2 32 [[menu.main]] 33 identifier = \u0026#34;tags\u0026#34; 34 name = \u0026#34;Tags\u0026#34; 35 url = \u0026#34;/tags/\u0026#34; 36 weight = 3 37 [[menu.main]] 38 identifier = \u0026#34;about\u0026#34; 39 name = \u0026#34;About\u0026#34; 40 url = \u0026#34;/about\u0026#34; 41 weight = 4 42 [[menu.main]] 43 identifier = \u0026#34;rss\u0026#34; 44 name = \u0026#34;RSS\u0026#34; 45 url = \u0026#34;/index.xml\u0026#34; 46 weight = 5\t内容页面关联菜单 content/posts 目录下面添加文章 hugo new post post/abc.md 1.2.2. 自定义tag/category/keyword 无论是tag,category 还是keyword 都是用来分类的，在hugo里面没有太多的区别，都可以自定义,先演示页面keywords\n自定义页面的keywords,xxx.md 1 --- 2title: \u0026#34;First\u0026#34; 3date: 2019-11-01T16:08:13+08:00 4draft: false 5tags: [\u0026#34;aws\u0026#34;] 6keywords: [\u0026#34;aws\u0026#34;,\u0026#34;first\u0026#34;] 7--- layouts/partials/head.html 1 {{ with .Params.keywords }}\u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;{{ range $i, $e := . }}{{ if $i }} {{ end }}{{ $e }}{{ end }}\u0026#34;\u0026gt;{{ end }} tag和categories\nxxx.md 1 --- 2 title: \u0026#34;First\u0026#34; 3 date: 2019-11-01T16:08:13+08:00 4 draft: false 5 categories: [\u0026#34;亚马逊云\u0026#34;,\u0026#34;认证考试\u0026#34;] 6 tags: [\u0026#34;aws\u0026#34;] 7 keywords: [\u0026#34;aws\u0026#34;,\u0026#34;first\u0026#34;] 8 --- 显示所有的tag,定义模板layouts/tags/index.html 1 {{ define \u0026#34;main\u0026#34; -}} 2 \u0026lt;ul\u0026gt; 3 {{ $type := .Type }} 4 {{$type}} 5 {{ range $key, $value := .Site.Taxonomies.tags.Alphabetical }} 6 {{ $name := .Name }} 7 {{ $count := .Count }} 8 {{ with $.Site.GetPage (printf \u0026#34;/%s/%s\u0026#34; $type $name) }} 9 \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ $name }}\u0026lt;/a\u0026gt; {{ $count }}11111111\u0026lt;/li\u0026gt; 10 {{ end }} 11 {{ end }} 12 \u0026lt;/ul\u0026gt; 13 14 {{- end }} 创建tag显示页面tags/index.md 1 --- 2 title: \u0026#34;Posts\u0026#34; 3 date: 2019-11-01T16:10:12+08:00 4 type: \u0026#34;tags\u0026#34; 5 layout: \u0026#34;index\u0026#34; 6 --- 显示每个tag关联的页面,创建模板layouts/taxonomy/tag.html 1 {{ define \u0026#34;main\u0026#34; -}} 2 \u0026lt;ul\u0026gt; 3 {{ range .Data.Pages }} 4 \u0026lt;li\u0026gt; 5 \u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; 6 \u0026lt;/li\u0026gt; 7 {{ end }} 8 \u0026lt;/ul\u0026gt; 9 {{- end }} 访问http://xxx/tags/ 1.2.3. 创建header 和footer 创建header 和 footer 相关模板 1.2.4. 自定义边栏 创建sidebar 模板 1.2.5. 列举最新的文章 例举最新或者关联的文章 創建theme/layout/partial/related.html 模板 1{{ $related := .Site.RegularPages.Related . | first 5 }} 2{{ with $related }} 3\u0026lt;h4\u0026gt;相關頁面\u0026lt;/h4\u0026gt; 4\u0026lt;ul\u0026gt; 5\t{{ range . }} 6\t\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; 7\t{{ end }} 8\u0026lt;/ul\u0026gt; 9{{ end }} 在layout/_default/single.html模板中加入related.html模板的引用 1 0{{ define \u0026#34;main\u0026#34; -}} 1\u0026lt;div class=\u0026#34;post\u0026#34;\u0026gt; 2 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 3 \u0026lt;time datetime={{ .Date.Format \u0026#34;2006-01-02T15:04:05Z0700\u0026#34; }} class=\u0026#34;post-date\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; 4 {{ .Content }} 5\u0026lt;/div\u0026gt; 6 7{{ if .Site.DisqusShortname -}} 8\u0026lt;h2\u0026gt;Comments\u0026lt;/h2\u0026gt; 9{{ template \u0026#34;_internal/disqus.html\u0026#34; . }} 10{{- end }} 11 12{{ partial \u0026#34;related.html\u0026#34; . }} 13{{- end }} 這個會讓keyword關聯的頁面顯示出來，但是時間有先後的，晚發的文章裡面有老的文章的連接，老的文章没有新的文章的链接 1.2.6. 创建列表和对应的模板 posts/_index.md 和 posts/index.md的区别 _index.md默认是列表页面（branch bundle）对应的layout是 list.html,index.md（leaf bundle）对应的layout是 single.html 默认对应模板就是layouts/_default/list.html 和layouts/_default/single.html 如果自定义模板可以{theme}/layouts/posts/list.html {theme}/layouts/posts/single.html 也可以直接在layouts/posts/list.html 和/layouts/posts/single.html 网站的模板优先级别高于主题模板 1.2.7. 列表创建摘要 1 {{ define \u0026#34;main\u0026#34; -}} 2 \u0026lt;div class=\u0026#34;posts\u0026#34;\u0026gt; 3 {{ range .Site.RegularPages -}} 4 \u0026lt;article class=\u0026#34;post\u0026#34;\u0026gt; 5 \u0026lt;h1 class=\u0026#34;post-title\u0026#34;\u0026gt; 6 \u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; 7 \u0026lt;/h1\u0026gt; 8 \u0026lt;time datetime=\u0026#34;{{ .Date.Format \u0026#34;2006-01-02T15:04:05Z0700\u0026#34; }}\u0026#34; class=\u0026#34;post-date\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt; 9 {{ .Summary }} 10 {{ if .Truncated }} 11 \u0026lt;div class=\u0026#34;read-more-link\u0026#34;\u0026gt; 12 \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;Read More…\u0026lt;/a\u0026gt; 13 \u0026lt;/div\u0026gt; 14 {{ end }} 15 \u0026lt;/article\u0026gt; 16 {{- end }} 17 \u0026lt;/div\u0026gt; 18 {{- end }} 1.2.8. 分頁 默認使用_internal/pagination.html 可以自定分頁模板 layouts/partials/pagination.html 1 2 {{ $paginator := .Paginate (where .Pages \u0026#34;Type\u0026#34; \u0026#34;posts\u0026#34;) }} 3 \u0026lt;ul\u0026gt; 4 {{ range $paginator.Pages }} 5 \u0026lt;li\u0026gt; 6 \u0026lt;span\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;time class=\u0026#34;pull-right post-list\u0026#34; datetime=\u0026#34;{{ .Date.Format \u0026#34;2006-01-02T15:04:05Z0700\u0026#34; }}\u0026#34;\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/time\u0026gt;\u0026lt;/span\u0026gt; 7 \u0026lt;/li\u0026gt; 8 {{- end }} 9 10 \u0026lt;/ul\u0026gt; 11 12 {{ $pag := $.Paginator }} 13 {{ if gt $pag.TotalPages 1 }} 14 \u0026lt;ul class=\u0026#34;pagination\u0026#34;\u0026gt; 15 {{ with $pag.First }} 16 \u0026lt;li class=\u0026#34;page-item\u0026#34;\u0026gt; 17 \u0026lt;a href=\u0026#34;{{ .URL }}\u0026#34; class=\u0026#34;page-link\u0026#34; aria-label=\u0026#34;First\u0026#34;\u0026gt;\u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;laquo;\u0026amp;laquo;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; 18 \u0026lt;/li\u0026gt; 19 {{ end }} 20 \u0026lt;li class=\u0026#34;page-item{{ if not $pag.HasPrev }} disabled{{ end }}\u0026#34;\u0026gt; 21 \u0026lt;a {{ if $pag.HasPrev }}href=\u0026#34;{{ $pag.Prev.URL }}\u0026#34;{{ end }} class=\u0026#34;page-link\u0026#34; aria-label=\u0026#34;Previous\u0026#34;\u0026gt;\u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;laquo;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; 22 \u0026lt;/li\u0026gt; 23 {{ $ellipsed := false }} 24 {{ $shouldEllipse := false }} 25 {{ range $pag.Pagers }} 26 {{ $right := sub .TotalPages .PageNumber }} 27 {{ $showNumber := or (le .PageNumber 3) (eq $right 0) }} 28 {{ $showNumber := or $showNumber (and (gt .PageNumber (sub $pag.PageNumber 2)) (lt .PageNumber (add $pag.PageNumber 2))) }} 29 {{ if $showNumber }} 30 {{ $ellipsed = false }} 31 {{ $shouldEllipse = false }} 32 {{ else }} 33 {{ $shouldEllipse = not $ellipsed }} 34 {{ $ellipsed = true }} 35 {{ end }} 36 {{ if $showNumber }} 37 \u0026lt;li class=\u0026#34;page-item{{ if eq . $pag }} active{{ end }}\u0026#34;\u0026gt;\u0026lt;a class=\u0026#34;page-link\u0026#34; href=\u0026#34;{{ .URL }}\u0026#34;\u0026gt;{{ .PageNumber }}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; 38 {{ else if $shouldEllipse }} 39 \u0026lt;li class=\u0026#34;page-item disabled\u0026#34;\u0026gt;\u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026amp;hellip;\u0026amp;nbsp;\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt; 40 {{ end }} 41 {{ end }} 42 \u0026lt;li class=\u0026#34;page-item{{ if not $pag.HasNext }} disabled{{ end }}\u0026#34;\u0026gt; 43 \u0026lt;a {{ if $pag.HasNext }}href=\u0026#34;{{ $pag.Next.URL }}\u0026#34;{{ end }} class=\u0026#34;page-link\u0026#34; aria-label=\u0026#34;Next\u0026#34;\u0026gt;\u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;raquo;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; 44 \u0026lt;/li\u0026gt; 45 {{ with $pag.Last }} 46 \u0026lt;li class=\u0026#34;page-item\u0026#34;\u0026gt; 47 \u0026lt;a href=\u0026#34;{{ .URL }}\u0026#34; class=\u0026#34;page-link\u0026#34; aria-label=\u0026#34;Last\u0026#34;\u0026gt;\u0026lt;span aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026amp;raquo;\u0026amp;raquo;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; 48 \u0026lt;/li\u0026gt; 49 {{ end }} 50 \u0026lt;/ul\u0026gt; 51 {{ end }} layouts/_default/list.html 1{{ define \u0026#34;main\u0026#34; -}} 2 3 {{ partial \u0026#34;pagination.html\u0026#34; . }} 4 5{{- end }} 這樣還是有些問題，按鈕豎排，改一下樣式表 static/css/hyde.css 1 /** vvv Add lines below */ 2 ul.pagination { 3 list-style-type: none; 4 } 5 6 ul.pagination \u0026gt; li { 7 display: inline; 8 } 9 1.2.9. 创建统计 无论是baidu还是google还是chinaz都有相关的统计代码，只需要把这一段代码加入到我们的页面就可以了，以google来举例 申请google的analytics，会得到一段代码,把这段代码加入到layouts/partials/analytics.html 1 \u0026lt;!-- Global site tag (gtag.js) - Google Analytics --\u0026gt; 2 \u0026lt;script async src=\u0026#34;https://www.googletagmanager.com/gtag/js?id=UA-xxxx\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 3 \u0026lt;script\u0026gt; 4 window.dataLayer = window.dataLayer || []; 5 function gtag(){dataLayer.push(arguments);} 6 gtag(\u0026#39;js\u0026#39;, new Date()); 7 8 gtag(\u0026#39;config\u0026#39;, \u0026#39;UA-152981067-1\u0026#39;); 9 \u0026lt;/script\u0026gt; 10 把analytics.html 加入到layouts/_default/baseof.html 1 {{ partial \u0026#34;head.html\u0026#34; . }} 2 \u0026lt;body class=\u0026#34;{{ .Site.Params.themeColor }} {{if .Site.Params.layoutReverse}}layout-reverse{{end}}\u0026#34;\u0026gt; 3 {{ partial \u0026#34;sidebar.html\u0026#34; . }} 4 \u0026lt;main class=\u0026#34;content container\u0026#34;\u0026gt; 5 {{ block \u0026#34;main\u0026#34; . -}}{{- end }} 6 \u0026lt;/main\u0026gt; 7 8 {{ partial \u0026#34;google-analytics.html\u0026#34; . }} 9 \u0026lt;/body\u0026gt; 10 \u0026lt;/html\u0026gt; 访问网站，到google analytics后台就可以看到访问次数和其他的信息了 1.2.10. 创建rss 什么是rss就是创建一个网站信息的xml文件，别人通过这个xml文件可以把你网站上的信息聚合到别的地方 比如你用google rss可以聚合你喜欢的各个体育网站，而不用挨个打开这些网站，让这些网站的信息统一显示在一个页面上. 默认hogo使用用内部rss:layouts/_internal/_default/rss.xml 1 {{ printf \u0026#34;\u0026lt;?xml version=\\\u0026#34;1.0\\\u0026#34; encoding=\\\u0026#34;utf-8\\\u0026#34; standalone=\\\u0026#34;yes\\\u0026#34; ?\u0026gt;\u0026#34; | safeHTML }} 2 \u0026lt;rss version=\u0026#34;2.0\u0026#34; xmlns:atom=\u0026#34;http://www.w3.org/2005/Atom\u0026#34;\u0026gt; 3 \u0026lt;channel\u0026gt; 4 \u0026lt;title\u0026gt;{{ if eq .Title .Site.Title }}{{ .Site.Title }}{{ else }}{{ with .Title }}{{.}} on {{ end }}{{ .Site.Title }}{{ end }}\u0026lt;/title\u0026gt; 5 \u0026lt;link\u0026gt;{{ .Permalink }}\u0026lt;/link\u0026gt; 6 \u0026lt;description\u0026gt;Recent content {{ if ne .Title .Site.Title }}{{ with .Title }}in {{.}} {{ end }}{{ end }}on {{ .Site.Title }}\u0026lt;/description\u0026gt; 7 \u0026lt;generator\u0026gt;Hugo -- gohugo.io\u0026lt;/generator\u0026gt;{{ with .Site.LanguageCode }} 8 \u0026lt;language\u0026gt;{{.}}\u0026lt;/language\u0026gt;{{end}}{{ with .Site.Author.email }} 9 \u0026lt;managingEditor\u0026gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}\u0026lt;/managingEditor\u0026gt;{{end}}{{ with .Site.Author.email }} 10 \u0026lt;webMaster\u0026gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}\u0026lt;/webMaster\u0026gt;{{end}}{{ with .Site.Copyright }} 11 \u0026lt;copyright\u0026gt;{{.}}\u0026lt;/copyright\u0026gt;{{end}}{{ if not .Date.IsZero }} 12 \u0026lt;lastBuildDate\u0026gt;{{ .Date.Format \u0026#34;Mon, 02 Jan 2006 15:04:05 -0700\u0026#34; | safeHTML }}\u0026lt;/lastBuildDate\u0026gt;{{ end }} 13 {{ with .OutputFormats.Get \u0026#34;RSS\u0026#34; }} 14 {{ printf \u0026#34;\u0026lt;atom:link href=%q rel=\\\u0026#34;self\\\u0026#34; type=%q /\u0026gt;\u0026#34; .Permalink .MediaType | safeHTML }} 15 {{ end }} 16 {{ range .Pages }} 17 \u0026lt;item\u0026gt; 18 \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; 19 \u0026lt;link\u0026gt;{{ .Permalink }}\u0026lt;/link\u0026gt; 20 \u0026lt;pubDate\u0026gt;{{ .Date.Format \u0026#34;Mon, 02 Jan 2006 15:04:05 -0700\u0026#34; | safeHTML }}\u0026lt;/pubDate\u0026gt; 21 {{ with .Site.Author.email }}\u0026lt;author\u0026gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}\u0026lt;/author\u0026gt;{{end}} 22 \u0026lt;guid\u0026gt;{{ .Permalink }}\u0026lt;/guid\u0026gt; 23 \u0026lt;description\u0026gt;{{ .Summary | html }}\u0026lt;/description\u0026gt; 24 \u0026lt;/item\u0026gt; 25 {{ end }} 26 \u0026lt;/channel\u0026gt; 27 \u0026lt;/rss\u0026gt; 28 29 ``` ","link":"https://www.airplanecraft.com/zh/post/hugo-medium-level-lesson/","section":"post","tags":["hugo","themes"],"title":"手把手使用Hugo搭建网站-中级篇"},{"body":"\n1.1. 手把手使用hugo搭建网站初级篇 1.1.1. Demo使用hugo的网站 https://www.flysnow.org/ https://www.gohugo.io https://www.netlify.com/ https://gohugo.io/showcase/ https://www.smashingmagazine.com/ 1.1.2. 部分主题 https://github.com/Vimux/Mainroad https://github.com/kingfsen/Mainroad https://themes.gohugo.io/academic/ https://themes.gohugo.io/beautifulhugo/ https://themes.gohugo.io/hyde/ https://themes.gohugo.io/hugo-theme-even/ https://github.com/rujews/maupassant-hugo 1.1.3. hugo跟wordpress其他建站工具的对比 wordpress 全球31%的网站使用wordpress，尽管他有各种主题和插件，但是也有非常多的缺点，安全性，seo不够友好，定制麻烦\nhugo 最快的静态生成工具,seo友好，静态更安全，方便定制模板，缺点没有插件，如果要定制模板只能懂一点go的语法\nwordpress是动态的并且还需要托管数据库，所以托管费用比较昂贵\nhugo是生成静态的页面，在本地生成后上传到服务器就可以了，托管费用非常便宜，可以直接用免费的github托管\nhugo不可以在线编辑\nwordpress vs hugo\nTables 静态/动态 托管 安全性 访问速度 在线编辑 markdown wordpress 动态 复杂 需要经常升级 快 可以 不支持 hugo 静态 简单 不需要打补丁 非常快 不可以 支持 1.1.4. 分钟0基础使用hugo搭建个人博客网站（20m） 安装hugo\n下载 https://github.com/gohugoio/hugo/releases/download/v0.58.3/hugo_extended_0.58.3_Windows-64bit.zip 解压到e:\\hugo\\bin 运行命令行程序cmd,cd e:\\hugo\\bin 执行hugo version set PAHT=%PATH%;e:\\hugo\\bin 安装git 并clone 代码\n下载并安装git 运行hugo默认的theme\ncd e:\\hugo\\sites hugo new site example.com cd example.com\\theme git clone https://github.com/spf13/hyde.git 创建个人博客：支持菜单和tag\ncd e:\\hugo\\sites\\example.com 打开config.toml 1baseURL = \u0026#34;http://clouda3.github.io/\u0026#34; 2[menu] 3[[menu.main]] 4 identifier = \u0026#34;blog\u0026#34; 5 name = \u0026#34;Blog\u0026#34; 6 url = \u0026#34;/post/\u0026#34; hugo new post/first.md hugo server --theme=hyde -v -D 访问http://127.0.0.1:1313 1.1.5. 详解hugo使用的工具Git Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。1Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\nGitHub是一个开源的代码托管平台，使用GitHub可以查看别人的项目、可以建立静态网页、可以管理插件、可以在线编译、可以托管代码等等\n注册github www.github.com 登录:username or email account:xxx@xxx.com /password 创建repositories:create https://github.com/clouda3/test cd e:\\hugo\\sites\\example.com,执行....\\hugu.exe cd e:\\hugo\\sites\\example.com\\public git init git remote add origin https://github.com/clouda3/test.git git add . git commint -m \u0026quot;init commit\u0026quot; git push -u origin master 1.1.6. 使用githubpages托管个人网站 上一步将网站生成的代码提交到gihub上，利用已经提交的代码托管 github repository-\u0026gt;setting -\u0026gt;github pages -\u0026gt;source :master branch 访问一下https://clouda3.github.io/test 绑定域名test.clouda3.com，我用的是亚马逊的route53.CNAME value:https://clouda3.github.io github pages-\u0026gt;setting -\u0026gt;custom domain test.clouda3.com 访问一下test.clouda3.com 1.1.7. 解析域名到github pages 在aws route53申请域名（或者aliyun或者腾讯云申请) 域名的cname指向 test.clouda3.com 在github settings -\u0026gt;github pages -\u0026gt;custom domain 绑定域名www.xxxx.com 访问www.xxxx.com就可以访问到网站了 1.1.8. icon/robot.txt/404 icon 要放再static 或者theme/static目录下 1 \u0026lt;head\u0026gt; 2 \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;32x32\u0026#34; href=\u0026#34;/images/favicon-32x32.png\u0026#34;\u0026gt; 3 \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; sizes=\u0026#34;16x16\u0026#34; href=\u0026#34;/images/favicon-16x16.png\u0026#34;\u0026gt; 4 \u0026lt;/head\u0026gt; 404页面生成需要模板， 在theme/layouts/404.html 1{{ partial \u0026#34;head\u0026#34; . }} 2 \u0026lt;body\u0026gt; 3 {{ partial \u0026#34;header\u0026#34; . }} 4 \u0026lt;div class=\u0026#34;body404\u0026#34;\u0026gt; 5 \u0026lt;div class=\u0026#34;info404\u0026#34;\u0026gt; 6 \u0026lt;header id=\u0026#34;header404\u0026#34; class=\u0026#34;clearfix\u0026#34;\u0026gt; 7 \u0026lt;div class=\u0026#34;site-name404\u0026#34;\u0026gt;\u0026lt;i\u0026gt;404\u0026lt;/i\u0026gt;\u0026lt;/div\u0026gt; 8 \u0026lt;/header\u0026gt; 9 \u0026lt;section\u0026gt; 10 \u0026lt;div class=\u0026#34;title404\u0026#34;\u0026gt; 11 \u0026lt;p\u0026gt;页面去月球了吗？回去找找看\u0026lt;/p\u0026gt; 12 \u0026lt;/div\u0026gt; 13 {{ partial \u0026#34;related\u0026#34; . }} 14 \u0026lt;a rel=\u0026#34;nofollow\u0026#34; href=\u0026#34;{{ .Site.BaseURL }}\u0026#34; class=\u0026#34;index404\u0026#34;\u0026gt;回首页看看\u0026lt;/a\u0026gt; 15 \u0026lt;/section\u0026gt; 16 \u0026lt;/div\u0026gt; 17 \u0026lt;/div\u0026gt; 18 {{ partial \u0026#34;footer\u0026#34; . }} robot.txt生成也需要模板layouts/robot.txt,同时config.toml：enableRobotsTXT = true，layout/robot.txt 1 User-agent: Baiduspider 2 Disallow: 1.1.9. 创建网站地图 hugo 默认有internal sitemap 模板 如果需要定制sitemap模板可以在layouts/sitemap.xml 1 {{ printf \u0026#34;\u0026lt;?xml version=\\\u0026#34;1.0\\\u0026#34; encoding=\\\u0026#34;utf-8\\\u0026#34; standalone=\\\u0026#34;yes\\\u0026#34; ?\u0026gt;\u0026#34; | safeHTML }} 2 \u0026lt;urlset xmlns=\u0026#34;http://www.sitemaps.org/schemas/sitemap/0.9\u0026#34; 3 xmlns:xhtml=\u0026#34;http://www.w3.org/1999/xhtml\u0026#34;\u0026gt; 4 {{ range .Data.Pages }} 5 \u0026lt;url\u0026gt; 6 \u0026lt;loc\u0026gt;{{ .Permalink }}\u0026lt;/loc\u0026gt;{{ if not .Lastmod.IsZero }} 7 \u0026lt;lastmod\u0026gt;{{ safeHTML ( .Lastmod.Format \u0026#34;2006-01-02T15:04:05-07:00\u0026#34; ) }}\u0026lt;/lastmod\u0026gt;{{ end }}{{ with .Sitemap.ChangeFreq }} 8 \u0026lt;changefreq\u0026gt;{{ . }}\u0026lt;/changefreq\u0026gt;{{ end }}{{ if ge .Sitemap.Priority 0.0 }} 9 \u0026lt;priority\u0026gt;{{ .Sitemap.Priority }}\u0026lt;/priority\u0026gt;{{ end }}{{ if .IsTranslated }}{{ range .Translations }} 10 \u0026lt;xhtml:link 11 rel=\u0026#34;alternate\u0026#34; 12 hreflang=\u0026#34;{{ .Lang }}\u0026#34; 13 href=\u0026#34;{{ .Permalink }}\u0026#34; 14 /\u0026gt;{{ end }} 15 \u0026lt;xhtml:link 16 rel=\u0026#34;alternate\u0026#34; 17 hreflang=\u0026#34;{{ .Lang }}\u0026#34; 18 href=\u0026#34;{{ .Permalink }}\u0026#34; 19 /\u0026gt;{{ end }} 20 \u0026lt;/url\u0026gt; 21 {{ end }} 22 \u0026lt;/urlset\u0026gt; 1.1.10. 查看hugo生成静态页面的结构 ","link":"https://www.airplanecraft.com/zh/post/hugo-entry-level-lesson/","section":"post","tags":["hugo","themes"],"title":"手把手使用Hugo搭建网站-初级篇"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/saa/","section":"tags","tags":null,"title":"Saa"},{"body":"考试心得 考试成绩 852 背景 工作用到aws不到1年 有多年java开发经验 linux管理员,持有RHCE 准备周期 3周從準備到考試 每天8-12小时 做过实验的知识点列表 VPN endpoint/nat gateway/internet gateway/vpn/subnet/ACL\nRDS/Aurora/Reshift/Aurora/DynamoDB (snaphost copy az or cross region,ebs type change ,autoscaling ,entryption ,backup/replica ,Multi A-z,read/write unit)\nCloudfront (OAI,SSL certificat ,validation TTL ,pre-signed URL)\nS3 (static websit ,ACL ,bucket policy,lifecyle)\nec2 (Cloudwath agent install,ebs mount/unmount,snapshot,elasticip binding)\nCloud53 (A/alias .routing policy)\nAthena on S3 SQL QUERY\nKenisis stream /firehouse/analytic\nCloudwatch custom metric(ec2 momory/disk usage),alarm config -\u0026gt;sns/log export to s3\nCloudTrail\nAWS config custom rule\nIAM user/role/policy/permission\nstoragegateway(user ec2 as gateway,volume)\nApi gateway+lambda +cognito (hello world example) access dynamodb\nelasticsearch + cognito for Kibana user/password\norganization\nELB+autoscaling\nCloudformation (using aws existing exmaple template LAMP )\naws mq + cognito for mq console user/password\nApplication load balancer with multiple certificate configuration\n体会 SAA主要是考知识面的,不够深入,學一些表面的東西，有個大概的了解，可以合理規劃一些service\n對軟件工程師來說容易掌握，比如kafka-\u0026gt;kenisis ,Active MQ-\u0026gt;aws MQ, K8S-\u0026gt;ECs ,LINUX-\u0026gt;EC2 , Linux HA-\u0026gt; ELB ，Elasticsearch -\u0026gt; Athena ,mysql/replica/backup -\u0026gt;RDS 這些技術都有對應的地方,所以对于丰富开发经验的人来说就简单一些，容易理解\n考试的时候有几个新的知识点没有复习到，这也正常大概有三个服务\n三週時間很短,但是學到不少東西,每天8-12小時學習,確實讓人很崩潰的感覺,N多年沒有這樣學習了\n每個實驗花費了很多時間，有的實驗開始不太懂，做了很多遍才體會到了\n刷題很有必要，題目裡面的知識點是主要的，挨個弄懂就行了，答案無所謂記不記得住\n标记了8道题，最终应该错误了10道题.\n建議 想考sap必須從saa開始每個知識點都做實驗，光看題庫是沒有用的 有些架構圖最好自己畫一下，可以更好的理解 10月中旬考SAP，又要繼續拼了，有同行一起討論... ","link":"https://www.airplanecraft.com/zh/post/aws-saa-pass/","section":"post","tags":["aws","saa"],"title":"SAA-CO1考试之路"},{"body":" 9.27 号考试通过了SAP（913分），心里终于落下一块石头.从开始准备到最后通过我用了数个星期的时间，平均每天超过10小时的准备.sap的难度比saa高不是一个级别的，涉及了大量的新的知识点.不仅仅需要知道每个知识点，还需要动手去实践，为此我写了20个几个blog都是尝试这里面的知识点，实际我做过的实验大概有40多个，几乎每天要做一个实验，因为时间的问题，没有把其他的整理到blog上来，也是一个遗憾，后面我会慢慢补充上来。 考前准备 aws 账号 ：做实验用 最好有一些linux/network/dev experience 最好熟悉一门编程语言,java/.net/python/ruby/go/nodejs 最好熟悉json/yaml 如果考过saa最好了，saa是非常基础的aws认证 如果考过saa，最好保证300小时以上的学习时间 考试内容准备 印度小哥的一个考试心得基本上面面俱到了 https://www.linkedin.com/pulse/preparing-aws-certified-solutions-architect-2019-sap-c01-agarwal/\nbilibili 上印度小哥sap视频 https://www.bilibili.com/video/av66737718?from=search\u0026amp;seid=1011549087963751322 如果听的懂建议听听\nbilibili 上cloud guru的sap视频 https://www.bilibili.com/video/av39285864?from=search\u0026amp;seid=1657200592137432769\naws 本上的get-started https://aws.amazon.com/getting-started/ 建议尝试里面大部分的实验内容，只有实验的多了才能够理解每个服务以及服务于服务之间的关联\n","link":"https://www.airplanecraft.com/zh/post/aws-sap-passed/","section":"post","tags":["sap"],"title":"aws sap passed"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/sap/","section":"tags","tags":null,"title":"Sap"},{"body":" AWS X-Ray 可以帮助开发人员分析与调试分布式生产应用程序，例如使用微服务架构构建的应用程序。借助 X-Ray，您可以了解应用程序及其底层服务的执行方式，从而识别和排查导致性能问题和错误的根本原因。X-Ray 可在请求通过应用程序时提供请求的端到端视图，并展示应用程序底层组件的映射。您可以使用 X-Ray 分析开发和生产中的应用程序，从简单的三层应用程序到包含上千种服务的复杂微服务应用程序。\n簡單來說，xray是用來追踪服務與服務之間鏈條，每個服務之間的請求內容，時間，參數等信息\n用api-gateway 和 lambda 實驗 本文用到的例子是前面的博文: Aws cloudformation deploy lambda and apigateway\n只需要額外做以下兩步\n開啟api-gateway的x-ray,api gateway console-\u0026gt; apis-\u0026gt;spring-boot-lambda-\u0026gt;stages-\u0026gt;Prod-\u0026gt;logs/tracing-\u0026gt;enable x-ray tracing\n開啟lambda的x-ray,functions-\u0026gt;spring-boot-lambda-LambdaSpringBootFunction-7CK2QHXPRA6F-\u0026gt;aws x-ray:active tracing\ntest x-ray:fire a request to api gateway\nopen x-ray console:service map:you will see a picture like below:\n","link":"https://www.airplanecraft.com/zh/post/aws-x-ray/","section":"post","tags":["aws","sap"],"title":"aws x-ray"},{"body":" aws migration from OP to cloud這是aws最注重的部分，關於遷移技術，aws提供了各種各樣的工具，比如遷移數據庫(sts,dms),遷移workload（aws server migration service）,協助你計劃遷移收集信息的工具(aws application discovery service),track遷移進程的工具(migration hub),遷移海量數據的aws snowball or snowmobile,s3 acceleration, 加速數據傳輸的 dierct connect等等，從網絡到數據庫到文件，給你武裝到牙齒\n以下是兩篇關於數據遷移的好文\nhttps://medium.com/@awsontop/aws-cloud-migration-strategy-and-process-6ed38479735a\nhttps://www.slideshare.net/AmazonWebServices/accelerating-your-portfolio-migration-to-aws-using-aws-migration-hub-ent321-reinvent-2017\n","link":"https://www.airplanecraft.com/zh/post/aws-migration/","section":"post","tags":["aws","sap"],"title":"accelerating aws migration"},{"body":" OLAP在線分析工具越來越來成熟，從開始的數據倉庫，到強大的elk，再到雲，比如aws的 gaq(glue-athena-quicksight)，當然aws也有elk在線服務\ngaq vs elk,實際上是一類的產品，glue提供了crawler去爬去數據，類似 logstash，athena提供查詢工具類似elasticsearch ,quicksight 跟 kibana一樣ui.gaq是aws雲端的服務，沒有辦法部署在線下，elk既可以部署在op也可以部署在cloud上\n這篇文章來自 https://medium.com/localz-engineering/serverless-big-data-start-here-aws-glue-athena-quicksite-4c70ecac9fe3\n有一個圖片 實驗 cloudwatch agent 或者 application discovery agent 到ec2\ncloud watch agent 或者 discovery agent sync log 到 s3\nglue裡面創建crawler ，指定s3\nglue裡面創建database 和table\nathena 寫sql語句查詢想要的數據\n如果想要類似kinana那樣可視化的工具，那麼需要付費quicksight\n完\n","link":"https://www.airplanecraft.com/zh/post/aws-glue-athena-quicksight/","section":"post","tags":["aws","sap"],"title":"aws online analytical processing (or OLAP)"},{"body":" 剛開始使用cognito服務的時候特別讓人困惑，有user pool 和 identity pool(Federated Identities)，user pool裡面還有federation，federation裡面有identity provider. identity pool 裡面有autenticated provider裡面也有user pool ID! 納尼?這是什麼鬼? let's forget the connection between them user pool 簡單來說就是提供一個用戶驗證的服務，比如用戶自定義用戶，用fb,GOOGLE，twitter等賬戶登錄，登錄後獲取一個token，用戶的每次請求帶著這個token就可以了，用戶登錄後獲取的是你個人應用的resource! ,比如你自己做了一個網站，登錄後可以管理自己用戶，權限，圖片等等，你有權限去訪問這些資源 identity pool 也是提供一個用戶認證的服務，用戶可以在裡面設置aws 的role，也就說用戶登錄後得到的aws的resource 的訪問權限，比如你可以訪問s3.只是這個登錄可以跟 user pool提供的服務去綁定，也可以不用user pool的服務直接用 identity pool裡面的provider去對接，也就說，如果你有google的id也可以登錄後獲取aws resource 資源的訪問權限，這個是登錄後aws通過sts生成臨時credential 來做到的 summary user pool 只是負責authentication，沒有authorization，即便有也是用戶本身應用的服務 identity pool，既可以authentication，又可以authoriztion，授權的是aws的resource 上幾張圖 幾個非常有價值的link https://serverless-stack.com/chapters/cognito-user-pool-vs-identity-pool.html https://gorillalogic.com/blog/java-integration-with-amazon-cognito/\n","link":"https://www.airplanecraft.com/zh/post/aws-difference-between-userpool-and-identitypool/","section":"post","tags":["aws","sap"],"title":"Difference between user pool and identity pool(Federated Identities)"},{"body":" 这是一个aws官方的文档，我认为最好的cognito的例子，如果理解这个sample，那么cognito就没有任何问题 https://aws.amazon.com/getting-started/projects/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/ 详解 廢話少說直接上圖\n程序組成部分 - 靜態的代碼存放s3 - 動態的代碼存放lambda - 代碼的訪問入口通過api-gateway - 數據的存放時dynamoDB(程序登錄後有個點擊頁面位置生成的數據,與用戶驗證沒有太多關係) Cognito user pool 在user login 流程 - 用戶用用戶名+密碼(或mfa，這取決於cognito user pool的配置)請求登錄 - aws cognito user pool去驗證用戶 - 如果用戶通過驗證返回一個token - 下一次用戶用這個token來請求訪問 - aws cognito user pool 可以基本满足用户登录，如果涉及到权限可以跟自己数据进行绑定 - 这个例子里面特别要注意的是，api gateway 直接设置了 Authorizers ：里面可以指定cognito 来对用戶進行驗證，不用額外寫程序來驗證，也就說每次訪問一個服務/ride.html,api-getway通過Authorizers直接去用cognito去驗證用戶的token - 這個例子分了兩個步驟，第一個步驟是直接登錄，登錄後獲得一個toke - 第二步驟是用api-gateway 自動驗證用戶的登錄，也就是authentication ","link":"https://www.airplanecraft.com/zh/post/aws-cognito-sample/","section":"post","tags":["aws","sap"],"title":"Aws cognito sample"},{"body":" 用Cloudformation 来部署 java 的lambda 和api gateway,这里要用到spring-boot写java 代码，需要用到s3，存放lambda代码，需要创建lambda function和api agetway，还需要用到sam Aws lambda with Spring Boot 本文用到的git代码来自 https://github.com/gemerick/spring-boot-lambda 本文的内容来自 https://keyholesoftware.com/2018/04/26/aws-lambda-with-spring-boot/ 本文的步骤 安装sam git 克隆现有代码 创建s3 bucket 用cloudformation 上传 代码 用cloudformation 部署 测试代码 安装sam 1pip3 install --user aws-sam-cli git 克隆代码 1git clone https://github.com/gemerick/spring-boot-lambda -b lambda 2 3mvn clean package 创建s3 bucket 1aws s3 mb s3://spring-boot-lambda-20100905 拷贝jar 到S3 ，更新sam的template 1aws cloudformation package --template-file sam.yaml --output-template-file target/output-sam.yaml --s3-bucket spring-boot-lambda-20100905 Deploy a Cloudformation stack from the SAM template 1aws cloudformation deploy --template-file target/output-sam.yaml --stack-name spring-boot-lambda --capabilities CAPABILITY_IAM 2 3aws cloudformation describe-stacks --stack-name spring-boot-lambda 测试部署结果 1curl https://xxx.execute-api.ap-southeast-1.amazonaws.com/Prod/languages 2 3[{\u0026#34;name\u0026#34;:\u0026#34;node\u0026#34;},{\u0026#34;name\u0026#34;:\u0026#34;java\u0026#34;},{\u0026#34;name\u0026#34;:\u0026#34;python\u0026#34;}] ","link":"https://www.airplanecraft.com/zh/post/aws-cloudformation-lambda-apigateway/","section":"post","tags":["aws","sap"],"title":"Aws cloudformation deploy lambda and apigateway"},{"body":" Aws ecs 简单来说就是host docker container，跟K8S类似，如果用过k8s，那么ecs非常的好理解 本文主要按照 Gentle Introduction to How AWS ECS Works with Example Tutorial 搭建 关于ECS的专业的词汇 Task Definition ：实际就是要给launch configration,比如暴露端口号，用什么docker image，cpu 内存需要多少，运行docker 的command，环境变量\nTask ：简单来说就是一个running instance\nService ：一组task\nCluster ：一组task 跑在一个或者多个 constainer 里面\nContainer Instance ：容器实例里面跑的是多个 task\n按照此图搭建一组ecs的服务 创建一个ecs cluster 创建一个ecsServiceRole 创建Task Definition 创建elb和 target group 创建 service，里面只有一个task 检查运行情况 把service里面的task 改为4 创建一个ecs cluster 创建secrutiry group my-ecs-sg 1aws ec2 create-security-group --group-name my-ecs-sg --description my-ecs-sg 创建ecs cluster：选择vpc subnet多个 创建 ecsServiceRole attach policy ：AmazonEC2ContainerServiceRole trusted relationship： 1 { 2 \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, 3 \u0026#34;Statement\u0026#34;: [ 4 { 5 \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, 6 \u0026#34;Principal\u0026#34;: { 7 \u0026#34;Service\u0026#34;: \u0026#34;ecs.amazonaws.com\u0026#34; 8 }, 9 \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; 10 } 11 ] 12} 创建 task defination 1task-definition.json 2{ 3 \u0026#34;family\u0026#34;: \u0026#34;sinatra-hi\u0026#34;, 4 \u0026#34;containerDefinitions\u0026#34;: [ 5 { 6 \u0026#34;name\u0026#34;: \u0026#34;web\u0026#34;, 7 \u0026#34;image\u0026#34;: \u0026#34;tongueroo/sinatra:latest\u0026#34;, 8 \u0026#34;cpu\u0026#34;: 128, 9 \u0026#34;memoryReservation\u0026#34;: 128, 10 \u0026#34;portMappings\u0026#34;: [ 11 { 12 \u0026#34;containerPort\u0026#34;: 4567, 13 \u0026#34;protocol\u0026#34;: \u0026#34;tcp\u0026#34; 14 } 15 ], 16 \u0026#34;command\u0026#34;: [ 17 \u0026#34;ruby\u0026#34;, \u0026#34;hi.rb\u0026#34; 18 ], 19 \u0026#34;essential\u0026#34;: true 20 } 21 ] 22} 1 aws ec2 authorize-security-group-ingress --group-name my-ecs-sg --protocol tcp --port 1-65535 --source-group my-elb-sg --vpc-id vpc-xxxmyid 创建elb 和 target group create： my-elb with a HTTP protocol and Port 80 为elb 配置 security group： my-elb-sg ，inbound allowed port 80 and source 0.0.0.0/0 为my-ecs-sg 配置 inbound security group,允许来自elb的请求 aws ec2 authorize-security-group-ingress --group-id sg-xxxyyy --protocol tcp --port 1-65535 --source-group sg-xxxxx 创建 service 1ecs-service.json 2{ 3 \u0026#34;cluster\u0026#34;: \u0026#34;my-cluster\u0026#34;, 4 \u0026#34;serviceName\u0026#34;: \u0026#34;my-service\u0026#34;, 5 \u0026#34;taskDefinition\u0026#34;: \u0026#34;sinatra-hi\u0026#34;, 6 \u0026#34;loadBalancers\u0026#34;: [ 7 { 8 \u0026#34;targetGroupArn\u0026#34;: \u0026#34;FILL-IN-YOUR-TARGET-GROUP\u0026#34;, 9 \u0026#34;containerName\u0026#34;: \u0026#34;web\u0026#34;, 10 \u0026#34;containerPort\u0026#34;: 4567 11 } 12 ], 13 \u0026#34;desiredCount\u0026#34;: 1, 14 \u0026#34;role\u0026#34;: \u0026#34;ecsServiceRole\u0026#34; 15} 16 17 aws ecs create-service --cli-input-json file://ecs-service.json 检查运行情况 找到elb的dns 执行curl ：dns address 把service的节点扩展为4个 找到cluster 的pulibc dns 1ssh -i xxx.perm cluster-public-dns-address 进入ecs 的container 执行docker ps -a 发现有4个容器在running ","link":"https://www.airplanecraft.com/zh/post/aws-ecs-tutorial/","section":"post","tags":["aws","sap"],"title":"Aws ecs tutorial"},{"body":"Aws数据库迁移工具简介 越来越多的公司选择把服务迁移到云上,那么数据库的迁移尤其重要，亚马逊提供了数据迁移的工具 sct（schema converstion tool） 和 dms （data migration service）两个工具协作帮助客户从线下数据库导入到线上数据库,source 和 target 的database可以不是一种数据库类型，比如从mysql到oracle，或者mysql 到postgresql\n简单介绍一下sct，简单点来说就是数据库schema转换工具，把本地的数据库的schema转换为aws线上目标数据库的schema，然后在线上导入这个schema生成数据库,然后用DMS帮你把数据导出到aws上\n把aws mysql RDS 数据库 导出到 aws postgresql RDS 实验的目标就是把mysql数据库迁移到postgresql，由于在aws cloud上做比较方面，所以选择了都在云上来迁移做实验\nDown load Aws schema convertion tool\ncreate mysql database on aws\ncreate database：test and table myclass with 2 column:id name\n1test 2id name 31 hello 42 kitty create postgresql database on aws\nOpen aws sct\nFile -\u0026gt;new project:source :RDS for mysql ,target:RDS postsgresql\n在菜单上，connection to mysql，依次数据:server name/port/username/password,链接成功后左边位置就显示了mysql\n在菜单上，connection to postgresql,，依次数据:server name/port/username/password,链接成功后右边位置就显示了postgresql\n找到左边mysql Schemas -\u0026gt; test :右鍵 convert schema\n如果沒有出現問題的話右側就可以看到 test 的schema了，這時候schema 只是在sct裡面，並沒有後到postgresql數據庫\n在右側點擊 test 右鍵 apply to database ，schema 就在數據庫生成了，可以用toad看一下\n下一步遷移數據\n左側 test 數據庫上，右鍵 create dms task\ntask name/replication instance（這個需要aws dms 上提前建好）/source/target/migration type 等一一填好，create\nview -\u0026gt; database migration view ，選擇剛建好的 task，點擊 start\n數據複製完畢後，顯示load complete,檢查 postgresql 發現了數據\n1test 2id name 31 hello 42 kitty ","link":"https://www.airplanecraft.com/zh/post/aws-sct-dms-tutorial/","section":"post","tags":["aws","sap"],"title":"aws数据库迁移工具简介"},{"body":" 我几乎删除了所有的service，但是eni就是不让我删除 关联的eip也不让删除 我去aws社区看了很多帖子最后发现主要原因有两个地方 efs 使用eni nat gatway 使用了eni 根据这两点，我去查找，果然有个natgateway 使用eni，删除掉nat gateway后，eni可以删除，eip可以release了 ","link":"https://www.airplanecraft.com/zh/post/aws-eni-can-not-be-deleted/","section":"post","tags":["aws","sap"],"title":"eni or eip can not be deleted"},{"body":"一个ec2 instance 配置多网卡 首先要确定你需要几个公网IP，以2个为例 首先要确定你需要几个网卡，以2个为例 申请两个 elastic ip：IP1 ip2 申请两个eni(network interface)：eni1，eni2 创建一个ec2 把ip1 绑定到eni1,elastic ip-\u0026gt;选中IP-\u0026gt;associate-\u0026gt;resource type:network interface -\u0026gt; private ip 自动选择 把ip2 绑定到eni2,此处省略步骤 把eni1绑定到ec2，network interface 页面-\u0026gt;选择eni1-\u0026gt;attach-\u0026gt; 选择 ec2 instance id 把eni2绑定到ec2,此处省略步骤 在ec2 instance 页面,看到iP里面公网IP只有一个，private ip 有2个 为什么少了一个?用putty connnect 这个两个ip，都是没有问题，ec2 的console不显示而已 1[ec2-user@ip-172-31-1-176 ~]$ ifconfig 2eth0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 9001 3 inet 172.31.1.176 netmask 255.255.255.0 broadcast 172.31.1.255 4 inet6 fe80::8a:93ff:fefd:ef5c prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; 5 ether 02:8a:93:fd:ef:5c txqueuelen 1000 (Ethernet) 6 RX packets 4115218 bytes 1170825027 (1.0 GiB) 7 RX errors 0 dropped 0 overruns 0 frame 0 8 TX packets 3592874 bytes 8202330562 (7.6 GiB) 9 TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 10 11eth1: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 9001 12 inet 172.31.1.87 netmask 255.255.255.0 broadcast 172.31.1.255 13 inet6 fe80::f1:16ff:fefa:1bba prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; 14 ether 02:f1:16:fa:1b:ba txqueuelen 1000 (Ethernet) 15 RX packets 333 bytes 26643 (26.0 KiB) 16 RX errors 0 dropped 0 overruns 0 frame 0 17 TX packets 286 bytes 33695 (32.9 KiB) 18 TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 19 20lo: flags=73\u0026lt;UP,LOOPBACK,RUNNING\u0026gt; mtu 65536 21 inet 127.0.0.1 netmask 255.0.0.0 22 inet6 ::1 prefixlen 128 scopeid 0x10\u0026lt;host\u0026gt; 23 loop txqueuelen 1000 (Local Loopback) 24 RX packets 10549 bytes 8263339 (7.8 MiB) 25 RX errors 0 dropped 0 overruns 0 frame 0 26 TX packets 10549 bytes 8263339 (7.8 MiB) 27 TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ","link":"https://www.airplanecraft.com/zh/post/aws-multi-eni-on-one-ec2-instance/","section":"post","tags":["aws","sap"],"title":"一个ec2 instance上配置多个eni"},{"body":"Aws sts 简介 简单来说就是aws通过sts服务生成临时的credential给用户使用，他们可以设置有效期，自动失效,这也是amazon best practice 里面建议的方式 实验准备 创建 User 创建 Role 创建 s3 作为测试 为User创建sts assumeRole 的访问策略 在EC2上使用Aws cli 创建 历史的credential 访问s3 Create an IAM user https://console.aws.amazon.com/iam/home?region=ap-southeast-1#/users input name： mystsuser access type programmatic access 其他保持默认 Create role for antoher aws account https://console.aws.amazon.com/iam/home?region=ap-southeast-1#/roles 选择：another aws account Account ID: 找到上面的user 的arn，XXX就是ID (arn:aws:iam::XXXX:user/mystsuser) Attach plicy 搜索s3，选择 AmanzonS3ReadOnlyAccess,next reviews and create Role，input role name：sts-s3-read-only 创建完毕后，Update/Modify Trust Relationships replace (this is the arn of the user what you created) with arn:aws:iam::XXXX:user/mystsuser 1{ 2 \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, 3 \u0026#34;Statement\u0026#34;: [ 4 { 5 \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, 6 \u0026#34;Principal\u0026#34;: { 7 \u0026#34;AWS\u0026#34;: \u0026#34;this is the arn of the user what you created\u0026#34; 8 }, 9 \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34;, 10 \u0026#34;Condition\u0026#34;: {} 11 } 12 ] 13} 创建完毕 为User创建sts assumeRole 的访问策略 user页面， 选择刚才创建的用户 add inline policy service :sts Action:write-AssumeRole Resource:arn xxxx(input the arn of the role you created in earlier step) done Ec2 配置刚才创建的用户的profile 1 aws configure --profile stsgeneratedprofile 2AWS Access Key ID [****************QL74]: 3AWS Secret Access Key [****************/soA]: 4Default region name [ap-southeast-1]: 5Default output format [json]: 6 7aws sts assume-role --role-arn arn:aws:iam::xxxx:role/sts-s3-read-only --role-session-name \u0026#34;mytestsession\u0026#34; --profile ststestprofile --DurationSeconds 3600 生成用户的有效时间为3600秒，生成以下文件 1{ 2 \u0026#34;AssumedRoleUser\u0026#34;: { 3 \u0026#34;AssumedRoleId\u0026#34;: \u0026#34;AROAWNQJOZK2KCBLXLQZW:mytestsession\u0026#34;, 4 \u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:sts::xxx:assumed-role/sts-s3-read-only/mytestsession\u0026#34; 5 }, 6 \u0026#34;Credentials\u0026#34;: { 7 \u0026#34;SecretAccessKey\u0026#34;: \u0026#34;sss\u0026#34;, 8 \u0026#34;SessionToken\u0026#34;: \u0026#34;sss\u0026#34;, 9 \u0026#34;Expiration\u0026#34;: \u0026#34;2019-08-26T04:26:04Z\u0026#34;, 10 \u0026#34;AccessKeyId\u0026#34;: \u0026#34;sss\u0026#34; 11 } 12} 根据上面的文件创建新的profile 1aws configure --profile stsgeneratedprofile 2--测出略去 3--最终.aws/credential 里面 4 5[stsgeneratedprofile] 6aws_access_key_id = sss 7aws_secret_access_key = sss 8aws_session_token = ssss 最后测试 1 2 aws s3 ls --profile stsgeneratedprofile 3 4--output 52019-08-11 22:02:41 www.xxx.com 6 7 8 aws s3 cp abc.txt s3://xxxxx --profile stsgeneratedprofile 9upload failed: ./abc.txt to s3://xxxxx/abc.txt An error occurred (AccessDenied) when calling the PutObject operation: Access Denied ","link":"https://www.airplanecraft.com/zh/post/aws-sap-sts-service/","section":"post","tags":["aws","sap"],"title":"使用Aws sts创建临时credential"},{"body":"使用Aws System Manager 统一管理 aws resource Aws system Manager 简介 AWS Systems Manager gives you visibility and control of your infrastructure on AWS. Systems Manager provides a unified use:qr interface so you can view operational data from multiple AWS services and allows you to automate operational tasks across your AWS resources\nAws system manager AWS 让您能够查看和控制 AWS 上的基础设施。Systems Manager 可以提供一个统一的用户界面，供您查看多种 AWS 服务的运行数据，并在 AWS 资源上自动执行操作任务。\n使用场景 比如我有个20台 linux ec2，不管什么类型的，只要安装centyos，那么都要给他安装 ，cloudwatch agent 来对系统的disk和memory进行监控 实验的前置条件 你的系统上必须安装SSM Agent 你的EC2的role 必须具有 AmazonEC2RoleforSSM 的policy attach上去 安装SSM agent 1Intel (x86_64) 64 位实例： 2 3sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm 4 5ARM (arm64) 64 位实例： 6 7sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_arm64/amazon-ssm-agent.rpm 8Intel (x86) 32 位实例： 9 10sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_386/amazon-ssm-agent.rpm 11 12 13sudo systemctl start amazon-ssm-agent 给EC2 创建一个role具有 AmazonEC2RoleforSSM 的policy 创建role ssmrole，选择policy AmazonEC2RoleforSSM\nattach ssmrole to Ec2 ，这个不具体说了\n用System manager 执行 command 安装 aws cloud watch agent 打开https://ap-southeast-1.console.aws.amazon.com/systems-manager\n点击左侧run command\ncommand document 里面搜索 AWS-RunShellScript\n下方出现command parameter ，输入\n1 sudo yum install https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm -y; 2 3 sudo systemctl start amazon-cloudwatch-agent; Targes 里面 --\u0026gt; choose instance manually,批量选择20个要安装的ec2 instance\n执行 RUN\n查看执行结果就成功了。\n","link":"https://www.airplanecraft.com/zh/post/aws-sap-system-manager/","section":"post","tags":["aws","sap"],"title":" 使用Aws System Manager 统一管理 aws resource "},{"body":"AWS NAT instance setup 简介 NAT（Network Address Translation，网络地址转换）是1994年提出的。当在专用网内部的一些主机本来已经分配到了本地IP地址（即仅在本专用网内使用的专用地址），但现在又想和因特网上的主机通信（并不需要加密）时，可使用NAT方法。 AWS NAT gateway Aws 有專門的nat gateway,並且是HA的，只要創建gateway然後更改一下，subnet的路由就可以了，所以自己搭建一個nat gateway實際並不是aws的範疇，實際是一個linux系統的問題 手動搭建一個nat instance private subnet1/ instance1 / sg1(secrutiry group) / internal IP1 -\u0026gt;local node1 public subnet2/ instance2 / sg2(sercirity group) / internal IP2 /public ip2 -\u0026gt; proxy node2 配置proxy node 1vi /etc/sysctl.conf 2net.ipv4.ip_forward=1 3 4iptables -t nat -A POSTROUTING -o eth0 -s 192.168.1.0/24 -j MASQUERADE 192.168.1.0/24 為本地網絡CIDR\nEC2 頁面，選中proxy node2 -\u0026gt;Action -\u0026gt;Networking -\u0026gt;Disable source/Desk Check\n配置 local node 1 選擇 subnet1 -\u0026gt;Route Table 點擊route table id -\u0026gt;Routes Edit routes ：add 0.0.0.0/0 -\u0026gt;target 選中instance -\u0026gt;選中 proxy node2 ssh 進入node1 :ping 8.8.8.8 -\u0026gt; 沒有為子網配置igw，有沒有配置 nat gateway, 但是可以訪問 internet ","link":"https://www.airplanecraft.com/zh/post/aws-nat-instance-setup/","section":"post","tags":["aws","sap"],"title":"NAT instance setup 简介"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/k8s/","section":"tags","tags":null,"title":"K8s"},{"body":"我们为什么需要K8S 我们用最常用的一个例子LAMP（Linux/Apache/Mysql/PHP or Python or perl）搭建一個負載均均衡的多節點的網站，假如不考慮mysql環節，我們只考慮負載均衡和多節點的問題。\n1：如果我们在本地数据中心进行产品部署的话,我们需要那些服务 负载均衡 LB 扩容和缩放 auto scaling 高可用 HA，一個節點挂掉，如果有新的節點自動產生take over他的服務 日志如何同步到一個中心? Docker部署或者裸程序 反向代理服務 那么问题来了，几乎所有的服务都需要我们自己部署和搭建，我们的基础设施，完全依赖裸的操作系统，我们要全部搭建，举几个最简单的例子：如何决定部署多少个Docker容器？如何让这些容器的服务负载均衡？每个容器里面的日志如何同步？任何一个docker容器服务挂掉该如何处理？ 我们操作系统的优化，硬件和网络高可用性，等等目前这些问题都需要我们在本地数据中心来实现，无论是复杂度还是需要硬件成本和技术都是非常高的。\n2：如果在aws云上我们使用服务 LB(health check等配置) autoscaling cloudwatch logs 创建Lauch configuration 创建image 里面包含我们应用程序或者包含docker 日志的同步可以同步到elasticsearch服務 反向代理(使用lb的或者image裏面自己搭建nginx根據需要) 我们发现如果我们使用aws来构建我们的服务的话，这里面有很多成熟的服务我们可以拿来使用，这里面我们需要完成各个服务的配置，如果我们使用alicloud或者azure等各个服务平台的配置都是不一样的，即便我们有devops，我们使用terraform和assible来做devops也需要很多不同的代码，跨平台的移植非常麻煩\n3. 使用K8s 是否需要負載均衡？是，k8s service本身就是負載均衡 是否需要考慮需要節點的擴容和縮放？是，K8s pod本身就支持autoscaling擴容和縮放 日志如何同步？可以直接使用K8s的存儲管理，可以不用第三方的服務 是否支持容器？一直都是以容器為基本單位就行部署的 系統的可移植性如何?你的程序無論在本地數據中心的K8S還是在各個云服務平臺的k8s上，devops的代碼的改動幾乎沒有多少，完全是跨平臺的。無論是開發者還是devops都可以聚焦於你的業務實現 6.反向代理，直接使用service ingress 就可以很容易解決 總之，k8S提供了你需要的完美的一體化的解決方案，所有的這些服務都集成在K8S内部，如果使用一些定制化的k8S平臺，比如openshit還集成了更多的開發和devops的工具在裏面，可以更快的開發和測試和部署，讓我們的用戶效率大大提高。\n","link":"https://www.airplanecraft.com/zh/post/why-do-we-need-k8s/","section":"post","tags":["k8s"],"title":"我们为什么需要K8S"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/jenkins/","section":"tags","tags":null,"title":"Jenkins"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/pipeline/","section":"tags","tags":null,"title":"Pipeline"},{"body":"jenkins 节点 简介 在企业里面使用Jenkins自动部署时，大部分企业更新发布几个软件版本,但是对于一些公司有非常多的业务线或者产品来说，Jenkins就需要同时处理很多的任务，这时候就需要借助Jenkins多个node或者我们所说的Jenkins分布式SLAVE节点，来分开处理多个产品或者业务线的部署，目的就是master节点用来分配任务，slave节点来具体执行部署任务 配置 slave节点 jenkins -\u0026gt;manage jenins -\u0026gt; manage node and cloud -\u0026gt;new node node name:test ,选择permanent node 填好number of executors:1 ,remote root,launch method:launch agent via ssh,Host,Credentials,\tHost Key Verification Strategy,known hosts file verification strategy ,availability:keep agent online as much as possible 在slave上安装各种需要软件 一定要安装相关的plugin和global tool configuration里面配置相关的工具软件 e 创建一个pipeline测试一下 1pipeline { 2 agent any 3 stages { 4 stage(\u0026#39;Example\u0026#39;) { 5 steps { 6 echo \u0026#39;Hello World\u0026#39; 7 } 8 } 9 } 10 post { 11 always { 12 echo \u0026#39;I will ........!\u0026#39; 13 } 14 } 15} ","link":"https://www.airplanecraft.com/zh/post/jenkins_create_new_node/","section":"post","tags":["jenkins","pipeline"],"title":"如何配置jenkins新节点"},{"body":"面试问题结合 为什么要使用Kafka在你们项目 使用什么方式来解决微服务的事务问题Seata 支持多种事物框架 如有大量的并发 HTTP 请求到同一个API如何设计 连接池，keep-alive,socket-timeout,connect-time等设置 如何保证一个高并发的程序能够很好的服务用户，该怎么设计 如何劝说客户迁移到云 K8s能给企业带来什么 如何设计一个websocket客户端的高可用 你为什么觉得你适合这个职位 你对你的职业生涯有什么规划 英文中文的自我介绍 为什么要使用elasticsearch 为什么要使用云服务 mysql索引为什么可以提高速度，elasticsearch倒排索引原理 java 查看jvm一些命令jstack jstat jmap mariadb和mysqldb区别 Solution architect Enterprise architect technical architect 区别 作为一个云架构师你要考哪些stakeholder的诉求 作为一个架构师需要哪些能力 什么是蓝绿发布/灰度发布/滚动发布 RTO RPO aws 混合云网络构建，AWS VPC网络如何通信 aws 私有云在公有云上备份 aws 异地多活.https://aws.amazon.com/cn/blogs/china/corporate-cloud-travel-hybrid-cloud-construction-and-common-cloud-application-scenarios/ 如何设计一个高并发的大数据处理系统，模块解耦，分布式处理，数据的分片和副本，流数据，网络设计和搭建，日志的处理 如果在咨詢行業我們我們處理不同行業客戶的產品的架構，我們怎麽才可以做好這樣的工作 ","link":"https://www.airplanecraft.com/zh/post/interview_questions/","section":"post","tags":null,"title":"面试问题集合"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/ingress/","section":"tags","tags":null,"title":"Ingress"},{"body":"安装准备 Centos7.7 vm 或者真实的物理机三台(master一台,node两台) 硬件要求2GB ram,最低2CPU，最少32GB 硬盘 节点之间最好网络互通，如果不考虑安全可以关闭firewalld 可以访问到外部网络,因为需要网络资源，比如yum源和其他k8s需要的yaml文件 需要安装和配置 yum源配置 防火墙selinux的关闭与配置 swap分区配置 桥接ipv4流量交给iptables 文件句柄数的限制 Docker的安装 Kubeadmin,flannel 创建deployment,service,pod,ingress,ingress controller,kubernets-dashboard 具体安装步骤 VM 网络选择bridge模式 master:192.168.25.200 node:192.168.25.187/192.168.25.188\n防火墙\n1 $ systemctl stop firewalld 2 $ systemctl disable firewalld Selinux\n1 $ sed -i \u0026#34;s/^SELINUX=enforcing/SELINUX=disabled/g\u0026#34; /etc/selinux/config 2 $ sed -i \u0026#34;s/^SELINUX=permissive/SELINUX=disabled/g\u0026#34; /etc/selinux/config 3 $ setenforce 0 关闭swap\n1 swapoff -a 2 sed -i \u0026#39;s/.*swap.*/#\u0026amp;/\u0026#39; /etc/fstab 网络转发\n1 cat \u0026gt; /etc/sysctl.d/k8s.conf \u0026lt;\u0026lt; EOF 2 net.bridge.bridge-nf-call-ip6tables = 1 3 net.bridge.bridge-nf-call-iptables = 1 4EOF 文件句柄\n1 echo \u0026#34;* soft nofile 65536\u0026#34; \u0026gt;\u0026gt; /etc/security/limits.conf 2 echo \u0026#34;* hard nofile 65536\u0026#34; \u0026gt;\u0026gt; /etc/security/limits.conf 3 echo \u0026#34;* soft nproc 65536\u0026#34; \u0026gt;\u0026gt; /etc/security/limits.conf 4 echo \u0026#34;* hard nproc 65536\u0026#34; \u0026gt;\u0026gt; /etc/security/limits.conf 5 echo \u0026#34;* soft memlock unlimited\u0026#34; \u0026gt;\u0026gt; /etc/security/limits.conf 6 echo \u0026#34;* hard memlock unlimited\u0026#34; \u0026gt;\u0026gt; /etc/security/limits.conf yum源\n1wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo 2 3 4cat \u0026gt; /etc/yum.repos.d/kubernetes.repo \u0026lt;\u0026lt; EOF 5 [kubernetes] 6 name=Kubernetes 7 baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 8 enabled=1 9 gpgcheck=1 10 repo_gpgcheck=1 11 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg 12 https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg 13 14 EOF 15 16 $ wget https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg 17 $ rpm --import yum-key.gpg 18 $ wget https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg 19 $ rpm --import rpm-package-key.gpg 安装Docker kubectl kubeadm,kubelet\n1 $ yum -y install docker-ce-18.06.1.ce-3.el7 2 $ systemctl enable docker \u0026amp;\u0026amp; systemctl start docker 3 $ yum install -y kubelet-1.13.3 kubeadm-1.13.3 kubectl-1.13.3 kubernetes-cni-0.6.0 4 $ systemctl enable kubelet 使用kubeadm来deploy Kubernets master\n1 $ kubeadm init \\ 2 --apiserver-advertise-address=192.168.25.249 \\ 3 --image-repository registry.aliyuncs.com/google_containers \\ 4 --kubernetes-version v1.13.3 \\ 5 --service-cidr=10.1.0.0/16 \\ 6 --pod-network-cidr=10.244.0.0/16 执行命令后生成的日志保存\n1kubeadm join 192.168.25.200:6443 --token xxx --discovery-token-ca-cert-hash sha256:xxx 配置kubectl\n1 mkdir -p $HOME/.kube 2 sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config 3 sudo chown $(id -u):$(id -g) $HOME/.kube/config 安装flannel\n1 kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml Node节点加入\nz在node节点上执行上面保存的日志\n1 kubeadm join 192.168.25.200:6443 --token xxx --discovery-token-ca-cert-hash sha256:xxx 安装kubernets-dashboard\n1 wget https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml 2 3 kubectl apply -f kubernetes-dashboard.yaml 4 5 wget https://gist.githubusercontent.com/chukaofili/9e94d966e73566eba5abdca7ccb067e6/raw/0f17cd37d2932fb4c3a2e7f4434d08bc64432090/k8s-dashboard-admin-user.yaml 6 7 kubectl apply -f k8s-dashboard-admin-user.yaml 8 key: 9 kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk \u0026#39;/dashboard-admin/{print $1}\u0026#39;) 10 11 kubectl create clusterrolebinding test:anonymous --clusterrole=cluster-admin --user=system:anonymous Docker 配置\n1/etc/docker/daemon.json 2{ 3 \u0026#34;insecure-registries\u0026#34;: [ 4 \u0026#34;0.0.0.0/0\u0026#34; 5 ] }\n1 给k8是生成访问docker的key kubectl -n default create secret docker-registry registry-key --docker-server=192.168.25.167:5000 --docker-username=xxx --docker-password=xx -- docker-email= @xx.com\n1 2- deploy and svc -deploy-svc.yaml\napiVersion: v1 kind: Service metadata: name: terminal-svc namespace: default spec: type: NodePort selector: app: terminal ports: - name: robo1 port: 3012 targetPort: 3012 nodePort: 30012 - name: robo2 port: 9222 targetPort: 9222 nodePort: 30022 --- apiVersion: apps/v1 kind: Deployment metadata: name: terminal-deploy namespace: default labels: app: terminal spec: replicas: 1 selector: matchLabels: app: terminal template: metadata: labels: app: terminal spec: imagePullSecrets: - name: registry-key containers: - name: terminal image: 192.168.25.25:5000/node-slim-web-app:latest //docker registry ports: - name: robo1 containerPort: 3012 - name: robo2 containerPort: 9222 1 2- ingress wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml vi mandatory.yaml kubectl apply -f mandatory.yaml kubectl label node --all kubernetes.io/os=linux ingress.yaml\napiVersion: extensions/v1beta1 kind: Ingress metadata: name: ingress namespace: default spec: rules: - host: xxxx.com http: paths: - path: /api/GetTerminalWS/a1 # urI路径为空，默认为/ backend: serviceName: terminal-svc servicePort: 3012 1 2 3 4 5kubectl label node --all kubernetes.io/os=linux ","link":"https://www.airplanecraft.com/zh/post/k8s-install-ingress/","section":"post","tags":["k8s","ingress"],"title":"k8s使用ingress总结"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/baremetal/","section":"tags","tags":null,"title":"Baremetal"},{"body":"什么裸金属服务器 裸金属服务器（Bare Metal Server，BMS）是一款兼具弹性云服务器和物理机性能的计算类服务，为您和您的企业提供专属的云上物理服务器，为核心数据库、关键应用系统、高性能计算、大数据等业务提供卓越的计算性能以及数据安全。租户可灵活申请，按需使用。 裸金属服务器的开通是自助完成的，您只需要指定具体的服务器类型、镜像、所需要的网络配置等，即可在短时间内获得所需的裸金属服务器。服务器供应、运维工作交由华为云，您可以专注于业务创新。 产品架构 裸金属服务器在不同可用区中部署（可用区之间通过内网连接），部分可用区发生故障后不会影响同一区域内的其他可用区。 可以通过虚拟私有云建立专属的网络环境，设置子网、安全组，并通过弹性公网IP实现外网链接（需带宽支持）。 通过镜像服务，可以对裸金属服务器安装镜像，也可以通过私有镜像批量创建裸金属服务器，实现快速的业务部署。 通过云硬盘服务实现数据存储，并通过云硬盘备份服务实现数据的备份和恢复。 云监控是保持裸金属服务器可靠性、可用性和性能的重要部分，通过云监控，用户可以观察裸金属服务器资源。 云备份提供对云硬盘和裸金属服务器的备份保护服务，支持基于快照技术的备份服务，并支持利用备份数据恢复服务器和磁盘的数据。 华为裸金属的服务器的架构 与物理机和虚拟机的对比 什么场景下使用裸金属服务器 裸金属服务与一般云服务器最大的区别是是虚拟化与非虚拟化，虚拟化的缺点就是性能损失，操作系统和应用程序在调用硬件资源的时候，没有直接掌控，而是通过虚拟化软件间接管理的。\n高安全性和法规要求 高性能计算场景 资源独占的场景 不同厂家的裸金属服务器的服务差别 有很多小厂的裸金属服务器，说实话就是一台独立主机，独立的独享宽带的网络（可以定制宽带），但是网络无法定制，比如没有VPC的选项，没有安全组，要自己通过防火墙软件管安全，也没有网络硬盘，说白了就是一台独立的远程主机。阿里云华为云这些已经非常成熟了，跟网络主机的区别不是太大，区别就是一个非虚拟化的主机而已，其他的地方基本上区别不大。\n","link":"https://www.airplanecraft.com/zh/post/bare-metal-server/","section":"post","tags":["baremetal","cloud"],"title":"裸金属服务器使用"},{"body":"问题描述 我们本地数据中心服务器处理与客户的接口的时候发现网络有严重的延迟，然后我们又有数据合规方面的问题，我们就采用云端的裸金属服务器，安装了docker后发现docker无法访问到主机。 问题发现 docker exec -ti docker-id bash 进入主机 在docker主机内部telnet 主机IP 端口 发现无法访问 退出虚拟主机在主机执行telnet 主机IP 端口 ，是可以访问的 检查网络 原来是docker0 与主机eth0 之间通信问题被firewall屏蔽了 1 firewall-cmd --permanent --add-rich-rule=\u0026#34;rule family=\u0026#34;ipv4\u0026#34; source address=\u0026#34;172.17.0.1/16\u0026#34; accept\u0026#34; 2 firewall-cmd --reload ","link":"https://www.airplanecraft.com/zh/post/firewalld-block-docker/","section":"post","tags":["baremetal","cloud"],"title":"裸金属服务器遇到的docker容器访问问题"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/java/","section":"tags","tags":null,"title":"Java"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/jdk/","section":"tags","tags":null,"title":"Jdk"},{"body":"異常信息 1Caused by: java.lang.ExceptionInInitializerError: null 2 at org.springframework.context.annotation.ConfigurationClassEnhancer.newEnhancer(ConfigurationClassEnhancer.java:122) ~[spring-context-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 3 at org.springframework.context.annotation.ConfigurationClassEnhancer.enhance(ConfigurationClassEnhancer.java:110) ~[spring-context-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 4 at org.springframework.context.annotation.ConfigurationClassPostProcessor.enhanceConfigurationClasses(ConfigurationClassPostProcessor.java:405) ~[spring-context-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 5 ... 20 common frames omitted 6Caused by: org.springframework.cglib.core.CodeGenerationException: java.lang.reflect.InaccessibleObjectException--\u0026gt;Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not \u0026#34;opens java.lang\u0026#34; to unnamed module @1134affc 7 at org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:464) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 8 at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:336) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 9 at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:93) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 10 at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:91) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 11 at org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 12 at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na] 13 at org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 14 at org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 15 at org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:116) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 16 at org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:291) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 17 at org.springframework.cglib.core.KeyFactory$Generator.create(KeyFactory.java:221) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 18 at org.springframework.cglib.core.KeyFactory.create(KeyFactory.java:174) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 19 at org.springframework.cglib.core.KeyFactory.create(KeyFactory.java:153) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 20 at org.springframework.cglib.proxy.Enhancer.\u0026lt;clinit\u0026gt;(Enhancer.java:73) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 21 ... 23 common frames omitted 22Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not \u0026#34;opens java.lang\u0026#34; to unnamed module @1134affc 23 at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:357) ~[na:na] 24 at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297) ~[na:na] 25 at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:199) ~[na:na] 26 at java.base/java.lang.reflect.Method.setAccessible(Method.java:193) ~[na:na] 27 at org.springframework.cglib.core.ReflectUtils$1.run(ReflectUtils.java:61) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 28 at java.base/java.security.AccessController.doPrivileged(AccessController.java:554) ~[na:na] 29 at org.springframework.cglib.core.ReflectUtils.\u0026lt;clinit\u0026gt;(ReflectUtils.java:52) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 30 at org.springframework.cglib.core.KeyFactory$Generator.generateClass(KeyFactory.java:243) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 31 at org.springframework.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 32 at org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:329) ~[spring-core-5.0.4.RELEASE.jar!/:5.0.4.RELEASE] 33 ... 35 common frames omitted 挖掘問題 eclipse compiler和jdk版本都是1.8 但是外面是java16,在eclipse裏面用JAVA8都是沒有任何問題,但是在JAVA16就出錯,這是因爲在java9中引入了module，現實大部分的企業級開發還是在使用java8所以一般不會遇到這個問題，只需要運行的時候如下\n1java --add-opens java.base/java.lang=ALL-UNNAMED -jar redis-cluster-0.0.1-SNAPSHOT.jar ","link":"https://www.airplanecraft.com/zh/post/jdk-version-caused-dynamic-proxy-issue/","section":"post","tags":["java","jdk"],"title":"JDk版本問題造成的cglib運行時候出錯"},{"body":"如何测试linux的tcp和udp端口 测试tcp 一般用使用 telnet 1telnet 192.168.12.10 22 telnet 不支持udp协议，所以我们可以使用nc,nc可以支持tcp也可以支持udp 1 yum install -y nc 2 nc -z -v 192.168.10.12 22 #tcp 3 nc -z -v -u 192.168.10.12 123 # udp ","link":"https://www.airplanecraft.com/zh/post/linux-tcp-udp-port-test/","section":"post","tags":["linux"],"title":"如何测试linux的tcp和udp端口"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/epel/","section":"tags","tags":null,"title":"Epel"},{"body":"Linux 安装包的痛苦经历 1libcurl.so: libssh2.so.1: cannot open shared object file: No such file or directory 2libssl.so.10: cannot open shared object file: No such file or directory 如果遇到以上以上情况，libcurl需要libssh2依赖，那我们最希望的最法无非是yum install libssh2 libssl希望能安装好，那就解决了依赖的问题了，但是问题是没有\n1Last metadata expiration check: 2:33:40 ago on 18 Mar 2019 02:09:36 PM CST. 2No match for argument: libssh2 3Error: Unable to find a match: libssh2 遇到这样的问题我们一般会去找一个rpm包去安装，通过rpm -ivh libssh2.rpm 发现缺少依赖\n1Requires 2libc.so.6()(64bit) 3libc.so.6(GLIBC_2.14)(64bit) 4libc.so.6(GLIBC_2.2.5)(64bit) 5libc.so.6(GLIBC_2.3)(64bit) 6libc.so.6(GLIBC_2.3.4)(64bit) 7libc.so.6(GLIBC_2.4)(64bit) 8libcrypto.so.3()(64bit) 9libcrypto.so.3(OPENSSL_3.0.0)(64bit) 10libssl.so.3()(64bit) 11libz.so.1()(64bit) 12rpmlib(CompressedFileNames) \u0026lt;= 3.0.4-1 13rpmlib(FileDigests) \u0026lt;= 4.6.0-1 14rpmlib(PayloadFilesHavePrefix) \u0026lt;= 4.0-1 15rpmlib(PayloadIsZstd) \u0026lt;= 5.4.18-1 16rtld(GNU_HASH) 有的依赖可以找到的，但是因为版本问题可能不行，有的找不到需要通过gcc编译，然后一个个解决实在太麻烦了！但是任何一个有经验的centos/redhat的系统工程师都会提前求助于EPEL!\n什么是EPEL EPEL 的全称叫 Extra Packages for Enterprise Linux。EPEL 是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL 之后，就相当于添加了一个第三方源。 为什么需要 EPEL 那是因为 CentOS 源包含的大多数的库都是比较旧的。并且，很多流行的库也不存在。EPEL 在其基础上不仅全，而且还够新。 EPEL 这两个优点，解决了很多人安装库的烦恼。 安装EPEL 1yum install -y epel-release 安装libssh2 1 yum search libssh2 2 Last metadata expiration check: 2:41:47 ago on Fri 18 Mar 2022 02:09:36 PM CST. 3 libssh2-docs.noarch : Documentation for libssh2 4 libssh2-devel.x86_64 : Development files for libssh2 5 6 yum install libssh2-devel 总结 在Rehat/centos/fedora上如果安装包找不到依赖的情况下，首先要考虑epel\n","link":"https://www.airplanecraft.com/zh/post/why-epel/","section":"post","tags":["epel","linux"],"title":"为什么要使用epel"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/openvpn/","section":"tags","tags":null,"title":"Openvpn"},{"body":"为什么会用到vpn vpn是我们经常会用到的工具，比如有些程序不允许我们在某些地区下载，有些网站我们没有办法看之类的，我们就vpn不管是pptp还是vpn无非改变都是路由问题，也就是你上网的出口的问题 openvpn openvpn是一款开源vpn软件，功能非常强大，用户非常多，遵循的是openvpn协议 缺点搭建有些复杂，但是有第三方的脚本协助搭建会非常简单 openvpn搭建借助于第三方脚本 作者git：https://github.com/Nyr/openvpn-install 1wget https://git.io/vpn -O openvpn-install.sh \u0026amp;\u0026amp; bash openvpn-install.sh 最后生成一个*.ovpn文件 下载并安装openvpn gui：https://openvpn.net/community-downloads/ 用安装好的客户端打开*.ovpn就可以登录远程的vpn服务器了 ","link":"https://www.airplanecraft.com/zh/post/linux-openvpn-install/","section":"post","tags":["openvpn","linux"],"title":"Openvpn最简单的安装方式"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/pip/","section":"tags","tags":null,"title":"Pip"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/python/","section":"tags","tags":null,"title":"Python"},{"body":"Python 面試題目 列表（list）和元组（tuple）有什么区别？\n列表是可变的。创建后可以对其进行修改 元组是不可变的。元组一旦创建，就不能对其进行更改 列表表示的是顺序。它们是有序序列，通常是同一类型的对象 [\u0026quot;APPLE\u0026quot;,\u0026quot;PEAR\u0026quot;,\u0026quot;ORANGE\u0026quot;] 元组表示的是结构。可以用来存储不同数据类型的元素 [1,\u0026quot;eric\u0026quot;,1999-08-10,24] 什么是装饰器（decorator）\n解释Range函数\n解释map函数的工作原理\n解释reduce函数的工作原理。\n解释filter函数的工作原理\nPython是按引用调用还是按值调用？\n列表乘法是如何工作的?\n类中的“self”指的是什么？\n如何在Python中连接列表？\n列表和数组有什么区别？ list vs array\nPandas\n举出几个可变和不可变对象的例子\n模块（module）和包（package）有什么区别？\n在迭代序列时，为什么要使用enumerate？\npass、continue和break之间有什么区别?\n如何将for循环转换为使用递推式构造列表（list comprehension）？\nPython中的异常处理是如何进行的？\n什么是__init__?__init__是Python中的方法或者结构。\n什么是lambda函数？\nPython中的self是什么？self是类的实例或对象。\nPython中的函数方法是什么？\npython中是否需要缩进？\npython是否区分大小写？\nPython中的局部变量和全局变量是什么？\n什么是python模块？Python中有哪些常用的内置模块？\nPython中的命名空间是什么？\n如何在Python中管理内存？\n什么是pep？\n这两个参数是什么意思：*args，**kwargs？我们为什么要使用它们？\n简要描述Python的垃圾回收机制（garbage collection）\nPython多线程（multi-threading） 多进程(multi-process)\n说明os,sys模块不同，并列举常用的模块方法？\nPython里面如何拷贝一个对象？ 浅拷贝深拷贝\n__new__和__init__的区别。\nPython中单下划线和双下划线分别是什么？\n说一说Python自省 反射\n“猴子补丁”（monkey patching）指的是什么？这种做法好吗？\n下面这些是什么意思：@classmethod, @staticmethod, @property？\nPython 中类方法、类实例方法、静态方法有何区别？\nPython 中如何动态获取和设置对象的属性？\nPython 的内存管理机制及调优手段？\n内存泄露是什么？如何避免？\n为什么函数名字可以当做参数用?\n回调函数，如何通信的?\nPython 主要的内置数据类型都有哪些？print dir( ‘a ’) 的输出？\npython请手写一个单例\n单例模式的应用场景有哪些？\nPython理解装饰器并写出一个计时器记录方法执行性能的装饰器？\n解释一下什么是闭包?\n生成器、迭代器的区别？\nPython 中 yield 的用法?\nPython 中 is 和==的区别？\nPython 的魔法方法？\n谈谈你对面向对象的理解？\nPython 里 match 与 search 的区别？\n","link":"https://www.airplanecraft.com/zh/post/pythyon_collection/","section":"post","tags":["python","pip"],"title":"python一些集合"},{"body":"Ansible 简介 ansible是基于Python开发，集合了众多运维工具（puppet、chef）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。最大的特点就是ansible不需要在远程主机上安装client/agents，因为它们是基于ssh来和远程主机通讯的。ansible目前已经已经被红帽官方收购，是自动化运维工具中大家认可度最高的，并且上手容易，学习简单。是每位运维工程师必须掌握的技能之一。 特点 部署简单，只需在主控端部署Ansible环境，被控端无需做任何操作； 默认使用SSH协议对设备进行管理； 有大量常规运维操作模块，可实现日常绝大部分操作； 配置简单、功能强大、扩展性强； 支持API及自定义模块，可通过Python轻松扩展； 通过Playbooks来定制强大的配置、状态管理； 轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可； 提供一个功能强大、操作性强的Web管理界面和REST API接口——AWX平台。 任务执行方式 ad-hoc模式(点对点模式)\n使用单个模块，支持批量执行单条命令。ad-hoc 命令是一种可以快速输入的命令，而且不需要保存起来的命令。就相当于bash中的一句话shell。\nplaybook模式\n是Ansible主要管理方式，也是Ansible功能强大的关键所在。playbook通过多个task集合完成一类功能.比如我们拷贝一个文件到主机，然后授予权限，然后启动程序这几个步骤结合在一起\nAansbile 文件和命令 ansible.cfg 1 inventory = /etc/ansible/hosts\t#这个参数表示资源清单inventory文件的位置 2\tlibrary = /usr/share/ansible\t#指向存放Ansible模块的目录，支持多个目录方式，只要用冒号（：）隔开就可以 3\tforks = 5\t#并发连接数，默认为5 4\tsudo_user = root\t#设置默认执行命令的用户 5\tremote_port = 22\t#指定连接被管节点的管理端口，默认为22端口，建议修改，能够更加安全 6\thost_key_checking = False\t#设置是否检查SSH主机的密钥，值为True/False。关闭后第一次连接不会提示配置实例 7\ttimeout = 60\t#设置SSH连接的超时时间，单位为秒 8\tlog_path = /var/log/ansible.log\t#指定一个存储ansible日志的文件（默认不记录日志） inventory 文件 不分组\n1IP1 2IP2 OR 主机组\n1[HOSTGRUPXX] 2IP1 3IP2 命令 1/usr/bin/ansible　Ansibe AD-Hoc 临时命令执行工具，常用于临时命令的执行 2/usr/bin/ansible-doc Ansible 模块功能查看工具 3/usr/bin/ansible-galaxy　下载/上传优秀代码或Roles模块 的官网平台，基于网络的 4/usr/bin/ansible-playbook　Ansible 定制自动化的任务集编排工具 5/usr/bin/ansible-pull　Ansible远程执行命令的工具，拉取配置而非推送配置（使用较少，海量机器时使用，对运维的架构能力要求较高） 6/usr/bin/ansible-vault　Ansible 文件加密工具 7/usr/bin/ansible-console　Ansible基于Linux Consoble界面可与用户交互的命令执行工具 8 9其中，我们比较常用的是/usr/bin/ansible和/usr/bin/ansible-playbook。 例子 这个例子非常的简单，就拷贝ssl证书和nginx配置文件到nginx目录下面，然后启动nginx\n命令\n1ansible-playbook -u root -i myinventory --private-key ${var.ssh_key_private} -T 300 provision.yml myinventory 文件\n1[hostgroup] 2192.168.25.10 3192.168.25.11 provision.yml 文件\n1--- 2 - hosts: docker 3 remote_user: root 4 become: yes 5 become_method: sudo 6 vars: 7 8 tasks: 9 - name: mkdir 10 shell: | 11 rm -rf /opt/cert/hoyimall 12 rm -rf /etc/nginx/nginx.conf 13 mkdir -p /opt/cert/xxx 14 mkdir -p /opt/nginx/logs 15 - name: copy nginx conf to remote 16 copy: 17 src: /opt/nginx_test/xxx/nginx.conf 18 dest: /etc/nginx 19 - name: copy key to remote 20 copy: 21 src: /opt/cert/xxx/5529587__xxx.com.key 22 dest: /opt/cert/xxx 23 - name: copy pem to remote 24 copy: 25 src: /opt/cert/xxx/5529587__xxx.com.pem 26 dest: /opt/cert/xxx 27 - name: restart 28 shell: 29 systemctl restart nginx shell/copy 就是ansible 的module\n总结 1: 优势比我们自己写shell更加简洁和方便,ansible提供了非常多的模块帮助我们不用再写shell 2: 对用户和主机组的管理非常简单 3: 不需要在客户端安装agent,所有的操作就是基于SSH 4: ansible tower这样的可视化后台的支持,非常简洁 ","link":"https://www.airplanecraft.com/zh/post/ansible-devops-tools/","section":"post","tags":["devops","ansible"],"title":"Ansible简介"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/devops/","section":"tags","tags":null,"title":"Devops"},{"body":"文件最大打开数 如果服务器提供TCP服务（TCP层或者HTTP层），在并发访问量持续很高时，容易产生too many open files错误。这时查看netstat可以发现很多TIME_WAIT状态的链接，这说明大量链接处于半开状态，已经完成了请求响应，然后进行下一步操作，如果句柄数(文件打开数)超过了阈值，那就只能等待或者出错 解决方案 系统内核的修改\n1cat /proc/sys/fs/file-max 2 3sysctl -a 4 5sysctl -p 每个用户级别的修改\n1ulimit -n 1024000 (临时修改) 2vim /etc/security/limits.conf 3 4* soft nofile 2048 5 6* hard nofile 2048 如果阿里云或者aws云里面的centos都是被优化过的，默认的1024都被修改成了65536了，所以对于大部分人来说足够用了\n","link":"https://www.airplanecraft.com/zh/post/linux-file-max-open/","section":"post","tags":["linux","maxfileopen"],"title":"linux最大文件打开数"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/maxfileopen/","section":"tags","tags":null,"title":"Maxfileopen"},{"body":"linux tree command Centos 是默认不带tree 命令的，如果要使用首先要install tree command 1yum install -y tree 使用tree 显示目录的深度为2级 1 tree -L 2 2. 3├── easy-rsa-old-2.3.3 4│ ├── configure.ac 5│ ├── COPYING 6│ ├── COPYRIGHT.GPL 7│ ├── distro 8│ ├── doc 9│ ├── easy-rsa 10│ └── Makefile.am 11├── frgs.log 12├── frp_0.32.1_linux_amd64 13│ ├── frgs.log 14│ ├── frpc 15│ ├── frpc_full.ini 16│ ├── frpc.ini 17│ ├── frps 18│ ├── frps_full.ini 19│ ├── frps.ini 20│ ├── frps.log 21│ ├── LICENSE 22│ ├── nohup.out 23│ └── systemd 24├── frp_0.32.1_linux_amd64.tar.gz ","link":"https://www.airplanecraft.com/zh/post/linux-tree/","section":"post","tags":["linux","lvm"],"title":"linux的tree命令"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/lvm/","section":"tags","tags":null,"title":"Lvm"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/vpn/","section":"tags","tags":null,"title":"Vpn"},{"body":"pptp 安装 yum install ppp pptp pptp-setup -y 创建 链接文件 /etc/ppp/peers/pptp 1 pty \u0026#34;pptp 039.9966.org --nolaunchpppd --debug\u0026#34; 2 name hk789 3 password ff800800 4 remotename PPTP 5 require-mppe-128 6 require-mschap-v2 7 refuse-eap 8 refuse-pap 9 refuse-chap 10 refuse-mschap 11 noauth 12 debug 13 persist 14 maxfail 0 15 defaultroute 16 #replacedefaultroute 17 #usepeerdns 执行命令 1 modprobe nf_conntrack_pptp 2 pppd call pptp ","link":"https://www.airplanecraft.com/zh/post/pptp-client/","section":"post","tags":["vpn","linux"],"title":"vpn客户端工具pptp介绍"},{"body":" 1[root@localhost ~]# df -H 2Filesystem Size Used Avail Use% Mounted on 3devtmpfs 17G 0 17G 0% /dev 4tmpfs 17G 0 17G 0% /dev/shm 5tmpfs 17G 9.1M 17G 1% /run 6tmpfs 17G 0 17G 0% /sys/fs/cgroup 7/dev/mapper/centos-root 54G 1.4G 53G 3% / 8/dev/sda2 1.1G 148M 916M 14% /boot 9/dev/sda1 210M 12M 198M 6% /boot/efi 10/dev/mapper/centos-home 12T 35M 12T 1% /home 11tmpfs 3.4G 0 3.4G 0% /run/user/0 分区不够合理 root 下面空间不够用\n1umount /home 2 3lvreduce -L 5T /dev/mapper/centos-home 4 5lvextend -L +5T /dev/mapper/centos-root 6 7xfs_growfs /dev/mapper/centos-root 8 9mkfs.xfs -f /dev/mapper/centos-home 10 11mount /home ","link":"https://www.airplanecraft.com/zh/post/linux-lvm-resize/","section":"post","tags":["linux","lvm"],"title":"lvm空间扩容"},{"body":"centos ssh login 免密码登录 修改linux主机sshd配置\n1vi /etc/ssh/sshd_config 2 RSAAuthentication yes 3 PubkeyAuthentication yes 4 AuthorizedKeysFile .ssh/authorized_keys 5/sbin/service sshd restart 生成密钥,包括 id_rsa私钥，id_rsa.pub公钥\n1 ssh-keygen -t rsa 更改文件名\n1 mv ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys 拷贝id_rsa文件内容到任何一个linux客户端,remote.pem,使用ssh登录\n1ssh -i remote.pem user@host ","link":"https://www.airplanecraft.com/zh/post/linux-key-gen/","section":"post","tags":["linux","sshkey"],"title":"centos使用ssh-key免密登录"},{"body":"","link":"https://www.airplanecraft.com/zh/tags/sshkey/","section":"tags","tags":null,"title":"Sshkey"},{"body":"相关链接 https://blog.csdn.net/lingbo229/article/details/82586822 https://www.iteye.com/blog/kakaluyi-774227 https://blog.csdn.net/qq_44831907/article/details/113342146 https://www.cnblogs.com/jpfss/p/11050411.html ","link":"https://www.airplanecraft.com/zh/post/jvm-optimize-related/","section":"post","tags":["aws","cdk"],"title":"jvm参数优化"},{"body":"什么是CI和CD CI(Continuous integration，中文意思是持续集成)/ CD(Continuous Delivery， 中文意思持续交付) CI/CD 是一种通过在应用开发阶段引入自动化来频繁向客户交付应用的方法。 CI/CD 的核心概念是持续集成、持续交付和持续部署。它是作为一个面向开发和运营团队的解决方案，主要针对在集成新代码时所引发的问题（也称为：“集成地狱”）。 CI/CD 可让持续自动化和持续监控贯穿于应用的整个生命周期（从集成和测试阶段，到交付和部署）。 jenkins简介 Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行（这个比较抽象，暂且写上，不做解释）。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。可集成使用版本控制工具有SVN、GIT，以及构建工具有Maven、Ant、Gradle。 特点 易于安装-只要把jenkins.war部署到servlet容器，不需要数据库支持 易于配置-所有配置都是通过其提供的web界面实现； 有大量的插件可以配置使用,比如email通知结果,git,maven 附带了很多其他的功能比如用户密码的加密 可以支持备份,迁移,升级 还可以通过完全编程的方式Jenkinsfile,devops来实现纯代码的方式完全CI/CD 可以支持分布式的多个slave agent 可以保存每次build日志方便查阅 CI/CD 优势 1. 持续集成中的任何一个环节都是自动完成的，无需太多的人工干预，有利于减少重复过程以节省时间、费用和工作量 2. 持续集成保障了每个时间点上团队成员提交的代码是能成功集成的。换言之，任何时间点都能第一时间发现软件的集成问题，使任意时间发布可部署的软件成为了可能 3. CI/CD 具有高度的自动化 就是减少人工操作的事务，可以通过预先准备的脚本一次性运行，是我们内部或者外部用户，得到用户对于新版本的快速反馈，并且可以迅速处理任何明显的缺陷. 放几张图 ","link":"https://www.airplanecraft.com/zh/post/jenkins-devops-tools/","section":"post","tags":["devops","jenkins"],"title":"jenkins简介"},{"body":"","link":"https://www.airplanecraft.com/zh/series/","section":"series","tags":null,"title":"Series"}]