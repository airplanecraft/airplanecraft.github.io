<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kafka on Airplane Craft</title>
    <link>http://localhost:1313/en/categories/kafka/</link>
    <description>Recent content in Kafka on Airplane Craft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jul 2020 11:40:37 +0800</lastBuildDate><atom:link href="http://localhost:1313/en/categories/kafka/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>kafka cluster的搭建</title>
      <link>http://localhost:1313/en/posts/kafka-cluster-setup/</link>
      <pubDate>Thu, 30 Jul 2020 11:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/kafka-cluster-setup/</guid>
      <description>
        
          
            &lt;h2 id=&#34;本文使用工具或者服务&#34;&gt;本文使用工具或者服务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Java 8&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://archive.apache.org/dist/kafka/3.0.0/kafka_2.13-3.0.0.tgz&#34;&gt;https://archive.apache.org/dist/kafka/3.0.0/kafka_2.13-3.0.0.tgz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz&#34;&gt;https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Centos8.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;zookeeper-簡介&#34;&gt;Zookeeper 簡介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ZooKeeper是一个分布式协调服务，它的主要作用是为分布式系统提供一致性服务，提供的功能包括：配置维护、命名服务、分布式同步、组服务等。Kafka的运行依赖ZooKeeper。
&lt;ol&gt;
&lt;li&gt;Broker注册&lt;/li&gt;
&lt;li&gt;Topic注册&lt;/li&gt;
&lt;li&gt;生产者负载均衡&lt;/li&gt;
&lt;li&gt;消费者负载均衡&lt;/li&gt;
&lt;li&gt;消费者注册&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;kafka-簡介&#34;&gt;Kafka 簡介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者在网站中的所有动作流数据。
&lt;ol&gt;
&lt;li&gt;Kafka  是一种高吞吐量的分布式发布订阅消息系统，有如下特性：&lt;/li&gt;
&lt;li&gt;通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。&lt;/li&gt;
&lt;li&gt;高吞吐量 即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。&lt;/li&gt;
&lt;li&gt;支持通过Kafka服务器和消费机集群来分区消息。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;zookeeper-與kafka之間的關係&#34;&gt;zookeeper 與kafka之間的關係&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ZooKeeper用于分布式系统的协调，Kafka使用ZooKeeper也是基于相同的原因。ZooKeeper主要用来协调Kafka的各个broker，不仅可以实现broker的负载均衡，而且当增加了broker或者某个broker故障了，ZooKeeper将会通知生产者和消费者，这样可以保证整个系统正常运转。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安裝zooker和kafka-之前首先要做系統的優化和配置&#34;&gt;安裝zooker和kafka 之前首先要做系統的優化和配置&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;文件句柄數的調整&lt;/li&gt;
&lt;li&gt;oracle Jre8 安裝&lt;/li&gt;
&lt;li&gt;磁盤的分區和挂載點必須滿足kafka大數量的存儲xfs分區&lt;/li&gt;
&lt;li&gt;關閉selinux&lt;/li&gt;
&lt;li&gt;防火墻暫時關閉(後面看可以統一規劃端口)&lt;/li&gt;
&lt;li&gt;創建非root的kafka管理用戶並添加sudoer權限&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;注意事項&#34;&gt;注意事項&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;kafka是一個分佈式的消息系統，我們會臨時存儲消息，如果存儲消息的時間長，那麽需要大空間，所以分區的時候已經要注意，就是安裝kafka的時候存儲一定要挂載到大的硬盤空間上&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;zookeeper-配置&#34;&gt;Zookeeper 配置&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# The number of milliseconds of each tick
tickTime=2000
# The number of ticks that the initial
# synchronization phase can take
initLimit=10
# The number of ticks that can pass between
# sending a request and getting an acknowledgement
syncLimit=5
# the directory where the snapshot is stored.
# do not use /tmp for storage, /tmp here is just
# example sakes.
dataDir=/opt/conf
# /opt/conf/myid #myid文件，里面的内容为数字，用于标识主机，如果这个文件没有的话，zookeeper无法启动
# the port at which the clients will connect
clientPort=2181
# the maximum number of client connections.
# increase this if you need to handle more clients
#maxClientCnxns=60
#
# Be sure to read the maintenance section of the
# administrator guide before turning on autopurge.
#
# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance
#
# The number of snapshots to retain in dataDir
#autopurge.snapRetainCount=3
# Purge task interval in hours
# Set to &amp;#34;0&amp;#34; to disable auto purge feature
#autopurge.purgeInterval=1

## Metrics Providers
#
# https://prometheus.io Metrics Exporter
#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider
#metricsProvider.httpPort=7000
#metricsProvider.exportJvmInfo=true
server.1=192.168.25.231:12888:13888
server.2=192.168.25.232:12888:13888
server.3=192.168.25.233:12888:13888
server.4=192.168.25.234:12888:13888
server.5=192.168.25.235:12888:13888

#配置参数说明：
tickTime:客户端与服务器或者服务器与服务器之间每个tickTime时间就会发送一次心跳。通过心跳不仅能够用来监听机器的工作状态，还可以通过心跳来控制Flower跟Leader的通信时间，默认2秒
initLimit：集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）。
syncLimit：集群中flower服务器（F）跟leader（L）服务器之间的请求和答应最多能容忍的心跳数。   
dataDir：该属性对应的目录是用来存放myid信息跟一些版本，日志，跟服务器唯一的ID信息等。
clientPort：客户端连接的接口，客户端连接zookeeper服务器的端口，zookeeper会监听这个端口，接收客户端的请求访问！这个端口默认是2181。
service.N=YYY:A:B
N：代表服务器编号（也就是myid里面的值）
YYY：服务器地址
A：表示 Flower 跟 Leader的通信端口，简称服务端内部通信的端口（默认2888),我们使用12888
B：表示 是选举端口（默认是3888),我们使用
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;kafka的配置&#34;&gt;Kafka的配置&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the &amp;#34;License&amp;#34;); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=1

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
listeners=PLAINTEXT://192.168.25.231:9092

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for &amp;#34;listeners&amp;#34; if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs=/kafka-data/kafka-logs

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics &amp;#34;__consumer_offsets&amp;#34; and &amp;#34;__transaction_state&amp;#34;
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. &amp;#34;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&amp;#34;.
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=192.168.25.231:2181,192.168.25.232:2181,192.168.25.233:2181,192.168.25.234:2181,192.168.25.235:2181

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=18000



############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装kafka的ui-监控&#34;&gt;安装kafka的ui 监控&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -p 8080:8080 \
	-e KAFKA_CLUSTERS_0_NAME=local \
	-e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=192.168.25.231:9092,192.168.25.232:9092,192.168.25.231:9092,192.168.25.233:9092,192.168.25.234:9092,192.168.25.235:9092 \
	-d provectuslabs/kafka-ui:latest 
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;访问http://ip:8080/ 就可以看到kafka管理页面&lt;/li&gt;
&lt;/ol&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
