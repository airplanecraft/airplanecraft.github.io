<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloud on Airplane Craft</title>
    <link>http://localhost:1313/en/categories/cloud/</link>
    <description>Recent content in Cloud on Airplane Craft</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Feb 2021 10:00:30 +0800</lastBuildDate><atom:link href="http://localhost:1313/en/categories/cloud/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>本地数据中心和云的对比</title>
      <link>http://localhost:1313/en/posts/local-datacenter-vs-cloud/</link>
      <pubDate>Tue, 02 Feb 2021 10:00:30 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/local-datacenter-vs-cloud/</guid>
      <description>
        
          
            &lt;h2 id=&#34;本文简介&#34;&gt;本文简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本来主要介绍云和本地的数据中心的对比，主要用阿里云来对比，作为aws和alicloud的认证工程师，我对云上的和自有数据中心架构系统做个详细的对比，本文，仅仅用alicloud&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本系统简介&#34;&gt;本系统简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本系统主要是做美股和港股的数据处理，美股数据来源是polygon（基于websocket数据推送和restful查询api）,港股的数据来源是港交所（UDP广播）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本系统功能：接收美股和港股的数据，并作本地的消息存储，用消息中间件来存储交易所数据，然用以一部分数据用来做大数据实时计算，一部数据用来做持久化的存储&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;本系统的架构图&#34;&gt;本系统的架构图&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;架構圖&#34;
      
        class=&#34;image_figure image_internal image_unprocessed&#34;
        src=&#34;http://localhost:1313/images/photo_2022-02-05_22-04-06.jpg&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;本系統本地使用硬件&#34;&gt;本系統本地使用硬件&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;軟件&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;狀態&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;服務器&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;數量&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;存儲&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;數量&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Kafka&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;cluster&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;centos8.2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ssd&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4 raid5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Elatic search&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;cluster&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;centos8.2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ssd&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4 raid5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Flink&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;cluster&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;centos8.2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ssd&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4 raid5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Polygon subscriber&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;single&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;centos8.2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ssd&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4 raid5&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;APP&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;single&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;centos8.2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;ssd&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4 raid5&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;本地數據中心存在的主要問題&#34;&gt;本地數據中心存在的主要問題&lt;/h2&gt;
&lt;h3 id=&#34;硬件的問題&#34;&gt;硬件的問題&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; 1. 硬盤如果寫滿，可擴展性非常的差，或者説磁盤出現損壞，需要更新磁盤都會有數據丟失的風險，并且服務會中斷
 2. 網絡設備沒有redundency
 3. 如果内存不夠用都需要定制内存，然後安裝，需要消耗大量的人力物力
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;軟件的問題&#34;&gt;軟件的問題&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; 1. centos的系統的優化，包括swap,硬盤的分區，文件句柄數等等
 2. kafka flink elasticsearch 等軟件的優化需要非常專業的知識
 3. 如果要遷移kafka 或者es裏面的數據只能停止服務，然後進行數據的遷移
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;如果選擇阿里雲或者aws這裏拿阿里雲來説&#34;&gt;如果選擇阿里雲或者aws（這裏拿阿里雲來説）&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. 定制vpc網絡，阿里雲網絡外網基於bgp的，vpc本身就保障HA，redundency.
2. ECS的磁盤是scalable的，多大都是可以彈性擴展
3. network bandwith 可以 custome，多大的可以
4. ecs 的 cpu+mem 可以隨時升級
5. 不需要搭建kafka es 和flink 軟件cluster平臺，阿里雲有相關的服務，都是優化過的paas，性能非常的高，還可以按需隨時升級
6 .數據不用擔心丟失和遷移困難
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;總結&#34;&gt;總結&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. 作爲云架構師，很不幸的是我目前既要寫大量的code，還要管理綫下30多台服務器，花費了大量的時間去處理很多問題
2. 下一步要遷移服務到aws或者阿里雲上面
&lt;/code&gt;&lt;/pre&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>SAA-CO1考试之路</title>
      <link>http://localhost:1313/en/posts/aws-saa-pass/</link>
      <pubDate>Thu, 03 Oct 2019 10:30:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-saa-pass/</guid>
      <description>
        
          
            &lt;h2 id=&#34;考试心得&#34;&gt;考试心得&lt;/h2&gt;
&lt;h3 id=&#34;考试成绩&#34;&gt;考试成绩&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;852&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;工作用到aws不到1年&lt;/li&gt;
&lt;li&gt;有多年java开发经验&lt;/li&gt;
&lt;li&gt;linux管理员,持有RHCE&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;准备周期&#34;&gt;准备周期&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;3周從準備到考試&lt;/li&gt;
&lt;li&gt;每天8-12小时&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;做过实验的知识点列表&#34;&gt;做过实验的知识点列表&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;VPN endpoint/nat gateway/internet gateway/vpn/subnet/ACL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RDS/Aurora/Reshift/Aurora/DynamoDB (snaphost copy az or cross region,ebs type change ,autoscaling ,entryption ,backup/replica ,Multi A-z,read/write unit)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cloudfront (OAI,SSL certificat ,validation TTL ,pre-signed URL)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S3 (static websit ,ACL ,bucket policy,lifecyle)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ec2 (Cloudwath agent install,ebs mount/unmount,snapshot,elasticip binding)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cloud53 (A/alias .routing policy)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Athena on S3 SQL QUERY&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kenisis stream /firehouse/analytic&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cloudwatch custom metric(ec2 momory/disk usage),alarm config -&amp;gt;sns/log export to s3&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>aws sap passed</title>
      <link>http://localhost:1313/en/posts/aws-sap-passed/</link>
      <pubDate>Wed, 02 Oct 2019 10:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-sap-passed/</guid>
      <description>
        
          
            &lt;ul&gt;
&lt;li&gt;9.27 号考试通过了SAP（913分），心里终于落下一块石头.从开始准备到最后通过我用了数个星期的时间，平均每天超过10小时的准备.sap的难度比saa高不是一个级别的，涉及了大量的新的知识点.不仅仅需要知道每个知识点，还需要动手去实践，为此我写了20个几个blog都是尝试这里面的知识点，实际我做过的实验大概有40多个，几乎每天要做一个实验，因为时间的问题，没有把其他的整理到blog上来，也是一个遗憾，后面我会慢慢补充上来。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;考前准备&#34;&gt;考前准备 &lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;aws 账号 ：做实验用&lt;/li&gt;
&lt;li&gt;最好有一些linux/network/dev experience&lt;/li&gt;
&lt;li&gt;最好熟悉一门编程语言,java/.net/python/ruby/go/nodejs&lt;/li&gt;
&lt;li&gt;最好熟悉json/yaml&lt;/li&gt;
&lt;li&gt;如果考过saa最好了，saa是非常基础的aws认证&lt;/li&gt;
&lt;li&gt;如果考过saa，最好保证300小时以上的学习时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;考试内容准备&#34;&gt;考试内容准备&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;印度小哥的一个考试心得基本上面面俱到了 &lt;a href=&#34;https://www.linkedin.com/pulse/preparing-aws-certified-solutions-architect-2019-sap-c01-agarwal/&#34;&gt;https://www.linkedin.com/pulse/preparing-aws-certified-solutions-architect-2019-sap-c01-agarwal/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bilibili 上印度小哥sap视频 &lt;a href=&#34;https://www.bilibili.com/video/av66737718?from=search&amp;seid=1011549087963751322&#34;&gt;https://www.bilibili.com/video/av66737718?from=search&amp;amp;seid=1011549087963751322&lt;/a&gt; 如果听的懂建议听听&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bilibili 上cloud guru的sap视频 &lt;a href=&#34;https://www.bilibili.com/video/av39285864?from=search&amp;seid=1657200592137432769&#34;&gt;https://www.bilibili.com/video/av39285864?from=search&amp;amp;seid=1657200592137432769&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aws 本上的get-started &lt;a href=&#34;https://aws.amazon.com/getting-started/&#34;&gt;https://aws.amazon.com/getting-started/&lt;/a&gt; 建议尝试里面大部分的实验内容，只有实验的多了才能够理解每个服务以及服务于服务之间的关联&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>aws x-ray</title>
      <link>http://localhost:1313/en/posts/aws-x-ray/</link>
      <pubDate>Thu, 12 Sep 2019 12:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-x-ray/</guid>
      <description>
        
          
            &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AWS X-Ray 可以帮助开发人员分析与调试分布式生产应用程序，例如使用微服务架构构建的应用程序。借助 X-Ray，您可以了解应用程序及其底层服务的执行方式，从而识别和排查导致性能问题和错误的根本原因。X-Ray 可在请求通过应用程序时提供请求的端到端视图，并展示应用程序底层组件的映射。您可以使用 X-Ray 分析开发和生产中的应用程序，从简单的三层应用程序到包含上千种服务的复杂微服务应用程序。&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;pic&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;1462&#34;
        height=&#34;488&#34;
        src=&#34;http://localhost:1313/product-page-diagram_AWS-X-Ray_how-it-works.2922edd4bfe011e997dbf32fdf8bd520bcbc85fb_9836458994471346904.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;簡單來說，xray是用來追踪服務與服務之間鏈條，每個服務之間的請求內容，時間，參數等信息&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;用api-gateway-和-lambda-實驗&#34;&gt;用api-gateway 和 lambda 實驗&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本文用到的例子是前面的博文: &lt;a href=&#34;http://www.clouda3.com/post/aws-cloudformation-lambda-apigateway/&#34;&gt;Aws cloudformation deploy lambda and apigateway&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只需要額外做以下兩步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開啟api-gateway的x-ray,api gateway console-&amp;gt; apis-&amp;gt;spring-boot-lambda-&amp;gt;stages-&amp;gt;Prod-&amp;gt;logs/tracing-&amp;gt;enable x-ray tracing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;開啟lambda的x-ray,functions-&amp;gt;spring-boot-lambda-LambdaSpringBootFunction-7CK2QHXPRA6F-&amp;gt;aws x-ray:active tracing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;test x-ray:fire a request to api gateway&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;open x-ray console:service map:you will see a picture like below:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;x-ray map&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;925&#34;
        height=&#34;418&#34;
        src=&#34;http://localhost:1313/0%2AJm9tsR7HNq1Ew2-C_14389612573526594243.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>accelerating aws migration</title>
      <link>http://localhost:1313/en/posts/aws-migration/</link>
      <pubDate>Tue, 10 Sep 2019 14:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-migration/</guid>
      <description>
        
          
            &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;aws migration from OP to cloud這是aws最注重的部分，關於遷移技術，aws提供了各種各樣的工具，比如遷移數據庫(sts,dms),遷移workload（aws server migration service）,協助你計劃遷移收集信息的工具(aws application discovery service),track遷移進程的工具(migration hub),遷移海量數據的aws snowball or snowmobile,s3 acceleration, 加速數據傳輸的 dierct connect等等，從網絡到數據庫到文件，給你武裝到牙齒&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;https://miro.medium.com/max/926/0*SLKhR418WaZctIPI.png&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;926&#34;
        height=&#34;373&#34;
        src=&#34;http://localhost:1313/0%2ASLKhR418WaZctIPI_12814727873364100845.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以下是兩篇關於數據遷移的好文&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@awsontop/aws-cloud-migration-strategy-and-process-6ed38479735a&#34;&gt;https://medium.com/@awsontop/aws-cloud-migration-strategy-and-process-6ed38479735a&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/AmazonWebServices/accelerating-your-portfolio-migration-to-aws-using-aws-migration-hub-ent321-reinvent-2017&#34;&gt;https://www.slideshare.net/AmazonWebServices/accelerating-your-portfolio-migration-to-aws-using-aws-migration-hub-ent321-reinvent-2017&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>aws online analytical processing (or OLAP)</title>
      <link>http://localhost:1313/en/posts/aws-glue-athena-quicksight/</link>
      <pubDate>Tue, 10 Sep 2019 14:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-glue-athena-quicksight/</guid>
      <description>
        
          
            &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OLAP在線分析工具越來越來成熟，從開始的數據倉庫，到強大的elk，再到雲，比如aws的 gaq(glue-athena-quicksight)，當然aws也有elk在線服務&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gaq vs elk,實際上是一類的產品，glue提供了crawler去爬去數據，類似 logstash，athena提供查詢工具類似elasticsearch ,quicksight 跟 kibana一樣ui.gaq是aws雲端的服務，沒有辦法部署在線下，elk既可以部署在op也可以部署在cloud上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;這篇文章來自 &lt;a href=&#34;https://medium.com/localz-engineering/serverless-big-data-start-here-aws-glue-athena-quicksite-4c70ecac9fe3&#34;&gt;https://medium.com/localz-engineering/serverless-big-data-start-here-aws-glue-athena-quicksite-4c70ecac9fe3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有一個圖片 &lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;https://miro.medium.com/max/1171/1*MiZKdlJBIC8nTTeEsPomLQ.png&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;1171&#34;
        height=&#34;750&#34;
        src=&#34;http://localhost:1313/1%2AMiZKdlJBIC8nTTeEsPomLQ_1549877427038419921.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;實驗&#34;&gt;實驗 &lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cloudwatch agent 或者 application discovery agent 到ec2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cloud watch agent 或者 discovery agent  sync log 到 s3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;glue裡面創建crawler ，指定s3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;glue裡面創建database 和table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;athena 寫sql語句查詢想要的數據&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果想要類似kinana那樣可視化的工具，那麼需要付費quicksight&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Difference between user pool and identity pool(Federated Identities)</title>
      <link>http://localhost:1313/en/posts/aws-difference-between-userpool-and-identitypool/</link>
      <pubDate>Fri, 06 Sep 2019 12:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-difference-between-userpool-and-identitypool/</guid>
      <description>
        
          
            &lt;ul&gt;
&lt;li&gt;剛開始使用cognito服務的時候特別讓人困惑，有user pool 和 identity pool(Federated Identities)，user pool裡面還有federation，federation裡面有identity provider.&lt;/li&gt;
&lt;li&gt;identity pool 裡面有autenticated provider裡面也有user pool ID!&lt;/li&gt;
&lt;li&gt;納尼?這是什麼鬼?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;lets-forget-the-connection-between-them&#34;&gt;let&amp;rsquo;s forget the connection between them&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;user pool 簡單來說就是提供一個用戶驗證的服務，比如用戶自定義用戶，用fb,GOOGLE，twitter等賬戶登錄，登錄後獲取一個token，用戶的每次請求帶著這個token就可以了，用戶登錄後獲取的是你個人應用的resource! ,比如你自己做了一個網站，登錄後可以管理自己用戶，權限，圖片等等，你有權限去訪問這些資源&lt;/li&gt;
&lt;li&gt;identity pool 也是提供一個用戶認證的服務，用戶可以在裡面設置aws 的role，也就說用戶登錄後得到的aws的resource 的訪問權限，比如你可以訪問s3.只是這個登錄可以跟 user pool提供的服務去綁定，也可以不用user pool的服務直接用 identity pool裡面的provider去對接，也就說，如果你有google的id也可以登錄後獲取aws resource 資源的訪問權限，這個是登錄後aws通過sts生成臨時credential 來做到的&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;summary&#34;&gt;summary &lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;user pool 只是負責authentication，沒有authorization，即便有也是用戶本身應用的服務&lt;/li&gt;
&lt;li&gt;identity pool，既可以authentication，又可以authoriztion，授權的是aws的resource&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;上幾張圖&#34;&gt;上幾張圖 &lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;https://docs.aws.amazon.com/cognito/latest/developerguide/images/amazon-cognito-ext-auth-basic-flow.png&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;720&#34;
        height=&#34;461&#34;
        src=&#34;http://localhost:1313/amazon-cognito-ext-auth-basic-flow_7254584813439612501.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;https://gorillalogic.com/wp-content/uploads/2018/09/Sign-Up-Implementation-7&amp;amp;amp;ndash;768x312.png&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;768&#34;
        height=&#34;312&#34;
        src=&#34;http://localhost:1313/Sign-Up-Implementation-7--768x312_15683792732263294091.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;https://d33wubrfki0l68.cloudfront.net/4602d3b127c9b3f1dbe49f9fc77e8d8a4aff20a6/9c3a1/assets/cognito-user-pool-vs-identity-pool.png&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;1368&#34;
        height=&#34;1344&#34;
        src=&#34;http://localhost:1313/cognito-user-pool-vs-identity-pool_7921973143523750630.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;幾個非常有價值的link&#34;&gt;幾個非常有價值的link&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://serverless-stack.com/chapters/cognito-user-pool-vs-identity-pool.html&#34;&gt;https://serverless-stack.com/chapters/cognito-user-pool-vs-identity-pool.html&lt;/a&gt;
&lt;a href=&#34;https://gorillalogic.com/blog/java-integration-with-amazon-cognito/&#34;&gt;https://gorillalogic.com/blog/java-integration-with-amazon-cognito/&lt;/a&gt;&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Aws cognito sample</title>
      <link>http://localhost:1313/en/posts/aws-cognito-sample/</link>
      <pubDate>Fri, 06 Sep 2019 10:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-cognito-sample/</guid>
      <description>
        
          
            &lt;ul&gt;
&lt;li&gt;这是一个aws官方的文档，我认为最好的cognito的例子，如果理解这个sample，那么cognito就没有任何问题&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/getting-started/projects/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/&#34;&gt;https://aws.amazon.com/getting-started/projects/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;详解&#34;&gt;详解&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;廢話少說直接上圖&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;https://d1.awsstatic.com/Test%20Images/Kate%20Test%20Images/Serverless_Web_App_LP_assets-16.7cbed9781201a79b9efa761807c4312e68b23485.png&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;901&#34;
        height=&#34;501&#34;
        src=&#34;http://localhost:1313/Serverless_Web_App_LP_assets-16.7cbed9781201a79b9efa761807c4312e68b23485_10296272764832932471.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;程序組成部分&#34;&gt;程序組成部分&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;- 靜態的代碼存放s3
- 動態的代碼存放lambda
- 代碼的訪問入口通過api-gateway
- 數據的存放時dynamoDB(程序登錄後有個點擊頁面位置生成的數據,與用戶驗證沒有太多關係)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;cognito-user-pool-在user-login-流程&#34;&gt;Cognito user pool 在user login 流程&lt;/h4&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;https://docs.aws.amazon.com/cognito/latest/developerguide/images/scenario-authentication-cup.png&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;782&#34;
        height=&#34;201&#34;
        src=&#34;http://localhost:1313/scenario-authentication-cup_7617407613548709477.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- 用戶用用戶名+密碼(或mfa，這取決於cognito user pool的配置)請求登錄
- aws cognito user pool去驗證用戶
- 如果用戶通過驗證返回一個token
- 下一次用戶用這個token來請求訪問
- aws cognito user pool 可以基本满足用户登录，如果涉及到权限可以跟自己数据进行绑定

- 这个例子里面特别要注意的是，api gateway 直接设置了 Authorizers ：里面可以指定cognito 来对用戶進行驗證，不用額外寫程序來驗證，也就說每次訪問一個服務/ride.html,api-getway通過Authorizers直接去用cognito去驗證用戶的token

- 這個例子分了兩個步驟，第一個步驟是直接登錄，登錄後獲得一個toke
- 第二步驟是用api-gateway 自動驗證用戶的登錄，也就是authentication
&lt;/code&gt;&lt;/pre&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Aws cloudformation deploy lambda and apigateway</title>
      <link>http://localhost:1313/en/posts/aws-cloudformation-lambda-apigateway/</link>
      <pubDate>Thu, 05 Sep 2019 12:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-cloudformation-lambda-apigateway/</guid>
      <description>
        
          
            &lt;ul&gt;
&lt;li&gt;用Cloudformation 来部署 java 的lambda 和api gateway,这里要用到spring-boot写java 代码，需要用到s3，存放lambda代码，需要创建lambda function和api agetway，还需要用到sam&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aws-lambda-with-spring-boot&#34;&gt;Aws lambda with Spring Boot&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本文用到的git代码来自 &lt;a href=&#34;https://github.com/gemerick/spring-boot-lambda&#34;&gt;https://github.com/gemerick/spring-boot-lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本文的内容来自 &lt;a href=&#34;https://keyholesoftware.com/2018/04/26/aws-lambda-with-spring-boot/&#34;&gt;https://keyholesoftware.com/2018/04/26/aws-lambda-with-spring-boot/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;本文的步骤&#34;&gt;本文的步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;安装sam&lt;/li&gt;
&lt;li&gt;git 克隆现有代码&lt;/li&gt;
&lt;li&gt;创建s3 bucket&lt;/li&gt;
&lt;li&gt;用cloudformation 上传 代码&lt;/li&gt;
&lt;li&gt;用cloudformation 部署&lt;/li&gt;
&lt;li&gt;测试代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;安装sam&#34;&gt;安装sam&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip3 install --user aws-sam-cli
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;git-克隆代码&#34;&gt;git 克隆代码&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/gemerick/spring-boot-lambda -b lambda

mvn clean package
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;创建s3-bucket&#34;&gt;创建s3 bucket&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;aws s3 mb s3://spring-boot-lambda-20100905
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;拷贝jar-到s3-更新sam的template&#34;&gt;拷贝jar 到S3 ，更新sam的template&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;aws cloudformation package --template-file sam.yaml --output-template-file target/output-sam.yaml --s3-bucket spring-boot-lambda-20100905
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;deploy-a-cloudformation-stack-from-the-sam-template&#34;&gt;Deploy a Cloudformation stack from the SAM template&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;aws cloudformation deploy --template-file target/output-sam.yaml --stack-name spring-boot-lambda --capabilities CAPABILITY_IAM

aws cloudformation describe-stacks --stack-name spring-boot-lambda
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;测试部署结果&#34;&gt;测试部署结果&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl   https://xxx.execute-api.ap-southeast-1.amazonaws.com/Prod/languages

[{&amp;#34;name&amp;#34;:&amp;#34;node&amp;#34;},{&amp;#34;name&amp;#34;:&amp;#34;java&amp;#34;},{&amp;#34;name&amp;#34;:&amp;#34;python&amp;#34;}]
&lt;/code&gt;&lt;/pre&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>Aws ecs tutorial</title>
      <link>http://localhost:1313/en/posts/aws-ecs-tutorial/</link>
      <pubDate>Wed, 04 Sep 2019 09:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-ecs-tutorial/</guid>
      <description>
        
          
            &lt;ul&gt;
&lt;li&gt;Aws ecs 简单来说就是host docker container，跟K8S类似，如果用过k8s，那么ecs非常的好理解&lt;/li&gt;
&lt;li&gt;本文主要按照 &lt;a href=&#34;https://medium.com/boltops/gentle-introduction-to-how-aws-ecs-works-with-example-tutorial-cea3d27ce63d&#34;&gt;Gentle Introduction to How AWS ECS Works with Example Tutorial&lt;/a&gt; 搭建&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关于ecs的专业的词汇&#34;&gt;关于ECS的专业的词汇&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Task Definition ：实际就是要给launch configration,比如暴露端口号，用什么docker image，cpu 内存需要多少，运行docker 的command，环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task  ：简单来说就是一个running instance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Service ：一组task&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cluster ：一组task 跑在一个或者多个 constainer 里面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Container Instance  ：容器实例里面跑的是多个 task&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;看图&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;668&#34;
        height=&#34;254&#34;
        src=&#34;http://localhost:1313/1%2Ak29gxIwwhDaP-Ge-G-yXCQ_6496974866164419964.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;按照此图搭建一组ecs的服务&#34;&gt;按照此图搭建一组ecs的服务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建一个ecs cluster&lt;/li&gt;
&lt;li&gt;创建一个ecsServiceRole&lt;/li&gt;
&lt;li&gt;创建Task Definition&lt;/li&gt;
&lt;li&gt;创建elb和 target group&lt;/li&gt;
&lt;li&gt;创建 service，里面只有一个task&lt;/li&gt;
&lt;li&gt;检查运行情况&lt;/li&gt;
&lt;li&gt;把service里面的task 改为4&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;创建一个ecs-cluster&#34;&gt;创建一个ecs cluster&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;创建secrutiry group my-ecs-sg
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;aws ec2 create-security-group --group-name my-ecs-sg --description my-ecs-sg
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;创建ecs cluster：选择vpc subnet多个&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;创建-ecsservicerole&#34;&gt;创建 ecsServiceRole&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;attach policy ：AmazonEC2ContainerServiceRole&lt;/li&gt;
&lt;li&gt;trusted relationship：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  {
  &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
  &amp;#34;Statement&amp;#34;: [
    {
      &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
      &amp;#34;Principal&amp;#34;: {
        &amp;#34;Service&amp;#34;: &amp;#34;ecs.amazonaws.com&amp;#34;
      },
      &amp;#34;Action&amp;#34;: &amp;#34;sts:AssumeRole&amp;#34;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;创建-task-defination&#34;&gt;创建 task defination&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;task-definition.json
{
  &amp;#34;family&amp;#34;: &amp;#34;sinatra-hi&amp;#34;,
  &amp;#34;containerDefinitions&amp;#34;: [
    {
      &amp;#34;name&amp;#34;: &amp;#34;web&amp;#34;,
      &amp;#34;image&amp;#34;: &amp;#34;tongueroo/sinatra:latest&amp;#34;,
      &amp;#34;cpu&amp;#34;: 128,
      &amp;#34;memoryReservation&amp;#34;: 128,
      &amp;#34;portMappings&amp;#34;: [
        {
          &amp;#34;containerPort&amp;#34;: 4567,
          &amp;#34;protocol&amp;#34;: &amp;#34;tcp&amp;#34;
        }
      ],
      &amp;#34;command&amp;#34;: [
        &amp;#34;ruby&amp;#34;, &amp;#34;hi.rb&amp;#34;
      ],
      &amp;#34;essential&amp;#34;: true
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    aws ec2 authorize-security-group-ingress --group-name my-ecs-sg --protocol tcp --port 1-65535 --source-group my-elb-sg  --vpc-id vpc-xxxmyid
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;创建elb-和-target-group&#34;&gt;创建elb 和 target group&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;create： my-elb  with a HTTP protocol and Port 80&lt;/li&gt;
&lt;li&gt;为elb 配置 security group： my-elb-sg ，inbound allowed port 80 and source 0.0.0.0/0&lt;/li&gt;
&lt;li&gt;为my-ecs-sg 配置 inbound security group,允许来自elb的请求  aws ec2 authorize-security-group-ingress &amp;ndash;group-id sg-xxxyyy &amp;ndash;protocol tcp &amp;ndash;port 1-65535 &amp;ndash;source-group sg-xxxxx&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;创建-service&#34;&gt;创建 service&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ecs-service.json
{
  &amp;#34;cluster&amp;#34;: &amp;#34;my-cluster&amp;#34;,
  &amp;#34;serviceName&amp;#34;: &amp;#34;my-service&amp;#34;,
  &amp;#34;taskDefinition&amp;#34;: &amp;#34;sinatra-hi&amp;#34;,
  &amp;#34;loadBalancers&amp;#34;: [
      {
          &amp;#34;targetGroupArn&amp;#34;: &amp;#34;FILL-IN-YOUR-TARGET-GROUP&amp;#34;,
          &amp;#34;containerName&amp;#34;: &amp;#34;web&amp;#34;,
          &amp;#34;containerPort&amp;#34;: 4567
      }
  ],
  &amp;#34;desiredCount&amp;#34;: 1,
  &amp;#34;role&amp;#34;: &amp;#34;ecsServiceRole&amp;#34;
}

 aws ecs create-service --cli-input-json file://ecs-service.json
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;检查运行情况&#34;&gt;检查运行情况&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;找到elb的dns&lt;/li&gt;
&lt;li&gt;执行curl ：dns address&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;把service的节点扩展为4个&#34;&gt;把service的节点扩展为4个&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;找到cluster 的pulibc dns
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh -i xxx.perm cluster-public-dns-address
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;进入ecs 的container&lt;/li&gt;
&lt;li&gt;执行docker ps -a 发现有4个容器在running&lt;/li&gt;
&lt;/ul&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>aws数据库迁移工具简介</title>
      <link>http://localhost:1313/en/posts/aws-sct-dms-tutorial/</link>
      <pubDate>Tue, 03 Sep 2019 14:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-sct-dms-tutorial/</guid>
      <description>
        
          
            &lt;h3 id=&#34;aws数据库迁移工具简介&#34;&gt;Aws数据库迁移工具简介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;越来越多的公司选择把服务迁移到云上,那么数据库的迁移尤其重要，亚马逊提供了数据迁移的工具 sct（schema converstion tool） 和 dms （data migration service）两个工具协作帮助客户从线下数据库导入到线上数据库,source 和 target 的database可以不是一种数据库类型，比如从mysql到oracle，或者mysql 到postgresql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简单介绍一下sct，简单点来说就是数据库schema转换工具，把本地的数据库的schema转换为aws线上目标数据库的schema，然后在线上导入这个schema生成数据库,然后用DMS帮你把数据导出到aws上&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;把aws-mysql-rds-数据库-导出到-aws-postgresql-rds&#34;&gt;把aws mysql RDS 数据库 导出到 aws postgresql RDS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;实验的目标就是把mysql数据库迁移到postgresql，由于在aws cloud上做比较方面，所以选择了都在云上来迁移做实验&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Down load Aws schema convertion tool&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create mysql database on aws&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create database：test and table myclass with 2 column:id name&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;test 
id  name
1   hello
2   kitty
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create postgresql database on aws&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open aws sct&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;File -&amp;gt;new project:source :RDS for mysql ,target:RDS postsgresql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在菜单上，connection to mysql，依次数据:server name/port/username/password,链接成功后左边位置就显示了mysql&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>eni or eip can not be deleted</title>
      <link>http://localhost:1313/en/posts/aws-eni-can-not-be-deleted/</link>
      <pubDate>Mon, 02 Sep 2019 14:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-eni-can-not-be-deleted/</guid>
      <description>
        
          
            &lt;ul&gt;
&lt;li&gt;我几乎删除了所有的service，但是eni就是不让我删除&lt;/li&gt;
&lt;li&gt;关联的eip也不让删除&lt;/li&gt;
&lt;li&gt;我去aws社区看了很多帖子最后发现主要原因有两个地方&lt;/li&gt;
&lt;li&gt;efs 使用eni&lt;/li&gt;
&lt;li&gt;nat gatway 使用了eni&lt;/li&gt;
&lt;li&gt;根据这两点，我去查找，果然有个natgateway 使用eni，删除掉nat gateway后，eni可以删除，eip可以release了&lt;/li&gt;
&lt;/ul&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>一个ec2 instance上配置多个eni</title>
      <link>http://localhost:1313/en/posts/aws-multi-eni-on-one-ec2-instance/</link>
      <pubDate>Mon, 02 Sep 2019 08:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-multi-eni-on-one-ec2-instance/</guid>
      <description>
        
          
            &lt;h3 id=&#34;一个ec2-instance-配置多网卡&#34;&gt;一个ec2 instance 配置多网卡&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先要确定你需要几个公网IP，以2个为例&lt;/li&gt;
&lt;li&gt;首先要确定你需要几个网卡，以2个为例&lt;/li&gt;
&lt;li&gt;申请两个 elastic ip：IP1 ip2&lt;/li&gt;
&lt;li&gt;申请两个eni(network interface)：eni1，eni2&lt;/li&gt;
&lt;li&gt;创建一个ec2&lt;/li&gt;
&lt;li&gt;把ip1 绑定到eni1,elastic ip-&amp;gt;选中IP-&amp;gt;associate-&amp;gt;resource type:network interface -&amp;gt; private ip 自动选择&lt;/li&gt;
&lt;li&gt;把ip2 绑定到eni2,此处省略步骤&lt;/li&gt;
&lt;li&gt;把eni1绑定到ec2，network interface 页面-&amp;gt;选择eni1-&amp;gt;attach-&amp;gt; 选择 ec2 instance id&lt;/li&gt;
&lt;li&gt;把eni2绑定到ec2,此处省略步骤&lt;/li&gt;
&lt;li&gt;在ec2 instance 页面,看到iP里面公网IP只有一个，private ip 有2个&lt;/li&gt;
&lt;li&gt;为什么少了一个?用putty connnect 这个两个ip，都是没有问题，ec2 的console不显示而已&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[ec2-user@ip-172-31-1-176 ~]$ ifconfig
eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 9001
        inet 172.31.1.176  netmask 255.255.255.0  broadcast 172.31.1.255
        inet6 fe80::8a:93ff:fefd:ef5c  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether 02:8a:93:fd:ef:5c  txqueuelen 1000  (Ethernet)
        RX packets 4115218  bytes 1170825027 (1.0 GiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 3592874  bytes 8202330562 (7.6 GiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

eth1: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt;  mtu 9001
        inet 172.31.1.87  netmask 255.255.255.0  broadcast 172.31.1.255
        inet6 fe80::f1:16ff:fefa:1bba  prefixlen 64  scopeid 0x20&amp;lt;link&amp;gt;
        ether 02:f1:16:fa:1b:ba  txqueuelen 1000  (Ethernet)
        RX packets 333  bytes 26643 (26.0 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 286  bytes 33695 (32.9 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt;  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10&amp;lt;host&amp;gt;
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 10549  bytes 8263339 (7.8 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 10549  bytes 8263339 (7.8 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0 collisions 0
&lt;/code&gt;&lt;/pre&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>service catalog 简介</title>
      <link>http://localhost:1313/en/posts/aws-service-catalog/</link>
      <pubDate>Thu, 29 Aug 2019 10:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-service-catalog/</guid>
      <description>
        
          
            &lt;h3 id=&#34;aws-service-catalog-简介&#34;&gt;Aws service catalog 简介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;aws service catalog 从字面上看就是服务目录,也就是说一些服务放入一组，进行统一的规划，那里一些可以进行统一的规划呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;几个关键词&#34;&gt;几个关键词&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;portfolio&lt;/li&gt;
&lt;li&gt;product&lt;/li&gt;
&lt;li&gt;constraint&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;傳統資源創建存在問題&#34;&gt;傳統資源創建存在問題&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;從亞馬遜的blog上盜圖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;傳統資源創建&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;751&#34;
        height=&#34;436&#34;
        src=&#34;http://localhost:1313/usecase-example_13522702303702877102.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上圖存在的幾個問題非常明顯&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;創建了一組資源，資源與資源之間無法互訪&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EC2要訪問s3 ，那麼需要管理員授權&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;管理授權就要破壞兩個原則：service self-sufficient不滿足，最小權利原則(那就要定義允許ec2訪問s3的policy，所有的實例都可以訪問)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何做到產品內部服務可以互訪而產品外部的服務無權訪問呢&#34;&gt;如何做到產品內部服務可以互訪，而產品外部的服務無權訪問呢？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;從亞馬遜的blog上盜圖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;service catalog 創建產品&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;631&#34;
        height=&#34;574&#34;
        src=&#34;http://localhost:1313/concept_13299398146200500871.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A和B是兩個portfolio ，組內可以互訪，但是A和B之間無法訪問&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一個使用場景介紹&#34;&gt;一個使用場景介紹&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;從亞馬遜的blog上盜圖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;service catalog 創建產品&#34;
      
        class=&#34;image_figure image_external image_processed&#34;
        width=&#34;795&#34;
        height=&#34;441&#34;
        src=&#34;http://localhost:1313/policy_and_role_as_partition_border_636593408755960434.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;比如產品添加了一個s3-08的一個bucket，如果做到允許EC2_04訪問，而不允許其他產品或者本產品內部其他EC2訪問的呢？這就要用到 service catalog來解決&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;具體例子請看 (&lt;a href=&#34;https://aws.amazon.com/blogs/mt/create-a-security-partition-for-your-applications-using-aws-service-catalog-and-aws-lambda/&#34;&gt;https://aws.amazon.com/blogs/mt/create-a-security-partition-for-your-applications-using-aws-service-catalog-and-aws-lambda/&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>aws infrastructure as code</title>
      <link>http://localhost:1313/en/posts/aws-infrastructure-as-code/</link>
      <pubDate>Thu, 29 Aug 2019 08:30:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-infrastructure-as-code/</guid>
      <description>
        
          
            &lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;aws infrastructure as code&#34;
      
        class=&#34;image_figure image_external image_unprocessed&#34;
        src=&#34;https://raw.githubusercontent.com/clouda3/aws/master/Screenshot_2019-08-29%20infrastructure-as-code.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>使用Aws sts创建临时credential</title>
      <link>http://localhost:1313/en/posts/aws-sap-sts-service/</link>
      <pubDate>Mon, 26 Aug 2019 08:30:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-sap-sts-service/</guid>
      <description>
        
          
            &lt;h3 id=&#34;aws-sts-简介&#34;&gt;Aws sts 简介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;简单来说就是aws通过sts服务生成临时的credential给用户使用，他们可以设置有效期，自动失效,这也是amazon best practice 里面建议的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实验准备&#34;&gt;实验准备&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;创建 User&lt;/li&gt;
&lt;li&gt;创建 Role&lt;/li&gt;
&lt;li&gt;创建 s3 作为测试&lt;/li&gt;
&lt;li&gt;为User创建sts assumeRole 的访问策略&lt;/li&gt;
&lt;li&gt;在EC2上使用Aws cli 创建 历史的credential&lt;/li&gt;
&lt;li&gt;访问s3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-an-iam-user&#34;&gt;Create an IAM user&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://console.aws.amazon.com/iam/home?region=ap-southeast-1#/users&#34;&gt;https://console.aws.amazon.com/iam/home?region=ap-southeast-1#/users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;input name： mystsuser&lt;/li&gt;
&lt;li&gt;access type programmatic access&lt;/li&gt;
&lt;li&gt;其他保持默认&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;create-role-for-antoher-aws-account&#34;&gt;Create role for antoher aws account&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://console.aws.amazon.com/iam/home?region=ap-southeast-1#/roles&#34;&gt;https://console.aws.amazon.com/iam/home?region=ap-southeast-1#/roles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;选择：another aws account&lt;/li&gt;
&lt;li&gt;Account ID: 找到上面的user 的arn，XXX就是ID  (arn:aws:iam::XXXX:user/mystsuser)&lt;/li&gt;
&lt;li&gt;Attach plicy&lt;/li&gt;
&lt;li&gt;搜索s3，选择 AmanzonS3ReadOnlyAccess,next&lt;/li&gt;
&lt;li&gt;reviews and create Role，input role name：sts-s3-read-only&lt;/li&gt;
&lt;li&gt;创建完毕后，Update/Modify Trust Relationships&lt;/li&gt;
&lt;li&gt;replace (this is the arn of the user what you created) with
arn:aws:iam::XXXX:user/mystsuser&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;#34;Version&amp;#34;: &amp;#34;2012-10-17&amp;#34;,
  &amp;#34;Statement&amp;#34;: [
    {
      &amp;#34;Effect&amp;#34;: &amp;#34;Allow&amp;#34;,
      &amp;#34;Principal&amp;#34;: {
        &amp;#34;AWS&amp;#34;: &amp;#34;this is the arn of the user what you created&amp;#34;
      },
      &amp;#34;Action&amp;#34;: &amp;#34;sts:AssumeRole&amp;#34;,
      &amp;#34;Condition&amp;#34;: {}
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;创建完毕&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为user创建sts-assumerole-的访问策略&#34;&gt;为User创建sts assumeRole 的访问策略&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;user页面， 选择刚才创建的用户&lt;/li&gt;
&lt;li&gt;add inline policy&lt;/li&gt;
&lt;li&gt;service :sts&lt;/li&gt;
&lt;li&gt;Action:write-AssumeRole&lt;/li&gt;
&lt;li&gt;Resource:arn xxxx(input the arn of the role you created in earlier step)&lt;/li&gt;
&lt;li&gt;done&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ec2-配置刚才创建的用户的profile&#34;&gt;Ec2 配置刚才创建的用户的profile&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; aws configure --profile stsgeneratedprofile
AWS Access Key ID [****************QL74]:
AWS Secret Access Key [****************/soA]:
Default region name [ap-southeast-1]:
Default output format [json]:

aws sts assume-role --role-arn  arn:aws:iam::xxxx:role/sts-s3-read-only --role-session-name &amp;#34;mytestsession&amp;#34;  --profile ststestprofile --DurationSeconds 3600
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;生成用户的有效时间为3600秒，生成以下文件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
    &amp;#34;AssumedRoleUser&amp;#34;: {
        &amp;#34;AssumedRoleId&amp;#34;: &amp;#34;AROAWNQJOZK2KCBLXLQZW:mytestsession&amp;#34;,
        &amp;#34;Arn&amp;#34;: &amp;#34;arn:aws:sts::xxx:assumed-role/sts-s3-read-only/mytestsession&amp;#34;
    },
    &amp;#34;Credentials&amp;#34;: {
        &amp;#34;SecretAccessKey&amp;#34;: &amp;#34;sss&amp;#34;,
        &amp;#34;SessionToken&amp;#34;: &amp;#34;sss&amp;#34;,
        &amp;#34;Expiration&amp;#34;: &amp;#34;2019-08-26T04:26:04Z&amp;#34;,
        &amp;#34;AccessKeyId&amp;#34;: &amp;#34;sss&amp;#34;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;根据上面的文件创建新的profile&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;aws configure --profile stsgeneratedprofile 
--测出略去
--最终.aws/credential 里面

[stsgeneratedprofile]
aws_access_key_id = sss
aws_secret_access_key = sss
aws_session_token = ssss
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;最后测试&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
 aws s3 ls --profile stsgeneratedprofile

--output
2019-08-11 22:02:41 www.xxx.com


 aws s3 cp abc.txt s3://xxxxx --profile stsgeneratedprofile
upload failed: ./abc.txt to s3://xxxxx/abc.txt An error occurred (AccessDenied) when calling the PutObject operation: Access Denied
&lt;/code&gt;&lt;/pre&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title> 使用Aws System Manager 统一管理 aws resource </title>
      <link>http://localhost:1313/en/posts/aws-sap-system-manager/</link>
      <pubDate>Sun, 25 Aug 2019 16:30:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-sap-system-manager/</guid>
      <description>
        
          
            &lt;h2 id=&#34;使用aws-system-manager-统一管理-aws-resource&#34;&gt;使用Aws System Manager 统一管理 aws resource&lt;/h2&gt;
&lt;h3 id=&#34;aws-system-manager-简介&#34;&gt;Aws system Manager 简介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AWS Systems Manager gives you visibility and control of your infrastructure on AWS. Systems Manager provides a unified use:qr interface so you can view operational data from multiple AWS services and allows you to automate operational tasks across your AWS resources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aws system manager AWS  让您能够查看和控制 AWS 上的基础设施。Systems Manager 可以提供一个统一的用户界面，供您查看多种 AWS 服务的运行数据，并在 AWS 资源上自动执行操作任务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用场景&#34;&gt;使用场景&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;比如我有个20台 linux ec2，不管什么类型的，只要安装centyos，那么都要给他安装 ，cloudwatch agent 来对系统的disk和memory进行监控&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实验的前置条件&#34;&gt;实验的前置条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你的系统上必须安装SSM Agent&lt;/li&gt;
&lt;li&gt;你的EC2的role 必须具有 AmazonEC2RoleforSSM 的policy attach上去&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安装ssm-agent&#34;&gt;安装SSM agent&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Intel (x86_64) 64 位实例：

sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm

ARM (arm64) 64 位实例：

sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_arm64/amazon-ssm-agent.rpm
Intel (x86) 32 位实例：

sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_386/amazon-ssm-agent.rpm


sudo systemctl start amazon-ssm-agent
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;给ec2-创建一个role具有-amazonec2roleforssm-的policy&#34;&gt;给EC2 创建一个role具有 AmazonEC2RoleforSSM 的policy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;创建role  ssmrole，选择policy AmazonEC2RoleforSSM&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>NAT instance setup 简介</title>
      <link>http://localhost:1313/en/posts/aws-nat-instance-setup/</link>
      <pubDate>Tue, 20 Aug 2019 14:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/aws-nat-instance-setup/</guid>
      <description>
        
          
            &lt;h3 id=&#34;aws-nat-instance-setup-简介&#34;&gt;AWS NAT instance setup 简介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;NAT（Network Address Translation，网络地址转换）是1994年提出的。当在专用网内部的一些主机本来已经分配到了本地IP地址（即仅在本专用网内使用的专用地址），但现在又想和因特网上的主机通信（并不需要加密）时，可使用NAT方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aws-nat-gateway&#34;&gt;AWS NAT gateway&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Aws 有專門的nat gateway,並且是HA的，只要創建gateway然後更改一下，subnet的路由就可以了，所以自己搭建一個nat gateway實際並不是aws的範疇，實際是一個linux系統的問題&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;手動搭建一個nat-instance&#34;&gt;手動搭建一個nat instance&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;private subnet1/ instance1 / sg1(secrutiry group) / internal IP1  -&amp;gt;local node1&lt;/li&gt;
&lt;li&gt;public  subnet2/ instance2 / sg2(sercirity group) / internal IP2 /public ip2 -&amp;gt; proxy node2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置proxy-node&#34;&gt;配置proxy node&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vi /etc/sysctl.conf
net.ipv4.ip_forward=1

iptables -t nat -A POSTROUTING -o eth0 -s 192.168.1.0/24 -j MASQUERADE
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;192.168.1.0/24 為本地網絡CIDR&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EC2 頁面，選中proxy node2 -&amp;gt;Action -&amp;gt;Networking -&amp;gt;Disable source/Desk Check&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;配置-local-node-1&#34;&gt;配置 local node 1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;選擇 subnet1  -&amp;gt;Route Table&lt;/li&gt;
&lt;li&gt;點擊route table id  -&amp;gt;Routes&lt;/li&gt;
&lt;li&gt;Edit routes ：add 0.0.0.0/0  -&amp;gt;target 選中instance -&amp;gt;選中 proxy node2&lt;/li&gt;
&lt;li&gt;ssh 進入node1 :ping 8.8.8.8 -&amp;gt; 沒有為子網配置igw，有沒有配置 nat gateway, 但是可以訪問 internet&lt;/li&gt;
&lt;/ul&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>裸金属服务器使用</title>
      <link>http://localhost:1313/en/posts/bare-metal-server/</link>
      <pubDate>Wed, 06 Sep 2017 10:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/bare-metal-server/</guid>
      <description>
        
          
            &lt;h2 id=&#34;什么裸金属服务器&#34;&gt;什么裸金属服务器&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;裸金属服务器（Bare Metal Server，BMS）是一款兼具弹性云服务器和物理机性能的计算类服务，为您和您的企业提供专属的云上物理服务器，为核心数据库、关键应用系统、高性能计算、大数据等业务提供卓越的计算性能以及数据安全。租户可灵活申请，按需使用。

裸金属服务器的开通是自助完成的，您只需要指定具体的服务器类型、镜像、所需要的网络配置等，即可在短时间内获得所需的裸金属服务器。服务器供应、运维工作交由华为云，您可以专注于业务创新。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;产品架构&#34;&gt;产品架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;裸金属服务器在不同可用区中部署（可用区之间通过内网连接），部分可用区发生故障后不会影响同一区域内的其他可用区。&lt;/li&gt;
&lt;li&gt;可以通过虚拟私有云建立专属的网络环境，设置子网、安全组，并通过弹性公网IP实现外网链接（需带宽支持）。&lt;/li&gt;
&lt;li&gt;通过镜像服务，可以对裸金属服务器安装镜像，也可以通过私有镜像批量创建裸金属服务器，实现快速的业务部署。&lt;/li&gt;
&lt;li&gt;通过云硬盘服务实现数据存储，并通过云硬盘备份服务实现数据的备份和恢复。&lt;/li&gt;
&lt;li&gt;云监控是保持裸金属服务器可靠性、可用性和性能的重要部分，通过云监控，用户可以观察裸金属服务器资源。&lt;/li&gt;
&lt;li&gt;云备份提供对云硬盘和裸金属服务器的备份保护服务，支持基于快照技术的备份服务，并支持利用备份数据恢复服务器和磁盘的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;华为裸金属的服务器的架构&#34;&gt;华为裸金属的服务器的架构&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;pic&#34;
      
        class=&#34;image_figure image_internal image_unprocessed&#34;
        src=&#34;http://localhost:1313/huaweibaremetal.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;与物理机和虚拟机的对比&#34;&gt;与物理机和虚拟机的对比&lt;/h2&gt;
&lt;p&gt;&lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;pic&#34;
      
        class=&#34;image_figure image_internal image_unprocessed&#34;
        src=&#34;http://localhost:1313/huaweicompare.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;什么场景下使用裸金属服务器&#34;&gt;什么场景下使用裸金属服务器&lt;/h2&gt;
&lt;p&gt;裸金属服务与一般云服务器最大的区别是是虚拟化与非虚拟化，虚拟化的缺点就是性能损失，操作系统和应用程序在调用硬件资源的时候，没有直接掌控，而是通过虚拟化软件间接管理的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高安全性和法规要求&lt;/li&gt;
&lt;li&gt;高性能计算场景&lt;/li&gt;
&lt;li&gt;资源独占的场景&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;不同厂家的裸金属服务器的服务差别&#34;&gt;不同厂家的裸金属服务器的服务差别&lt;/h2&gt;
&lt;p&gt;有很多小厂的裸金属服务器，说实话就是一台独立主机，独立的独享宽带的网络（可以定制宽带），但是网络无法定制，比如没有VPC的选项，没有安全组，要自己通过防火墙软件管安全，也没有网络硬盘，说白了就是一台独立的远程主机。阿里云华为云这些已经非常成熟了，跟网络主机的区别不是太大，区别就是一个非虚拟化的主机而已，其他的地方基本上区别不大。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>裸金属服务器遇到的docker容器访问问题</title>
      <link>http://localhost:1313/en/posts/firewalld-block-docker/</link>
      <pubDate>Wed, 06 Sep 2017 10:40:37 +0800</pubDate>
      
      <guid>http://localhost:1313/en/posts/firewalld-block-docker/</guid>
      <description>
        
          
            &lt;h2 id=&#34;问题描述&#34;&gt;问题描述&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;我们本地数据中心服务器处理与客户的接口的时候发现网络有严重的延迟，然后我们又有数据合规方面的问题，我们就采用云端的裸金属服务器，安装了docker后发现docker无法访问到主机。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;问题发现&#34;&gt;问题发现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docker exec -ti docker-id bash 进入主机&lt;/li&gt;
&lt;li&gt;在docker主机内部telnet 主机IP 端口&lt;/li&gt;
&lt;li&gt;发现无法访问&lt;/li&gt;
&lt;li&gt;退出虚拟主机在主机执行telnet 主机IP 端口 ，是可以访问的&lt;/li&gt;
&lt;li&gt;检查网络 &lt;figure&gt;
  &lt;picture&gt;

    
      
        
        
        
        
        
        
    &lt;img
      loading=&#34;lazy&#34;
      decoding=&#34;async&#34;
      alt=&#34;pic&#34;
      
        class=&#34;image_figure image_internal image_unprocessed&#34;
        src=&#34;http://localhost:1313/firewall-docker.png&#34;
      
      
    /&gt;

    &lt;/picture&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;原来是docker0 与主机eth0 之间通信问题被firewall屏蔽了&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; firewall-cmd --permanent --add-rich-rule=&amp;#34;rule family=&amp;#34;ipv4&amp;#34; source address=&amp;#34;172.17.0.1/16&amp;#34; accept&amp;#34;
 firewall-cmd --reload 
&lt;/code&gt;&lt;/pre&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
