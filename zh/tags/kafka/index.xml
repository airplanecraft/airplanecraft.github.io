<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kafka on 飞机模型</title>
    <link>https://www.airplanecraft.com/zh/tags/kafka/</link>
    <description>Recent content in Kafka on 飞机模型</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 20 Nov 2021 11:40:30 +0800</lastBuildDate>
    <atom:link href="https://www.airplanecraft.com/zh/tags/kafka/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Polygon在websoket的连接串数据的经常中断</title>
      <link>https://www.airplanecraft.com/zh/posts/polygon-websoket-data-transfer-issue/</link>
      <pubDate>Sat, 20 Nov 2021 11:40:30 +0800</pubDate>
      <guid>https://www.airplanecraft.com/zh/posts/polygon-websoket-data-transfer-issue/</guid>
      <description>&lt;h2 id=&#34;本来使用工具或者服务&#34;&gt;本来使用工具或者服务&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pologon 美股数据供应商&lt;/li&gt;&#xA;&lt;li&gt;Kafka&lt;/li&gt;&#xA;&lt;li&gt;Nettty&lt;/li&gt;&#xA;&lt;li&gt;Centos8.2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;架构图&#34;&gt;架构图&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;polygon&#34; src=&#34;https://www.airplanecraft.com/images/photo_2022-02-03_22-18-05.jpg&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;架构说明&#34;&gt;架构说明&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Polygon是美股的数据供应商,提供美股tick级别的数据服务&lt;/li&gt;&#xA;&lt;li&gt;美股开盘数据非常的大，平时可以达到6M/秒的传输速度，也就是说可以达到每秒6万条数据的传输速度&lt;/li&gt;&#xA;&lt;li&gt;数据的传输是基于internet的传输，所以要保障数据在互联网上的快速传输必须基于长连接来实现，因此polygon提供了websocket服务&lt;/li&gt;&#xA;&lt;li&gt;我们的app收到polygon websocket推送过来的数据要进行简单的解析和格式转换，然后发送到本地的kafka cluster中间件用来分发数据，给其他的应用来做大数据处理包括flink等大数据中间件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;出现的问题&#34;&gt;出现的问题&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Polygon数据传输出现了频繁的中断1：Slow consumer&lt;/li&gt;&#xA;&lt;li&gt;slow consumer:https://polygon.io/docs/stocks/ws_getting-started 查看了一下polygon的技術文檔: if a client is consuming messages too slowly for too long, Polygon.io&amp;rsquo;s server-side buffer may get too large. If that happens, Polygon.io will terminate the WebSocket connection. You can check your account dashboard to see if a connection was terminated as a slow consumer. If this happens to you consistently, consider subscribing to fewer symbols or channels. 就是你的輸出消費的太慢了，導致polygon server的buffer已經滿了，消費不掉&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;找出問題&#34;&gt;找出問題&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;肯定我們消費者太慢出現的問題&lt;/li&gt;&#xA;&lt;li&gt;屏蔽掉任何發送kafka，直接打印日志就不會出現這個問題，定位到kafka client 發送速度慢的問題&lt;/li&gt;&#xA;&lt;li&gt;發送慢的原因可能是1：文件句柄數夠不夠?2:cpu和内存的使用率是否太高？3:java jvm的gc是否很慢？4：kafka連接池的數量是否足夠5：kafka客戶端發送是否正確配置批量？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;具體去找問題&#34;&gt;具體去找問題&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;查看進程的當前的連接數&#xA;ls  /proc/`jps |awk &amp;#39;{print $1}&amp;#39;`/fd/ |wc -l&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;由於我們使用prometheus監控系統，發現cpu利用率低於20%，内存低於30%，同時使用jconsole鏈接查看jvm也沒有發現問題&lt;/li&gt;&#xA;&lt;li&gt;查看jconsole發現大量的kafka客戶端鏈接池出現block等待的情況，從這裏可以發現應該發送kafka的速度太慢導致的&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;具體解決&#34;&gt;具體解決&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#xA;spring.kafka.producer.buffer-memory=33554432&#xA;spring.kafka.producer.batch-size=51200&#xA;spring.kafka.producer.properties.linger.ms=200&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;加大batch-size到50K，linger.ms到200ms ，測試兩天晚上數據，一切正常&lt;/p&gt;</description>
    </item>
    <item>
      <title>kafka cluster的搭建</title>
      <link>https://www.airplanecraft.com/zh/posts/kafka-cluster-setup/</link>
      <pubDate>Thu, 30 Jul 2020 11:40:37 +0800</pubDate>
      <guid>https://www.airplanecraft.com/zh/posts/kafka-cluster-setup/</guid>
      <description>&lt;h2 id=&#34;本文使用工具或者服务&#34;&gt;本文使用工具或者服务&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java 8&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://archive.apache.org/dist/kafka/3.0.0/kafka_2.13-3.0.0.tgz&#34;&gt;https://archive.apache.org/dist/kafka/3.0.0/kafka_2.13-3.0.0.tgz&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz&#34;&gt;https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Centos8.2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;zookeeper-簡介&#34;&gt;Zookeeper 簡介&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ZooKeeper是一个分布式协调服务，它的主要作用是为分布式系统提供一致性服务，提供的功能包括：配置维护、命名服务、分布式同步、组服务等。Kafka的运行依赖ZooKeeper。&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Broker注册&lt;/li&gt;&#xA;&lt;li&gt;Topic注册&lt;/li&gt;&#xA;&lt;li&gt;生产者负载均衡&lt;/li&gt;&#xA;&lt;li&gt;消费者负载均衡&lt;/li&gt;&#xA;&lt;li&gt;消费者注册&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;kafka-簡介&#34;&gt;Kafka 簡介&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者在网站中的所有动作流数据。&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Kafka  是一种高吞吐量的分布式发布订阅消息系统，有如下特性：&lt;/li&gt;&#xA;&lt;li&gt;通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。&lt;/li&gt;&#xA;&lt;li&gt;高吞吐量 即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。&lt;/li&gt;&#xA;&lt;li&gt;支持通过Kafka服务器和消费机集群来分区消息。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;zookeeper-與kafka之間的關係&#34;&gt;zookeeper 與kafka之間的關係&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ZooKeeper用于分布式系统的协调，Kafka使用ZooKeeper也是基于相同的原因。ZooKeeper主要用来协调Kafka的各个broker，不仅可以实现broker的负载均衡，而且当增加了broker或者某个broker故障了，ZooKeeper将会通知生产者和消费者，这样可以保证整个系统正常运转。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;安裝zooker和kafka-之前首先要做系統的優化和配置&#34;&gt;安裝zooker和kafka 之前首先要做系統的優化和配置&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;文件句柄數的調整&lt;/li&gt;&#xA;&lt;li&gt;oracle Jre8 安裝&lt;/li&gt;&#xA;&lt;li&gt;磁盤的分區和挂載點必須滿足kafka大數量的存儲xfs分區&lt;/li&gt;&#xA;&lt;li&gt;關閉selinux&lt;/li&gt;&#xA;&lt;li&gt;防火墻暫時關閉(後面看可以統一規劃端口)&lt;/li&gt;&#xA;&lt;li&gt;創建非root的kafka管理用戶並添加sudoer權限&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;注意事項&#34;&gt;注意事項&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;kafka是一個分佈式的消息系統，我們會臨時存儲消息，如果存儲消息的時間長，那麽需要大空間，所以分區的時候已經要注意，就是安裝kafka的時候存儲一定要挂載到大的硬盤空間上&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;zookeeper-配置&#34;&gt;Zookeeper 配置&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# The number of milliseconds of each tick&#xA;tickTime=2000&#xA;# The number of ticks that the initial&#xA;# synchronization phase can take&#xA;initLimit=10&#xA;# The number of ticks that can pass between&#xA;# sending a request and getting an acknowledgement&#xA;syncLimit=5&#xA;# the directory where the snapshot is stored.&#xA;# do not use /tmp for storage, /tmp here is just&#xA;# example sakes.&#xA;dataDir=/opt/conf&#xA;# /opt/conf/myid #myid文件，里面的内容为数字，用于标识主机，如果这个文件没有的话，zookeeper无法启动&#xA;# the port at which the clients will connect&#xA;clientPort=2181&#xA;# the maximum number of client connections.&#xA;# increase this if you need to handle more clients&#xA;#maxClientCnxns=60&#xA;#&#xA;# Be sure to read the maintenance section of the&#xA;# administrator guide before turning on autopurge.&#xA;#&#xA;# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance&#xA;#&#xA;# The number of snapshots to retain in dataDir&#xA;#autopurge.snapRetainCount=3&#xA;# Purge task interval in hours&#xA;# Set to &amp;#34;0&amp;#34; to disable auto purge feature&#xA;#autopurge.purgeInterval=1&#xA;&#xA;## Metrics Providers&#xA;#&#xA;# https://prometheus.io Metrics Exporter&#xA;#metricsProvider.className=org.apache.zookeeper.metrics.prometheus.PrometheusMetricsProvider&#xA;#metricsProvider.httpPort=7000&#xA;#metricsProvider.exportJvmInfo=true&#xA;server.1=192.168.25.231:12888:13888&#xA;server.2=192.168.25.232:12888:13888&#xA;server.3=192.168.25.233:12888:13888&#xA;server.4=192.168.25.234:12888:13888&#xA;server.5=192.168.25.235:12888:13888&#xA;&#xA;#配置参数说明：&#xA;tickTime:客户端与服务器或者服务器与服务器之间每个tickTime时间就会发送一次心跳。通过心跳不仅能够用来监听机器的工作状态，还可以通过心跳来控制Flower跟Leader的通信时间，默认2秒&#xA;initLimit：集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）。&#xA;syncLimit：集群中flower服务器（F）跟leader（L）服务器之间的请求和答应最多能容忍的心跳数。   &#xA;dataDir：该属性对应的目录是用来存放myid信息跟一些版本，日志，跟服务器唯一的ID信息等。&#xA;clientPort：客户端连接的接口，客户端连接zookeeper服务器的端口，zookeeper会监听这个端口，接收客户端的请求访问！这个端口默认是2181。&#xA;service.N=YYY:A:B&#xA;N：代表服务器编号（也就是myid里面的值）&#xA;YYY：服务器地址&#xA;A：表示 Flower 跟 Leader的通信端口，简称服务端内部通信的端口（默认2888),我们使用12888&#xA;B：表示 是选举端口（默认是3888),我们使用&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;kafka的配置&#34;&gt;Kafka的配置&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#xA;# Licensed to the Apache Software Foundation (ASF) under one or more&#xA;# contributor license agreements.  See the NOTICE file distributed with&#xA;# this work for additional information regarding copyright ownership.&#xA;# The ASF licenses this file to You under the Apache License, Version 2.0&#xA;# (the &amp;#34;License&amp;#34;); you may not use this file except in compliance with&#xA;# the License.  You may obtain a copy of the License at&#xA;#&#xA;#    http://www.apache.org/licenses/LICENSE-2.0&#xA;#&#xA;# Unless required by applicable law or agreed to in writing, software&#xA;# distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS,&#xA;# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;# See the License for the specific language governing permissions and&#xA;# limitations under the License.&#xA;&#xA;# see kafka.server.KafkaConfig for additional details and defaults&#xA;&#xA;############################# Server Basics #############################&#xA;&#xA;# The id of the broker. This must be set to a unique integer for each broker.&#xA;broker.id=1&#xA;&#xA;############################# Socket Server Settings #############################&#xA;&#xA;# The address the socket server listens on. It will get the value returned from&#xA;# java.net.InetAddress.getCanonicalHostName() if not configured.&#xA;#   FORMAT:&#xA;#     listeners = listener_name://host_name:port&#xA;#   EXAMPLE:&#xA;#     listeners = PLAINTEXT://your.host.name:9092&#xA;listeners=PLAINTEXT://192.168.25.231:9092&#xA;&#xA;# Hostname and port the broker will advertise to producers and consumers. If not set,&#xA;# it uses the value for &amp;#34;listeners&amp;#34; if configured.  Otherwise, it will use the value&#xA;# returned from java.net.InetAddress.getCanonicalHostName().&#xA;#advertised.listeners=PLAINTEXT://your.host.name:9092&#xA;&#xA;# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details&#xA;#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL&#xA;&#xA;# The number of threads that the server uses for receiving requests from the network and sending responses to the network&#xA;num.network.threads=3&#xA;&#xA;# The number of threads that the server uses for processing requests, which may include disk I/O&#xA;num.io.threads=8&#xA;&#xA;# The send buffer (SO_SNDBUF) used by the socket server&#xA;socket.send.buffer.bytes=102400&#xA;&#xA;# The receive buffer (SO_RCVBUF) used by the socket server&#xA;socket.receive.buffer.bytes=102400&#xA;&#xA;# The maximum size of a request that the socket server will accept (protection against OOM)&#xA;socket.request.max.bytes=104857600&#xA;&#xA;&#xA;############################# Log Basics #############################&#xA;&#xA;# A comma separated list of directories under which to store log files&#xA;log.dirs=/kafka-data/kafka-logs&#xA;&#xA;# The default number of log partitions per topic. More partitions allow greater&#xA;# parallelism for consumption, but this will also result in more files across&#xA;# the brokers.&#xA;num.partitions=1&#xA;&#xA;# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.&#xA;# This value is recommended to be increased for installations with data dirs located in RAID array.&#xA;num.recovery.threads.per.data.dir=1&#xA;&#xA;############################# Internal Topic Settings  #############################&#xA;# The replication factor for the group metadata internal topics &amp;#34;__consumer_offsets&amp;#34; and &amp;#34;__transaction_state&amp;#34;&#xA;# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.&#xA;offsets.topic.replication.factor=1&#xA;transaction.state.log.replication.factor=1&#xA;transaction.state.log.min.isr=1&#xA;&#xA;############################# Log Flush Policy #############################&#xA;&#xA;# Messages are immediately written to the filesystem but by default we only fsync() to sync&#xA;# the OS cache lazily. The following configurations control the flush of data to disk.&#xA;# There are a few important trade-offs here:&#xA;#    1. Durability: Unflushed data may be lost if you are not using replication.&#xA;#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.&#xA;#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.&#xA;# The settings below allow one to configure the flush policy to flush data after a period of time or&#xA;# every N messages (or both). This can be done globally and overridden on a per-topic basis.&#xA;&#xA;# The number of messages to accept before forcing a flush of data to disk&#xA;#log.flush.interval.messages=10000&#xA;&#xA;# The maximum amount of time a message can sit in a log before we force a flush&#xA;#log.flush.interval.ms=1000&#xA;&#xA;############################# Log Retention Policy #############################&#xA;&#xA;# The following configurations control the disposal of log segments. The policy can&#xA;# be set to delete segments after a period of time, or after a given size has accumulated.&#xA;# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens&#xA;# from the end of the log.&#xA;&#xA;# The minimum age of a log file to be eligible for deletion due to age&#xA;log.retention.hours=168&#xA;&#xA;# A size-based retention policy for logs. Segments are pruned from the log unless the remaining&#xA;# segments drop below log.retention.bytes. Functions independently of log.retention.hours.&#xA;#log.retention.bytes=1073741824&#xA;&#xA;# The maximum size of a log segment file. When this size is reached a new log segment will be created.&#xA;log.segment.bytes=1073741824&#xA;&#xA;# The interval at which log segments are checked to see if they can be deleted according&#xA;# to the retention policies&#xA;log.retention.check.interval.ms=300000&#xA;&#xA;############################# Zookeeper #############################&#xA;&#xA;# Zookeeper connection string (see zookeeper docs for details).&#xA;# This is a comma separated host:port pairs, each corresponding to a zk&#xA;# server. e.g. &amp;#34;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&amp;#34;.&#xA;# You can also append an optional chroot string to the urls to specify the&#xA;# root directory for all kafka znodes.&#xA;zookeeper.connect=192.168.25.231:2181,192.168.25.232:2181,192.168.25.233:2181,192.168.25.234:2181,192.168.25.235:2181&#xA;&#xA;# Timeout in ms for connecting to zookeeper&#xA;zookeeper.connection.timeout.ms=18000&#xA;&#xA;&#xA;&#xA;############################# Group Coordinator Settings #############################&#xA;&#xA;# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.&#xA;# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.&#xA;# The default value for this is 3 seconds.&#xA;# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.&#xA;# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.&#xA;group.initial.rebalance.delay.ms=0&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装kafka的ui-监控&#34;&gt;安装kafka的ui 监控&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run -p 8080:8080 \&#xA;&#x9;-e KAFKA_CLUSTERS_0_NAME=local \&#xA;&#x9;-e KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=192.168.25.231:9092,192.168.25.232:9092,192.168.25.231:9092,192.168.25.233:9092,192.168.25.234:9092,192.168.25.235:9092 \&#xA;&#x9;-d provectuslabs/kafka-ui:latest &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;&#xA;&lt;li&gt;访问http://ip:8080/ 就可以看到kafka管理页面&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
